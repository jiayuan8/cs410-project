,course_link,lesson_filename,lesson_filepath,lesson_contents,lesson_name
0,https://www.coursera.org/learn/text-retrieval,01_lesson-3-1-evaluation-of-tr-systems.en.txt,text-retrieval/04_week-3/02_week-3-lessons/01_lesson-3-1-evaluation-of-tr-systems.en.txt,"[music] this lecture is about evaluation of text retrieval systems in the previous lectures, we have talked about the a number of text retrieval methods, different kinds of ranking functions. but how do we know which one works the best? in order to answer this question, we have to compare them and that means we have to evaluate these retrieval methods. so this is the main topic of this lecture. first, lets think about why do we have to do evaluation? i already give one reason. that is, we have to use evaluation to figure out which retrieval method works better. now this is very important for advancing our knowledge. otherwise, we wouldn't know whether a new idea works better than an old idea. in the beginning of this course, we talked about the problem of text retrieval. we compare it with data base retrieval. there we mentioned that text retrieval is an empirically defined problem. so evaluation must rely on users. which system works better, would have to be judged by our users. so, this becomes a very challenging problem because how can we get users involved in the evaluation? how can we do a fair comparison of different method? so just go back to the reasons for evaluation. i listed two reasons here. the second reason, is basically what i just said, but there is also another reason which is to assess the actual utility of a text regional system. imagine you're building your own such annual applications, it would be interesting knowing how well your search engine works for your users. so in this case, matches must reflect the utility to the actual users in real occasion. and typically, this has to be done by using user starters and using the real search engine. in the second case, or the second reason, the measures actually all need to collated with the utility to actually use this. thus, they don't have to accurately reflect the exact utility to users. so the measure only needs to be good enough to tell which method works better. and this is usually done through a test collection. and this is the main idea that we'll be talking about in this course. this has been very important for comparing different algorithms and for improving search engine system in general. so let's talk about what to measure. there are many aspects of searching that we can measure, we can evaluate. and here, i listed the three major aspects. one, is effectiveness or accuracy. how accurate are the search results? in this case, we're measuring a system's capability of ranking relevant documents on top of non relevant ones. the second, is efficiency. how quickly can you get the results? how much computing resources are needed to answer a query? in this case, we need to measure the space and time overhead of the system. the third aspect is usability. basically the question is, how useful is a system for new user tasks. here, obviously, interfaces and many other things also important and would typically have to do user studies. now in this course, we're going to talk mostly about effectiveness and accuracy measures. because the efficiency and usability dimensions are not really unique to search engines. and so they are needed for without any other software systems. and there is also good coverage of such and other causes. but how to evaluate search engine's quality or accuracy is something unique to text retrieval and we're going to talk a lot about this. the main idea that people have proposed before using a test set to evaluate the text retrieval algorithm is called the cranfield evaluation methodology. this one actually was developed a long time ago, developed in 1960s. it's a methodology for laboratory test of system components. its sampling methodology that has been very useful, not just for search engine evaluation. but also for evaluating virtually all kinds of empirical tasks, and for example in natural language processing or in other fields where the problem is empirical to find, we typically would need to use such a methodology. and today with the big data challenging with the use of machine learning everywhere. this methodology has been very popular, but it was first developed for a search engine application in the 1960s. so the basic idea of this approach is to build a reusable test collection and define measures. once such a test collection is built, it can be used again and again to test different algorithms. and we're going to define measures that allow you to quantify performance of a system and algorithm. so how exactly will this work? well we can do have a sample collection of documents and this is adjusted to simulate the real document collection in the search application. we're going to also have a sample set of queries, or topics. this is a little simulator that uses queries. then, we'll have to have those relevance judgments. these are judgments of which documents should be returned for which queries. ideally, they have to be made by users who formulated the queries. because those are the people that know exactly what documents would be used for. and finally, we have to have matches for quantify how well our system's result matches the ideal ranked list. that would be constructed base on user's relevance judgements. so this methodology is very useful for starting retrieval algorithms, because the test can be reused many times. and it will also provide a fair comparison for all the methods. we have the same criteria or same dataset to be used to compare different algorithms. this allows us to compare a new algorithm with an old algorithm that was divided many years ago, by using the same standard. so this is the illustration of this works, so as i said, we need our queries that are showing here. we have q1, q2 etc. we also need the documents and that's called the document caching and on the right side you will see we need relevance judgments. these are basically the binary judgments of documents with respect to a query. so for example, d1 is judged as being relevant to q1, d2 is judged as being relevant as well, and d3 is judged as not relevant. and the q1 etc. these will be created by users. once we have these, and we basically have a test collection. and then if you have two systems, you want to compare them, then you can just run each system on these queries and the documents and each system would then return results. let's say if the queries q1 and then we would have the results here. here i show r sub a as the results from system a. so this is, remember we talked about task of computing approximation of the relevant document set. r sub a is system a's approximation here. and r sub b is system b's approximation of relevant documents. now, let's take a look at these results. so which is better? now imagine if a user, which one would you like? now let's take a look at the both results. and there are some differences and there are some documents that are returned by both systems. but if you look at the results, you will feel that maybe a is better in the sense that we don't have many number element documents. and among the three documents returned, the two of them are relevant. so that's good, it's precise. on the other hand one council say maybe b is better, because we've got all of them in the documents. we've got three instead of two. so which one is better and how do we quantify this? well, obviously this question highly depends on a user's task. it depends on users as well. you might even imagine for some users may be system a is better. if the user is not interested in getting all the random documents. right, in this case the user doesn't have to read a million users will see most of the relevant documents. on the other hand, one can also imagine the user might need to have as many random documents as possible. for example, if you're doing a literature survey you might be in the sigma category, and you might find that system b is better. so in the case, we will have to also define measures that will quantify them. and we might need it to define multiple measures because users have different perspectives of looking at the results. [music",01_lesson-3-1-evaluation-of-tr-systems
1,https://www.coursera.org/learn/text-retrieval,05_lesson-3-5-evaluation-of-tr-systems-multi-level-judgements.en.txt,text-retrieval/04_week-3/02_week-3-lessons/05_lesson-3-5-evaluation-of-tr-systems-multi-level-judgements.en.txt,"[music] this lecture is about how to evaluate the text retrieval system when we have multiple levels of judgements. in this lecture, we will continue the discussion of evaluation. we're going to look at how to evaluate a text retrieval system, when we have multiple levels of judgements. so far we have talked about the binary judgements, that means a document is judged as being relevant or not relevant. but earlier, we also talk about the relevance as a medal of degrees. so we often can distinguish very high relevant documents, those are very useful documents, from moderately relevant documents. they are okay, they are useful perhaps. and further from now, we're adding the documents, those are not useful. so imagine you can have ratings for these pages. then, you would have multiple levels of ratings. for example, here i show example of three levels, 3 for relevant, sorry 3 for very relevant, 2 for marginally relevant, and 1 for non-relevant. now, how do we evaluate the search engine system using these judgements? obvious that the map doesn't work, average of precision doesn't work, precision, and recall doesn't work, because they rely on binary judgements. so let's look at some top ranked results when using these judgements. imagine the user would be mostly care about the top ten results here. and we marked the rating levels, or relevance levels, for these documents as shown here, 3, 2, 1, 1, 3, etcetera. and we call these gain. and the reason why we call it the gain is because the measure that we are infusing is called the ndcg normalized or accumulated gain. so this gain, basically, can measure how much a gain of random information a user can obtain by looking at each document, right? so looking at the first document, the user can gain 3 points. looking at the non-relevant document user would only gain 1 point. looking at the moderator or marginally relevant, document the user would get 2 points, etcetera. so, this gain to each of the measures is a utility of the document from a user's perspective. of course, if we assume the user stops at the 10 documents and we're looking at the cutoff at 10, we can look at the total gain of the user. and what's that? well, that's simply the sum of these, and we call it the cumulative gain. so if the user stops after the position 1, that's just a 3. if the user looks at another document, that's a 3+2. if the user looks at the more documents, then the cumulative gain is more. of course this is at the cost of spending more time to examine the list. so cumulative gain gives us some idea about how much total gain the user would have if the user examines all these documents. now, in ndcg, we also have another letter here, d, discounted cumulative gain. so, why do we want to do discounting? well, if you look at this cumulative gain, there is one deficiency, which is it did not consider the rank position of these documents. so for example, looking at this sum here, and we only know there is 1 highly relevant document, 1 marginally relevant document, 2 non-relevant documents. we don't really care where they are ranked. ideally, we want these two to be ranked on the top which is the case here. but how can we capture that intuition? well we have to say, well this is 3 here is not as good as this 3 on the top. and that means the contribution of the gain from different positions has to be weighted by their position. and this is the idea of discounting, basically. so we're going to to say, well, the first one does not need to be discounted because the user can be assumed that will always see this document. but the second one, this one will be discounted a little bit because there's a small possibility that the user wouldn't notice it. so we divide this gain by a weight based on the position. so log of 2, 2 is the rank position of this document. and when we go to the third position, we discounted even more, because the normalizer is log of 3, and so on and so forth. so when we take such a sum that a lower ranked document would not contribute that much as a highly ranked document. so that means if you, for example, switch the position of this, let's say this position, and this one, and then you would get more discount if you put, for example very relevant document here as opposed to here. imagine if you put the 3 here, then it would have to be discounted. so it's not as good as if you we would put the 3 here. so this is the idea of discounting. okay, so now at this point that we have got a discounted cumulative gain for measuring the utility of this ranked list with multiple levels of judgements. so are we happy with this? well, we can use this to rank systems. now, we still need to do a little bit more in order to make this measure comparable across different topics. and this is the last step, and by the way, here we just show the dcg at 10, so this is the total sum of dcg, all these 10 documents. so the last step is called n, normalization. and if we do that, then we'll get the normalized dcg. so how do we do that? well, the idea here is we're going to normalize dcg by the ideal dcg at the same cutoff. what is the ideal dcg? well, this is the dcg of an ideal ranking. so imagine if we have 9 documents in the whole collection rated 3 here. and that means in total we have 9 documents rated 3. then our ideal rank lister would have put all these 9 documents on the very top. so all these would have to be 3 and then this would be followed by a 2 here. because that's the best we could do after we have run out of the 3. but all these positions would be 3. right? so this would our ideal ranked list. and then we had computed the dcg for this ideal rank list. so this would be given by this formula that you see here. and so this ideal dcg would then be used as the normalizer dcg. so here. and this idea of dcg would be used as a normalizer. so you can imagine now, normalization essentially is to compare the actual dcg with the best dcg you can possibly get for this topic. now why do we want to do this? well, by doing this we'll map the dcg values into a range of 0 through 1. so the best value, or the highest value, for every query would be 1. that's when your rank list is, in fact, the ideal list but otherwise, in general, you will be lower than one. now, what if we don't do that? well, you can see, this transformation, or this normalization, doesn't really affect the relative comparison of systems for just one topic, because this ideal dcg is the same for all the systems, so the ranking of systems based on only dcg would be exactly the same as if you rank them based on the normalized dcg. the difference however is when we have multiple topics. because if we don't do normalization, different topics will have different scales of dcg. for a topic like this one, we have 9 highly relevant documents, the dcg can get really high, but imagine in another case, there are only two very relevant documents in total in the whole collection. then the highest dcg that any system could achieve for such a topic would not be very high. so again, we face the problem of different scales of dcg values. when we take an average, we don't want the average to be dominated by those high values. those are, again, easy queries. so, by doing the normalization, we can have avoided the problem, making all the queries contribute to equal to the average. so, this is a idea of ndcg, it's used for measuring a rank list based on multiple level of relevance judgements. in a more general way this is basically a measure that can be applied to any ranked task with multiple level of judgements. and the scale of the judgements can be multiple, can be more than binary not only more than binary they can be much multiple levels like 1, 0, 5 or even more depending on your application. and the main idea of this measure, just to summarize, is to measure the total utility of the top k documents. so you always choose a cutoff and then you measure the total utility. and it would discount the contribution from a lowly ranked document. and then finally, it would do normalization to ensure comparability across queries. [music",05_lesson-3-5-evaluation-of-tr-systems-multi-level-judgements
2,https://www.coursera.org/learn/text-retrieval,03_lesson-3-3-evaluation-of-tr-systems-evaluating-ranked-lists-part-1.en.txt,text-retrieval/04_week-3/02_week-3-lessons/03_lesson-3-3-evaluation-of-tr-systems-evaluating-ranked-lists-part-1.en.txt,"[music] this lecture is about, how we can evaluate a ranked list? in this lecture, we will continue the discussion of evaluation. in particular, we are going to look at, how we can evaluate a ranked list of results. in the previous lecture, we talked about, precision-recall. these are the two basic measures for, quantitatively measuring the performance of a search result. but, as we talked about, ranking, before, we framed that the text of retrieval problem, as a ranking problem. so, we also need to evaluate the, the quality of a ranked list. how can we use precision-recall to evaluate, a ranked list? well, naturally, we have to look after the precision-recall at different, cut-offs. because in the end, the approximation of relevant documents, set, given by a ranked list, is determined by where the user stops browsing. right? if we assume the user, securely browses, the list of results, the user would, stop at some point, and that point would determine the set. and then, that's the most important, cut-off, that we have to consider, when we compute the precision-recall. without knowing where exactly user would stop, then we have to consider, all the positions where the user could stop. so, let's look at these positions. look at this slide, and then, let's look at the, what if the user stops at the, the first document? what's the precision-recall at this point? what do you think? well, it's easy to see, that this document is so, the precision is one out of one. we have, got one document, and that's relevent. what about the recall? well, note that, we're assuming that, there are ten relevant documents, for this query in the collection, so, it's one out of ten. what if the user stops at the second position? top two. well, the precision is the same, 100%, two out of two. and, the record is two out of ten. what if the user stops at the third position? well, this is interesting, because in this case, we have not got any, additional relevant document, so, the record does not change. but the precision is lower, because we've got number [inaudible] so, what's exactly the precision? well, it's two out of three, right? and, recall is the same, two out of ten. so, when would see another point, where the recall would be different? now, if you look down the list, well, it won't happen until, we have, seeing another relevant document. in this case d5, at that point, the, the recall is increased through three out of ten, and, the precision is three out of five. so, you can see, if we keep doing this, we can also get to d8. and then, we will have a precision of four out of eight, because there are eight documents, and four of them are relevant. and, the recall is a four out of ten. now, when can we get, a recall of five out of ten? well, in this list, we don't have it, so, we have to go down on the list. we don't know, where it is? but, as convenience, we often assume that, the precision is zero, at all the, the othe, the precision are zero at all the other levels of recall, that are beyond the search results. so, of course, this is a pessimistic assumption, the actual position would be higher, but we make, make this assumption, in order to, have an easy way to, compute another measure called average precision, that we will discuss later. now, i should also say, now, here you see, we make these assumptions that are clearly not, accurate. but, this is okay, for the purpose of comparing to, text methods. and, this is for the relative comparison, so, it's okay, if the actual measure, or actual, actual number deviates a little bit, from the true number. as long as the deviation, is not biased toward any particular retrieval method, we are okay. we can still, accurately tell which method works better. and, this is important point, to keep in mind. when you compare different algorithms, the key's to avoid any bias toward each method. and, as long as, you can avoid that. it's okay, for you to do transformation of these measures anyway, so, you can preserve the order. okay, so, we'll just talk about, we can get a lot of precision-recall numbers at different positions. so, now, you can imagine, we can plot a curve. and, this just shows on the, x-axis, we show the recalls. and, on the y-axis, we show the precision. so, the precision line was marked as .1, .2, .3, and, 1.0. right? so, this is, the different, levels of recall. and,, the y-axis also has, different amounts, that's for precision. so, we plot the, these, precision-recall numbers, that we have got, as points on this picture. now, we can further, and link these points to form a curve. as you'll see, we assumed all the other, precision as the high-level recalls, be zero. and, that's why, they are down here, so, they are all zero. and this, the actual curve probably will be something like this, but, as we just discussed, it, it doesn't matter that much, for comparing two methods. because this would be, underestimated, for all the method. okay, so, now that we, have this precision-recall curve, how can we compare ranked to back list? all right, so, that means, we have to compare two pr curves. and here, we show, two cases. where system a is showing red, system b is showing blue, there's crosses. all right, so, which one is better? i hope you can see, where system a is clearly better. why? because, for the same level of recall, see same level of recall here, and you can see, the precision point by system a is better, system b. so, there's no question. in here, you can imagine, what does the code look like, for ideal search system? well, it has to have perfect, precision at all the recall points, so, it has to be this line. that would be the ideal system. in general, the higher the curve is, the better, right? the problem is that, we might see a case like this. this actually happens often. like, the two curves cross each other. now, in this case, which one is better? what do you think? now, this is a real problem, that you actually, might have face. suppose, you build a search engine, and you have a old algorithm, that's shown here in blue, or system b. and, you have come up with a new idea. and, you test it. and, the results are shown in red, curve a. now, your question is, is your new method better than the old method? or more, practically, do you have to replace the algorithm that you're already using, your, in your search engine, with another, new algorithm? so, should we use system, method a, to replace method b? this is going to be a real decision, that you to have to make. if you make the replacement, the search engine would behave like system a here, whereas, if you don't do that, it will be like a system b. so, what do you do? now, if you want to spend more time to think about this, pause the video. and, it's actually very useful to think about that. as i said, it's a real decision that you have to make, if you are building your own search engine, or if you're working, for a company that, cares about the search. now, if you have thought about this for a moment, you might realize that, well, in this case, it's hard to say. now, some users might like a system a, some users might like, like system b. so, what's the difference here? well, the difference is just that, you know, in the, low level of recall, in this region, system b is better. there's a higher precision. but in high recall region, system a is better. now, so, that also means, it depends on whether the user cares about the high recall, or low recall, but high precision. you can imagine, if someone is just going to check out, what's happening today, and want to find out something relevant in the news. well, which one is better? what do you think? in this case, clearly, system b is better, because the user is unlikely examining a lot of results. the user doesn't care about high recall. on the other hand, if you think about a case, where a user is doing you are, starting a problem. you want to find, whether your idea ha, has been started before. in that case, you emphasize high recall. so, you want to see, as many relevant documents as possible. therefore, you might, favor, system a. so, that means, which one is better? that actually depends on users, and more precisely, users task. so, this means, you may not necessarily be able to come up with one number, that would accurately depict the performance. you have to look at the overall picture. yet, as i said, when you have a practical decision to make, whether you replace ours with another, then you may have to actually come up with a single number, to quantify each, method. or, when we compare many different methods in research, ideally, we have one number to compare, them with, so, that we can easily make a lot of comparisons. so, for all these reasons, it is desirable to have one, single number to match it up. so, how do we do that? and, that, needs a number to summarize the range. so, here again it's the precision-recall curve, right? and, one way to summarize this whole ranked, list, for this whole curve, is look at the area underneath the curve. right? so, this is one way to measure that. there are other ways to measure that, but, it just turns out that,, this particular way of matching it has been very, popular, and has been used, since a long time ago for text and, this is, basically, in this way, and it's called the average precision. basically, we're going to take a, a look at the, every different, recall point. and then, look out for the precision. so, we know, you know, this is one precision. and, this is another, with, different recall. now, this, we don't count to this one, because the recall level is the same, and we're going to, look at the, this number, and that's precision at a different recall level et cetera. so, we have all these, you know, added up. these are the precisions at the different points, corresponding to retrieving the first relevant document, the second, and then, the third, that follows, et cetera. now, we missed the many relevant documents, so, in all of those cases, we just, assume, that they have zero precisions. and then, finally, we take the average. so, we divide it by ten, and which is the total number of relevant documents in the collection. note that here, we're not dividing this sum by four. which is a number retrieved relevant documents. now, imagine, if i divide by four, what would happen? now, think about this, for a moment. it's a common mistake that people, sometimes, overlook. right, so, if we, we divide this by four, it's actually not very good. in fact, that you are favoring a system, that would retrieve very few random documents, as in that case, the denominator would be very small. so, this would be, not a good matching. so, note that this denomina, denominator is ten, the total number of relevant documents. and, this will basically ,compute the area, and the needs occur. and, this is the standard method, used for evaluating a ranked list. note that, it actually combines recall and, precision. but first, you know, we have precision numbers here, but secondly, we also consider recall, because if missed many, there would be many zeros here. all right, so, it combines precision and recall. and furthermore, you can see this measure is sensitive to a small change of a position of a relevant document. let's say, if i move this relevant document up a little bit, now, it would increase this means, this average precision. whereas, if i move any relevant document, down, let's say, i move this relevant document down, then it would decrease, uh,the average precision. so, this is a very good, because it's a very sensitive to the ranking of every relevant document. it can tell, small differences between two ranked lists. and, that is what we want, sometimes one algorithm only works slightly better than another. and, we want to see this difference. in contrast, if we look at the precision at the ten documents. if we look at this, this whole set, well, what, what's the precision, what do you think? well, it's easy to see, that's a four out of ten, right? so, that precision is very meaningful, because it tells us, what user would see? so, that's pretty useful, right? so, it's a meaningful measure, from a users perspective. but, if we use this measure to compare systems, it wouldn't be good, because it wouldn't be sensitive to where these four relevant documents are ranked. if i move them around the precision at ten, still, the same. right. so, this is not a good measure for comparing different algorithms. in contrast, the average precision is a much better measure. it can tell the difference of, different, a difference in ranked list in, subtle ways. [music",03_lesson-3-3-evaluation-of-tr-systems-evaluating-ranked-lists-part-1
3,https://www.coursera.org/learn/text-retrieval,04_lesson-3-4-evaluation-of-tr-systems-evaluating-ranked-lists-part-2.en.txt,text-retrieval/04_week-3/02_week-3-lessons/04_lesson-3-4-evaluation-of-tr-systems-evaluating-ranked-lists-part-2.en.txt,"[sound] so average precision is computer for just one. one query. but we generally experiment with many different queries and this is to avoid the variance across queries. depending on the queries you use you might make different conclusions. right, so it's better then using more queries. if you use more queries then, you will also have to take the average of the average precision over all these queries. so how can we do that? well, you can naturally. think of just doing arithmetic mean as we always tend to, to think in, in this way. so, this would give us what's called a ""mean average position"", or map. in this case, we take arithmetic mean of all the average precisions over several queries or topics. but as i just mentioned in another lecture, is this good? we call that. we talked about the different ways of combining precision and recall. and we conclude that the arithmetic mean is not as good as the map measure. but here it's the same. we can also think about the alternative ways of aggregating the numbers. don't just automatically assume that, though. let's just also take the arithmetic mean of the average position over these queries. let's think about what's the best way of aggregating them. if you think about the different ways, naturally you will, probably be able to think about another way, which is geometric mean. and we call this kind of average a gmap. this is another way. so now, once you think about the two different ways. of doing the same thing. the natural question to ask is, which one is better? so. so, do you use map or gmap? again, that's important question. imagine you are again testing a new algorithm in, by comparing the ways your old algorithms made the search engine. now you tested multiple topics. now you've got the average precision for these topics. now you are thinking of looking at the overall performance. you have to take the average. but which, which strategy would you use? now first, you should also think about the question, well did it make a difference? can you think of scenarios where using one of them would make a difference? that is they would give different rankings of those methods. and that also means depending on the way you average or detect the. average of these average positions. you will get different conclusions. this makes the question becoming even more important. right? so, which one would you use? well again, if you look at the difference between these. different ways of aggregating the average position. you'll realize in arithmetic mean, the sum is dominating by large values. so what does large value here mean? it means the query is relatively easy. you can have a high pres, average position. whereas gmap tends to be affected more by low values. and those are the queries that don't have good performance. the average precision is low. so if you think about the, improving the search engine for those difficult queries, then gmap would be preferred, right? on the other hand, if you just want to. have improved a lot. over all the kinds of queries or particular popular queries that might be easy and you want to make the perfect and maybe map would be then preferred. so again, the answer depends on your users, your users tasks and their pref, their preferences. so the point that here is to think about the multiple ways to solve the same problem, and then compare them, and think carefully about the differences. and which one makes more sense. often, when one of them might make sense in one situation and another might make more sense in a different situation. so it's important to pick out under what situations one is preferred. as a special case of the mean average position, we can also think about the case where there was precisely one rank in the document. and this happens often, for example, in what's called a known item search. where you know a target page, let's say you have to find amazon, homepage. you have one relevant document there, and you hope to find it. that's call a ""known item search"". in that case, there's precisely one relevant document. or in another application, like a question and answering, maybe there's only one answer. are there. so if you rank the answers, then your goal is to rank that one particular answer on top, right? so in this case, you can easily verify the average position, will basically boil down to reciprocal rank. that is, 1 over r where r is the rank position of that single relevant document. so if that document is ranked on the very top or is 1, and then it's 1 for reciprocal rank. if it's ranked at the, the second, then it's 1 over 2. et cetera. and then we can also take a, a average of all these average precision or reciprocal rank over a set of topics, and that would give us something called a mean reciprocal rank. it's a very popular measure. for no item search or, you know, an problem where you have just one relevant item. now again here, you can see this r actually is meaningful here. and this r is basically indicating how much effort a user would have to make in order to find that relevant document. if it's ranked on the top it's low effort that you have to make, or little effort. but if it's ranked at 100 then you actually have to, read presumably 100 documents in order to find it. so, in this sense r is also a meaningful measure and the reciprocal rank will take the reciprocal of r, instead of using r directly. so my natural question here is why not simply using r? i imagine if you were to design a ratio to, measure the performance of a random system, when there is only one relevant item. you might have thought about using r directly as the measure. after all, that measures the user's effort, right? but, think about if you take a average of this over a large number of topics. again it would make a difference. right, for one single topic, using r or using 1 over r wouldn't make any difference. it's the same. larger r with corresponds to a small 1 over r, right? but the difference would only show when, show up when you have many topics. so again, think about the average of mean reciprocal rank versus average of just r. what's the difference? do you see any difference? and would, would this difference change the oath of systems. in our conclusion. and this, it turns out that, there is actually a big difference, and if you think about it, if you want to think about it and then, yourself, then pause the video. basically, the difference is, if you take some of our directory, then. again it will be dominated by large values of r. so what are those values? those are basically large values that indicate that lower ranked results. that means the relevant items rank very low down on the list. and the sum that's also the average that would then be dominated by. where those relevant documents are ranked in, in ,in, in the lower portion of the ranked. but from a users perspective we care more about the highly ranked documents. so by taking this transformation by using reciprocal rank. here we emphasize more on the difference on the top. you know, think about the difference between 1 and the 2, it would make a big difference, in 1 over r, but think about the 100, and 1, and where and when won't make much difference if you use this. but if you use this there will be a big difference in 100 and let's say 1,000, right. so this is not the desirable. on the other hand, a 1 and 2 won't make much difference. so this is yet another case where there may be multiple choices of doing the same thing and then you need to figure out which one makes more sense. so to summarize, we showed that the precision-recall curve. can characterize the overall accuracy of a ranked list. and we emphasized that the actual utility of a ranked list depends on how many top ranked results a user would actually examine. some users will examine more. than others. an average person uses a standard measure for comparing two ranking methods. it combines precision and recall and it's sensitive to the rank of every random document. [music",04_lesson-3-4-evaluation-of-tr-systems-evaluating-ranked-lists-part-2
4,https://www.coursera.org/learn/text-retrieval,02_lesson-3-2-evaluation-of-tr-systems-basic-measures.en.txt,text-retrieval/04_week-3/02_week-3-lessons/02_lesson-3-2-evaluation-of-tr-systems-basic-measures.en.txt,"[sound] this lecture is about the basic measures for evaluation of text retrieval systems. in this lecture, we're going to discuss how we design basic measures to quantitatively compare two retrieval systems. this is a slide that you have seen earlier in the lecture where we talked about the granville evaluation methodology. we can have a test faction that consists of queries, documents, and [inaudible]. we can then run two systems on these data sets to contradict the evaluator. their performance. and we raise the question, about which set of results is better. is system a better or is system b better? so let's now talk about how to accurately quantify their performance. suppose we have a total of 10 relevant documents in the collection for this query. now, the relevant judgments show on the right in [inaudible] obviously. and we have only seen 3 [inaudible] there, [inaudible] documents there. but, we can imagine there are other random documents in judging for this query. so now, intuitively, we thought that system a is better because it did not have much noise. and in particular we have seen that among the three results, two of them are relevant but in system b, we have five results and only three of them are relevant. so intuitively it looks like system a is more accurate. and this infusion can be captured by a matching holder position, where we simply compute to what extent all the retrieval results are relevant. if you have 100% position, that would mean that all the retrieval documents are relevant. so in this case system a has a position of two out of three system b has some sweet hold of 5 and this shows that system a is better frequency. but we also talked about system b might be prefered by some other units would like to retrieve as many random documents as possible. so in that case we'll have to compare the number of relevant documents that they retrieve and there's another method called recall. this method uses the completeness of coverage of random documents in your retrieval result. so we just assume that there are ten relevant documents in the collection. and here we've got two of them, in system a. so the recall is 2 out of 10. whereas system b has called a 3, so it's a 3 out of 10. now we can see by recall system b is better. and these two measures turn out to be the very basic of measures for evaluating search engine. and they are very important because they are also widely used in many other test evaluation problems. for example, if you look at the applications of machine learning, you tend to see precision recall numbers being reported and for all kinds of tasks. okay so, now let's define these two measures more precisely. and these measures are to evaluate a set of retrieved documents, so that means we are considering that approximation of the set of relevant documents. we can distinguish 4 cases depending on the situation of the documents. a document can be retrieved or not retrieved, right? because we are talking about a set of results. a document can be also relevant or not relevant depending on whether the user thinks this is a useful document. so we can now have counts of documents in. each of the four categories again have a represent the number of documents that have been retrieved and relevant. b for documents that are not retrieved but rather etc. no with this table then we can define precision. as the ratio of the relevant retrieved documents a to the total of relevant retrieved documents. so, this is just a divided by the sum of a and c. the sum of this column. singularly recall is defined by dividing a by the sum of a and b. so that's again to divide a by. the sum of the row instead of the column. all right, so we can see precision and recall is all focused on looking at the a, that's the number of retrieved relevant documents. but we're going to use different denominators. okay, so what would be an ideal result. well, you can easily see being the ideal case would have precision and recall oil to be 1.0. that means we have got 1% of all the relevant documents in our results, and all of the results that we returned all relevant. at least there's no single not relevant document returned. in reality, however, high recall tends to be associated with low precision. and you can imagine why that's the case. as you go down the to try to get as many random documents as possible, you tend to encounter a lot of documents, so the precision has to go down. note that this set can also be defined by a cut off. in the rest of this, that's why although these two measures are defined for retrieve the documents, they are actually very useful for evaluating a rank list. they are the fundamental measures in task retrieval and many other tasks. we often are interested in the precision at ten documents for web search. this means we look at how many documents among the top ten results are actually relevant. now, this is a very meaningful measure, because it tells us how many relevant documents a user can expect to see on the first page of where they typically show ten results. so precision and recall are the basic matches and we need to use them to further evaluate a search engine, but they are the building blocks. we just said that there tends to be a trailoff between precision and recall, so naturally it would be interesting to combine them. and here's one method that's often used, called f-measure and it's a [inaudible] mean of precision and recall as defined on this slide. so, you can see at first, compute the. inverse of r and p here, and then it would interpret the 2 by using coefficients depending on parameter beta. and after some transformation you can easily see it would be of this form. and in any case it just becomes an agent of precision and recall, and beta is a parameter, that's often set to 1. it can control the emphasis on precision or recall always set beta to 1 we end up having a special case of f-measure, often called f1. this is a popular measure that's often used as a combined precision and recall. and the formula looks very simple. it's just this, here. now it's easy to see that if you have a larger precision, or larger recall than f measure would be high. but, what's interesting is that the trade off between precision and recall is captured an interesting way in f1. so, in order to understand that, we can first look at the natural why not just the combining and using the symbol arithmetically as efficient here? that would be likely the most natural way of combining them so what do you think? if you want to think more, you can pause the video. so why is this not as good as f1? or what's the problem with this? now, if you think about the arithmetic mean, you can see this is the sum of multiple terms. in this case, it's the sum of precision and recall. in the case of a sum, the total value tends to be dominated by the large values. that means if you have a very high p or very high r then you really don't care about whether the other value is low so the whole sum would be high. now this is not desirable because one can easily have a perfect recall. we have perfect recall easily. can we imagine how? it's probably very easy to imagine that we simply retrieve all the documents in the collection and then we have a perfect recall. and this will give us 0.5 as the average. but such results are clearly not very useful for the users even though the average using this formula would be relevantly high. in contrast you can see f 1 would reward a case where precision and recall are roughly that seminar, so it would a case where you had extremely high value for one of them. so this means f one encodes a different trade off between that. now this example shows actually a very important. methodology here. but when you try to solve a problem you might naturally think of one solution, let's say in this it's this error mechanism. but it's important not to settle on this source. it's important to think whether you have other ways to combine that. and once you think about the multiple variance it's important to analyze their difference, and then think about which one makes more sense. in this case, if you think more carefully, you will think that f1 probably makes more sense. than the simple. although in other cases there may be different results. but in this case the seems not reasonable. but if you don't pay attention to these subtle differences you might just take a easy way to combine them and then go ahead with it. and here later, you will find that, the measure doesn't seem to work well. all right. so this methodology is actually very important in general, in solving problems. try to think about the best solution. try to understand the problem very well, and then know why you needed this measure, and why you need to combine precision and recall. and then use that to guide you in finding a good way to solve the problem. to summarize, we talked about precision which addresses the question are there retrievable results all relevant? we also talk about the recall. which addresses the question, have all of the relevant documents been retrieved. these two, are the two, basic matches in text and retrieval in. they are used for many other tasks, as well. we talk about f measure as a way to combine precision precision and recall. we also talked about the tradeoff between precision and recall. and this turns out to depend on the user's search tasks and we'll discuss this point more in a later lecture. [music",02_lesson-3-2-evaluation-of-tr-systems-basic-measures
5,https://www.coursera.org/learn/text-retrieval,06_lesson-3-6-evaluation-of-tr-systems-practical-issues.en.txt,text-retrieval/04_week-3/02_week-3-lessons/06_lesson-3-6-evaluation-of-tr-systems-practical-issues.en.txt,"[sound]. this lecture is about some practical issues that you would have to address in evaluation of text retrieval systems. in this lecture, we will continue the discussion of evaluation. we'll cover some practical issues that you have to solve in actual evaluation of text retrieval systems. so, in order to create the test collection, we have to create a set of queries. a set of documents and a set of relevance judgments. it turns out that each is actually challenging to create. first, the documents and queries must be representative. they must represent the real queries and real documents that the users handle. and we also have to use many queries and many documents in order to avoid a bias of conclusions. for the matching of relevant documents with the queries. we also need to ensure that there exists a lot of relevant documents for each query. if a query has only one, that's a relevant option we can actually then. it's not very informative to compare different methods using such a query because there's not that much room for us to see difference. so ideally, there should be more relevant documents in the clatch but yet the queries also should represent the real queries that we care about. in terms of relevance judgments, the challenge is to ensure complete judgments of all the documents for all the queries. yet, minimizing human and fault, because we have to use human labor to label these documents. it's very labor intensive. and as a result, it's impossible to actually label all the documents for all the queries, especially considering a giant data set like the web. so this is actually a major challenge, it's a very difficult challenge. for measures, it's also challenging, because we want measures that would accurately reflect the perceived utility of users. we have to consider carefully what the users care about. and then design measures to measure that. if your measure is not measuring the right thing, then your conclusion would be misled. so it's very important. so we're going to talk about a couple of issues here. one is the statistical significance test. and this also is a reason why we have to use a lot of queries. and the question here is how sure can you be that observe the difference doesn't simply result from the particular queries you choose. so here are some sample results of average position for system a and system b into different experiments. and you can see in the bottom, we have mean average of position. so the mean, if you look at the mean average of position, the mean average of positions are exactly the same in both experiments, right? so you can see this is 0.20, this is 0.40 for system b. and again here it's also 0.20 and 0.40, so they are identical. yet, if you look at these exact average positions for different queries. if you look at these numbers in detail, you would realize that in one case, you would feel that you can trust the conclusion here given by the average. in the another case, in the other case, you will feel that, well, i'm not sure. so, why don't you take a look at all these numbers for a moment, pause the media. so, if you look at the average, the mean average of position, we can easily, say that well, system b is better, right? so, after all it's 0.40 and this is twice as much as 0.20, so that's a better performance. but if you look at these two experiments, look at the detailed results. you will see that, we've been more confident to say that, in the case one, in experiment one. in this case. because these numbers seem to be consistently better for system b. whereas in experiment 2, we're not sure because looking at some results like this, after system a is better and this is another case system a is better. but yet if we look at only average, system b is better. so, what do you think? how reliable is our conclusion, if we only look at the average? now in this case, intuitively, we feel experiment 1 is more reliable. but how can we quantitate the answer to this question? and this is why we need to do statistical significance test. so, the idea of the statistical significance test is basically to assess the variants across these different queries. if there is a big variance, that means the results could fluctuate a lot according to different queries. then we should believe that, unless you have used a lot of queries, the results might change if we use another set of queries. right, so this is then not so if you have c high variance then it's not very reliable. so let's look at these results again in the second case. so, here we show two different ways to compare them. one is a sign test where we just look at the sign. if system b is better than system a, we have a plus sign. when system a is better we have a minus sign, etc. using this case, if you see this, well, there are seven cases. we actually have four cases where system b is better. but three cases of system a is better, intuitively, this is almost like a random results, right? so if you just take a random sample of you flip seven coins and if you use plus to denote the head and minus to denote the tail and that could easily be the results of just randomly flipping these seven coins. so, the fact that the average is larger doesn't tell us anything. we can't reliably conclude that. and this can be quantitatively measured by a p value. and that basically means the probability that this result is in fact from a random fluctuation. in this case, probability is 1.0. it means it surely is a random fluctuation. now in willcoxan test, it's a non-parametric test, and we would be not only looking at the signs, we'll be also looking at the magnitude of the difference. but we can draw a similar conclusion, where you say it's very likely to be from random. to illustrate this, let's think about that such a distribution. and this is called a now distribution. we assume that the mean is zero here. lets say we started with assumption that there's no difference between the two systems. but we assume that because of random fluctuations depending on the queries, we might observe a difference. so the actual difference might be on the left side here or on the right side here, right? so, and this curve kind of shows the probability that we will actually observe values that are deviating from zero here. now, so if we look at this picture then, we see that if a difference is observed here, then the chance is very high that this is in fact a random observation, right? we can define a region of likely observation because of random fluctuation and this is that 95% of all the outcomes. and in this then the observed may still be from random fluctuation. but if you observe a value in this region or a difference on this side, then the difference is unlikely from random fluctuation. all right, so there's a very small probability that you are observe such a difference just because of random fluctuation. so in that case, we can then conclude the difference must be real. so system b is indeed better. so this is the idea of statical significance test. the takeaway message here is that you have to use many queries to avoid jumping into a conclusion. as in this case, to say system b is better. there are many different ways of doing this statistical significance test. so now, let's talk about the other problem of making judgments and, as we said earlier, it's very hard to judge all the documents completely unless it's a very small data set. so the question is, if we can afford judging all the documents in the collection, which is subset should we judge? and the solution here is pooling. and this is a strategy that has been used in many cases to solve this problem. so the idea of pooling is the following. we would first choose a diverse set of ranking methods. these are text retrieval systems. and we hope these methods can help us nominate like the relevant documents. so the goal is to pick out the relevant documents. we want to make judgements on relevant documents because those are the most useful documents from users perspectives. so then we're going to have each to return top-k documents. the k can vary from systems. but the point is to ask them to suggest the most likely relevant documents. and then we simply combine all these top-k sets to form a pool of documents for human assessors. to judge, so imagine you have many systems each were ten k documents. we take the top-k documents, and we form a union. now, of course, there are many documents that are duplicated because many systems might have retrieved the same random documents. so there will be some duplicate documents. and there are also unique documents that are only returned by one system. so the idea of having diverse set of ranking methods is to ensure the pool is broad. and can include as many possible relevant documents as possible. and then, the users would, human assessors would make complete the judgments on this data set, this pool. and the other unjudged the documents are usually just assumed to be non relevant. now if the pool is large enough, this assumption is okay. but if the pool is not very large, this actually has to be reconsidered. and we might use other strategies to deal with them and there are indeed other methods to handle such cases. and such a strategy is generally okay for comparing systems that contribute to the pool. that means if you participate in contributing to the pool, then it's unlikely that it would penalize your system because the problematic documents have all been judged. however, this is problematic for evaluating a new system that may have not contributed to the pool. in this case, a new system might be penalized because it might have nominated some read only documents that have not been judged. so those documents might be assumed to be non relevant. that's unfair. so to summarize the whole part of textual evaluation, it's extremely important. because the problem is the empirically defined problem, if we don't rely on users, there's no way to tell whether one method works better. if we have in the property experiment design, we might misguide our research or applications. and we might just draw wrong conclusions. and we have seen this is in some of our discussions. so make sure to get it right for your research or application. the main methodology is the cranfield evaluation methodology. and they are the main paradigm used in all kinds of empirical evaluation tasks, not just a search engine variation. map and ndcg are the two main measures that you should definitely know about and they are appropriate for comparing ranking algorithms. you will see them often in research papers. precision at 10 documents is easier to interpret from user's perspective. so that's also often useful. what's not covered is some other evaluation strategy like a-b test. where the system would mix two, the results of two methods, randomly. and then would show the mixed results to users. of course, the users don't see which result, from which method. the users would judge those results or click on those documents in a search engine application. in this case then, the search engine can check or click the documents and see if one method has contributed more through the click the documents. if the user tends to click on one, the results from one method, then it suggests that message may be better. so this is what leverages the real users of a search engine to do evaluation. it's called a-b test and it's a strategy that is often used by the modern search engines or commercial search engines. another way to evaluate ir or textual retrieval is user studies and we haven't covered that. i've put some references here that you can look at if you want to know more about that. so, there are three additional readings here. these are three mini books about evaluation and they are all excellent in covering a broad review of information retrieval evaluation. and it covers some of the things that we discussed, but they also have a lot of others to offer. [music",06_lesson-3-6-evaluation-of-tr-systems-practical-issues
6,https://www.coursera.org/learn/text-retrieval,05_lesson-5-5-web-indexing.en.txt,text-retrieval/06_week-5/02_week-5-lessons/05_lesson-5-5-web-indexing.en.txt,"[sound] this lecture is about the web indexing. in this lecture, we will continue talking about the web search and we're going to talk about how to create a web scale index. so once we crawl the web, we've got a lot of web pages. the next step is to use the indexer to create the inverted index. in general, we can use the same information retrieval techniques for creating an index and that is what we talked about in previous lectures, but there are there are new challenges that we have to solve. for web scale indexing, and the two main challenges are scalability and efficiency. the index would be so large, that it cannot actually fit into any single machine or single disk. so we have to store the data on virtual machines. also, because the data is so large, it's beneficial to process the data in parallel, so that we can produce index quickly. now to address these challenges, google has made a number of innovations. one is the google file system that's a general file system, that can help programmers manage files stored on a cluster of machines. the second is mapreduce. this is a general software framework for supporting parallel computation. hadoop is the most well known open source implementation of mapreduce. now used in many applications. so, this is the architecture of the google file system. it uses a very simple centralized management mechanism to manage all the specific locations of. files, so it maintains the file namespace and look up a table to know where exactly each file is stored. the application client will then talk to this gfs master, and that obtains specific locations of the files they want to process. and once the gfs file kind obtained the specific location about the files, then the application client can talk to the specific servers whether data actually sits directly, so you can avoid involving other node. in the network. so when this file system stores the files on machines, the system also with great fixed sizes of chunks, so the data files are separated into. many chunks. each chunk is 64 mb, so it's pretty big. and that's appropriate for large data processing. these chunks are replicated to ensure reliability. so this is something that the programmer doesn't have to worry about, and it's all taken care of by this file system. so from the application perspective, the programmer would see this as if it's a normal file. and the programmer doesn't have to know where exactly it is stored and can just invoke high level. operators to process the file. and another feature is that the data transfer is directly between application and chunk servers. so it's efficient in this sense. on top of the google file system, google also proposed mapreduce as a general framework for parallel programming. now, this is very useful to support a task like building inverted index. and so, this framework is, hiding a lot of low-level features from the program. as a result, the programmer can make a minimum effort to create an application that can be run a large cluster in parallel. so some of the low level details are hidden in the framework including the specific and network communications or load balancing or where the task are executed. all these details are hidden from the programmer. there is also a nice feature which is the built in fault tolerance. if one server is broken, the server is down, and then some tasks may not be finished. then the mapreduce mapper will know that the task has not been done. so it automatically dispatches a task on other servers that can do the job. and therefore, again the program doesn't have to worry about that so here's how mapreduce works. the input data would be separated into a number of key value pairs. now what exactly is in the value would depend on the data and it's actually a fairly general framework to allow you to just partition the data into different parts and each part can be then processed in parallel. each key value pair would be and send it to a map function. the program was right the map function, of course. and then the map function will process this key value pair and then generate a number of other key value pairs. of course, the new key is usually different from the old key that's given to the map as input. and these key value pairs are the output of the map function and all the outputs of all the map functions would be then collected, and then there will be for the sorting based on the key. and the result is that, all the values that are associated with the same key will be then grouped together. so now we've got a pair of of a key and separate values attached to this key. so this would then be sent to a reduce function. now, of course, each reduce function will handle a different key, so we will send these output values to multiple reduce functions each handling a unique key. a reduce function would then process the input, which is a key in a set of values to produce another set of key values as the output. so these output values would be then corrected together to form the final output. and so, this is the general framework of mapreduce. now the programmer only needs to write the map function and the reduce function. everything else is actually taken care of by the mapreduce framework. so you can see the program really only needs to do minimum work. and with such a framework, the input data can be partitioned into multiple parts, which is processing parallel first by map, and then being the process after we reach the reduced stage. the much more reduced if i'm [inaudible] can also further process the different keys and their associated values in parallel. so it achieves some, it achieves the purpose of parallel processing of a large data set. so let's take a look at a simple example. and that's word counting. the input is containing words, and the output that we want to generate is the number of occurrences of each word. so it's the word count. we know this kind of counting would be useful to, for example, assess the popularity of a word in a large collection and this is useful for achieving a factor of idf wading for search. so how can we solve this problem? well, one natural thought is that, well this task can be done in parallel by simply counting different parts of the file in parallel, and then in the end we just combine all the counts. and that's precisely the idea of what we can do with mapreduce. we can parallelize on lines in this input file. so more specifically, we can assume the input to each map function is a key value pair that represents the line number and the string on that line. so the first line, for example, has a key of one and that is another word by word and just the four words on that line. so this key value pair would be sent to a map function. the map function then would just count the words in this line. and in this case, of course there are only four words. each world gets a count of one and these are the output that you see here on this slide from this map function. so the map function is really very simple if you look at what the pseudocode looks like on the right side, you see it simply needs to iterate all the words and this line. and then just collect the function which means it would then send the word and the count to the collector. the collector would then try to sort all these key value pairs from different map functions, right? so the function is very simple and the programmer specifies this function as a way to process each part of the data. of course, the second line will be handled by a different map function which we will produce a single output. okay, now the output from the map functions will be then and send it to a collector and the collector would do the internal grouping or sorting. so at this stage, you can see, we have collected a match for pairs. each pair is a word and its count in a line. so, once we see all these pairs. then we can sort them based on the key, which is the word. so we will collect all the counts of a word, like bye here, together. and similarly, we do that for other words. like hadoop, hello, etc. so each word now is attached to a number of values, a number of counts. and these counts represent the occurrences to solve this word in different lights. so now we have got a new pair of a key and a set of values, and this pair will then be fed into reduce function, so the reduce function now would have to finish the job of counting the total occurrences of this word. now, it has all ready got all these puzzle accounts, so all it needs to do is simply to add them up. so the reduce function here is very simple, as well. you have a counter, and then iterate all the other words. that you'll see in this array. and that, you just accumulate accounts, right? and then finally, you output the p and the proto account. and that's precisely what we want as the output of this whole program. so you can see, this is all ready very similar to. to building an invert index. and if you think about it, the output here is index. and we have already got a dictionary, basically. we have got the count. but what's missing is the document the specific frequency counts of words in those documents. so we can modify this slightly to actually be able to index in parallel, so here's one way to do that. so in this case, we can assume the input from map function is a pair of a key which denotes the document id, and the value denoting the screen for that document, so it's all the words in that document. and so, the map function would do something very similar to what we have seen in the word campaign example. it simply groups all the counts of this word in this document together. and it would then generate a set of key value pairs. each key is a word, and the value is the count of this word in this document plus the document id. now, you can easily see why we need to add document id here, because later in inverted index, we would like to keep this formation, so the map function should keep track of it, and this can then be sent to the reduce function later. now similarly another document d2 can be processed in the same way. so in the end, again, there is a sorting mechanism that would group them together. and then we will have just a key, like a java, associated with all the documents that match this key. or all the documents where java occurred. and the counts, so the counts of java in those documents. and this will be collected together. and this will be, so fed into the reduce function. so now you can see the reduce function has already got input that looks like an inverted index entry. so it's just the word and all the documents that contain the word and the frequencies of the word in those documents. so all you need to do is simply to concatenate them into a continuous chunk of data. and this can be done written to a file system. so basically the reduce function is going to do very minimal. work. and so, this is a pseudo-code for [inaudible] that's construction. here we see two functions, procedure map and procedure reduce. and a programmer would specify these two functions to program on top of map reduce. and you can see basically they are doing what i just described. in the case of map, it's going to count the occurrences of a word using the associativearray. and it would output all the counts together with the document id here. so, this is the reduce function, on the other hand, simply concatenates all the input that it has been given, and then put them together as one single entry for this key. so this is a very simple mapreduce function, yet it would allow us to construct an inverted index at very large scale, and the data can be processed by different machines. and program doesn't have to take care of the details. so this is how we can do parallel index construction for web search. so to summarize, web scale indexing requires some new techniques that go beyond the. standard traditional indexing techniques. mainly, we have to store index on multiple machines. and this is usually done by using a filing system, like a google file system. but this should be through a file system. and secondly, it requires creating an index an parallel, because it's so large and takes long time to create an index for all the documents. so if we can do it in parallel, it will be much faster and this is done by using the mapreduce framework. note that both the gfs and mapreduce frameworks are very general, so they can also support many other applications. [music",05_lesson-5-5-web-indexing
7,https://www.coursera.org/learn/text-retrieval,08_lesson-5-8-link-analysis-part-3.en.txt,text-retrieval/06_week-5/02_week-5-lessons/08_lesson-5-8-link-analysis-part-3.en.txt,"[sound] so we talked about pagerank as a way to capture the assault. now, we also looked at some other examples where a hub might be interesting. so there is another algorithm called hits, and that going to compute the scores for authorities and hubs. the intuitions are pages that are widely cited are good authorities and whereas pages that cite many other pages are good hubs. i think that the most interesting idea of this algorithm hits, is it's going to use a reinforcement mechanism to kind of help improve the scoring for hubs and the authorities. and so here's the idea, it was assumed that good authorities are cited by good hubs. that means if you are cited by many pages with good hub scores then that inquiry says, you're an authority. and similarly, good hubs are those that point at good authorities. so if you pointed to a lot of good authority pages, then your hubs score would be increased. so then you will have literally reinforced each other, because you have pointed so some good hubs. and so you have pointed to some good authorities to get a good hubs score, whereas those authority scores would be also improved because they are pointing to by a good hub. and this is algorithms is also general it can have many applications in graph and network analysis. so just briefly, here's how it works. we first also construct a matrix, but this time we're going to construct an adjacent matrix and we're not going to normalize the values. so if there's a link there's a 1, if there's no link that's 0. again, it's the same graph. and then we're going to define the hubs score of page as the sum of the authority scores of all the pages that it appoints to. so whether you are hub, really depends on whether you are pointing to a lot of good authority pages. that's what it says in the first equation. in the second equation, we define the authorities of a page as a sum of the hub scores of all those pages that appoint to you. so whether you are good authority would depend on whether those pages that are pointing to you are good hubs. so you can see this forms iterative reinforcement mechanism. now, these three questions can be also written in the metrics format. so what we get here is then the hub vector is equal to the product of the adjacency matrix and the authority vector, and this is basically the first equation. and similarly, the second equation can be returned as the authority vector is equal to the product of a transpose multiplied by the hub vector. now, these are just different ways of expressing these equations. but what's interesting is that if you look at the matrix form, you can also plug in the authority equation into the first one. so if you do that, you have actually eliminated the authority vector completely and you get the equations of only hubs scores. the hubs score vector is equal to a multiplied by a transpose multiplied by the hub score again. similarly, we can do a transformation to have equation for just the authorities also. so although we frame the problem as computing hubs and authorities, we can actually eliminate one of them to obtain equation just for one of them. now, the difference between this and page random is that now the matrix is actually a multiplication of the adjacency matrix and it's transpose. so this is different from page rank. but mathematically, then we will be computing the same problem. so in hits, we typically would initialize the values. let's say, 1 for all these values, and then we would iteratively apply these equations, essentially. and this is equivalent to multiply that by the metrics a and a transpose. so the arrows of these is exactly the same in the pagerank. but here because the adjacency matrix is not normalized. so what we have to do is after each iteration we're going to normalize, and this would allow us to control the growth of value. otherwise they would grow larger and larger. and if we do that, and that will basically get hits. that was the computer, the hubs scores, and authority scores for all the pages. and these scores can then be used in branching just like the pagerank scores. so to summarize in this lecture, we have seen that link information's very useful. in particular, the anchor text is very useful to increase the text representation of a page. and we also talk about the pagerank and page anchor as two major link analysis algorithms. both can generate scores for web pages that can be used in the ranking function. note that pagerank and the hits are also very general algorithms. so they have many applications in analyzing other graphs or networks. [music",08_lesson-5-8-link-analysis-part-3
8,https://www.coursera.org/learn/text-retrieval,07_lesson-5-7-link-analysis-part-2.en.txt,text-retrieval/06_week-5/02_week-5-lessons/07_lesson-5-7-link-analysis-part-2.en.txt,"[music] so let's take a look at this in detail. so in this random surfing model at any page would assume random surfer would choose the next page to visit. so this is a small graph here. that's of course, over simplification of the complicated web. but let's say there are four documents here, d1, d2, d3 and d4. and let's assume that a random surfer or random walker can be any of these pages. and then the random surfer could decide to, just randomly jumping to any page or follow a link and then visit the next page. so if the random surfer is at d1, then there is some probability that random surfer will follow the links. now there are two outlinks here, one is pointing to d3, the other is pointing to d4. so the random surfer could pick any of these two to reach d3 and d4. but it also assumes that the random so far might get bore sometimes. so the random surfing which decide to ignore the actual links and simply randomly jump into any page in the web. so if it does that, it would be able to reach any of the other pages even though there's no link you actually, you want from that page. so this is to assume that random surfing model. imagine a random surfer is really doing surfing like this, then we can ask the question how likely on average the surfer would actually reach a particular page like a d1, a d2, or a d3. that's the average probability of visiting a particular page and this probability is precisely what a page ranker computes. so the page rank score of the document is the average probability that the surfer visits a particular page. now intuitively, this would basically capture the inlink account, why? because if a page has a lot of inlinks, then it would have a higher chance of being visited. because there will be more opportunities of having the server to follow a link to come to this page. and this is why the random surfing model actually captures the id of counting the inlinks. note that it also considers the interacting links, why? because if the page is that point then you have themselves a lot of inlinks. that would mean the random surfer would very likely reach one of them and therefore, it increase the chance of visiting you. so this is just a nice way to capture both indirect and a direct links. so mathematically, how can we compute this problem in a day in order to see that, we need to take a look at how this problem there is a computing. so first of all let's take a look at the transition metrics here. and this is just metrics with values indicating how likely the random surfer would go from one page to another. so each rule stands for a starting page. for example, rule one would indicate the probability of going to any of the other four pages from d1. and here we see there are only 2 non 0 entries which is 1/2. so this is because if you look at the graph d1 is pointing to d3 and d4. there is no link from d1 or d2. so we've got 0s for the first 2 columns and 0.5 for d3 and d4. in general, the m in this matrix, m sub ij is the probability of going from di to dj. and obviously for each rule, the values should sum to 1, because the surfer would have to go to precisely one of these other pages. so this is a transition metric. now how can we compute the probability of a surfer visiting a page? well if you look at the surf model then basically, we can compute the probability of reaching a page as follows. so here on the left hand side, you see it's the probability visiting page dj at time plus 1, so it's the next time point. on the right hand side, you can see the equation involves the probability of at page di at time t. so you can see the subscript in that t here, and that indicates that's the probability that the server was at a document at time t. so the equation basically, captures the two possibilities of reaching at dj at the time t plus 1. what are these two possibilities? well one is through random surfing and one is through following a link, as we just explained. so the first part captures the probability that the random surfer would reach this page by following a link. and you can see the random surfer chooses this strategy with probability 1 minus alpha as we assume. and so there is a factor of 1 minus alpha here. but the main party is realist sum over all the possible pages that the surfer could have been at time t. there are n pages so it's a sum over all possible n pages. inside the sum is a product of two probabilities. one is the probability that the surfer was at di at time t, that's p sub t of di. the other is the transition probability from di to dj. and so in order to reach this dj page, the surfer must first be at di at time t. and then also, would also have to follow the link to go from di to dj. so the probability is the probability of being at di at time t multiplied by the probability of going from that page to the target page, dj here. the second part is a similar sum, the only difference is that now the transition probability is a uniform transition probability. 1 over n and this part of captures is the probability of reaching this page through random jumping. so the form is exactly the same and this also allows us to see on why pagerank is essentially assumed a smoothing of the transition matrix. if you think about this 1 over n as coming from another transition matrix that has all the elements being 1 over n in uniform matrix. then you can see very clearly essentially we can merge the two parts, because they are of the same form. we can imagine there's a different metrics that's combination of this m and that uniform metrics where every m is 1 over n. and in this sense pagerank uses this idea of smoothing and ensuring that there's no zero entry in such as transition matrix. now of course this is the time dependent the calculation of the probabilities. now we can imagine, if we'll compute the average of the probabilities, the average of probabilities probably with the sets of file this equation without considering the time index. so let's drop the time index and just assume that they will be equal. now this would give us any equations, because for each page we have such equation. and if you look at the what variables we have in these equations there are also precisely n variables. so this basically means, we now have a system of n equations with n variables and these are linear equations. so basically, now the problem boils down to solve this system of equations. and here, i also show the equations in the metric form. it's the vector p here equals a matrix or the transpose of the matrix here and multiplied by the vector again. now, if you still remember some knowledge that you've learned from linear algebra and then you will realize, this is precisely the equation for eigenvector. when multiply the metrics by this vector, you get the same value as this matter and this can be solved by using iterative algorithm. so because the equations here on the back are basically taken from the previous slide. so you'll see the relation between the page that ran sports on different pages. and this iterative approach or power approach, we simply start with s randomly initialized vector p. and then we repeatedly just update this p by multiplying the metrics here by this p factor. i also show a concrete example here. so you can see this now. if we assume alpha is 0.2, then with the example that we show here on the slide, we have the original transition matrix is here. that includes the graph, the actual links and we have this smoothing transition metrics, uniform transition metrics representing random jumping. and we can combine them together with a liner interpolation to form another metric that would be like this. so essentially, we can imagine now the web looks like this and can be captured like that. they're all virtual links between all the pages now. the page we're on now would just initialize the p vector first and then just computed the updating of this p vector by using this metrics multiplication. now if you rewrite this metric multiplication in terms of individual equations, you'll see this. and this is basically, the updating formula for this particular pages and page score. so you can also see if you want to compute the value of this updated score for d1. you basically multiply this rule by this column, and we'll take the third product of the two. and that will give us the value for this value. so this is how we updated the vector we started with an initial values for these guys for this. and then we just revise the scores which generate a new set of scores and the updating formula is this one. so we just repeatedly apply this and here it converges. and when the matrix is like this, where there's no 0 values and it can be guaranteed to converge. and at that point the we will just have the pagerank scores for all the pages. we typically go to sets of initial values just to 1 over n. so interestingly, this updating formula can be also interpreted as propagating scores on the graph, can you see why? or if you look at this formula and then compare that with this graph and can you imagine, how we might be able to interpret this as essentially propagating scores over the graph. i hope you will see that indeed, we can imagine we have values initialized on each of these pages. so we can have values here and say, that's a 1 over 4 for each. and then we're going to use these metrics to update this the scores. and if you look at the equation here this one, basically we're going to combine the scores of the pages that possibly would lead to reaching this page. so we'll look at all the pages that are pointing to this page and then combine this score and propagate the sum of the scores to this document, d1. to look at the scores that we present the probability that the random surfer would be visiting the other pages before it reached d1. and then just do the propagation to simulate the probability of reaching this page, d1. so there are two interpretations here. one is just the matrix multiplication. we repeat the multiplying that by these metrics. the other is to just think of it as a propagating these scores repeatedly on the web. so in practice, the combination of pagerank score is actually efficient. because the matrices is fast and there are some, ways we transform the equation. so that you avoid actually literally computing the values for all those elements. sometimes you may also normalize the equation and that will give you a somewhat different form of the equation, but then the ranking of pages will not change. the results of this potential problem of zero-outlink problem. in that case, if a page does not have any outlink then the probability of these pages would not sum to 1. basically, the probability of reaching the next page from this page would not sum to 1, mainly because we have lost some probability to mass. one would assume there's some probability that the surfer would try to follow the links, but then there is no link to follow. and one possible solution is simply to use a page that is specific damping factor, and that could easily fix this. basically, that's to say alpha would be 1.0 for a page with no outlink. in that case, the surfer would just have to randomly jump to another page instead of trying to follow a link. there are many extensions of pagerank, one extension is to topic-specific pagerank. note that pagerank doesn't merely use the query information. so we can make pagerank specific however. so for example, at the top of a specific page you rank, we can simply assume when the surfer is bored. the surfer is not randomly jumping to any page on the web. instead, he's going to jump to only those pages that are relevant to our query. for example, if the query is not sports then we can assume that when it's doing random jumping, it's going to randomly jump to a sports page. by doing this, then we can buy a pagerank through topic and sports. and then if you know the current theory is about sports, and then you can use this specialized pagerank score to rank documents. that would be better than if you use the generic pagerank score. pagerank is also a channel that can be used in many other applications for network analysis particularly for example, social networks. you can imagine if you compute the pagerank scores for social network, where a link might indicate a friendship or a relation, you would get some meaningful scores for people [music",07_lesson-5-7-link-analysis-part-2
9,https://www.coursera.org/learn/text-retrieval,06_lesson-5-6-link-analysis-part-1.en.txt,text-retrieval/06_week-5/02_week-5-lessons/06_lesson-5-6-link-analysis-part-1.en.txt,"[sound] this lecture is about link analysis for web search. in this lecture, we're going to talk about the web search and particularly, focusing on how to do link analysis and use the results to improve search. the main topic of this lecture is to look at the ranking algorithms for web search. in the previous lecture we talked about how to create index. now that we have index, we want to see how we can improve ranking of pages. the web. now standard ir models, can be also applied here. in fact, they are important building blocks, for, improve, for supporting web search. but they aren't sufficient. and mainly for the following reasons. first, on the web, we tend to have very different information needs, for example, people might search for a webpage, or an entry page. and this is different from the traditional library search, where people are primarily interested in collecting literature information. so this kind of query is often called a navigational queries. the purpose is to navigate into a particular type of the page. so for such queries we might benefit from using link information. secondly, documents have additional information and on the web pages, are web format, there are a lot of other clues, such as the layout, the title, or link information again. so this has provided opportunity to use extra context information of the document to improve the scoring. and finally, information quality varies a lot. that means we have to consider many factors to improve the range in the algorithm. this would give us a more robust way to rank pages, making it harder for any spammer to just manipulate the one signal to improve the ranking of a page. so as a result, people have made a number of major extensions to the ranking algorithms. one line is to exploit links to improve scoring. and that's the main topic of this lecture. people have also proposed algorithms to exploit the loudest, they are implicit. feedback information the form of click throughs and that's of course in the category of feedback techniques and machine all is often used there. in general in web search the ranking algorithms are based on machine learning algorithms to combine all kinds of features. many of them are based on the standard of virtual models such as bm25 that we talked about [inaudible] to score different parts of documents or to provide additional features based on content matching, but link information is also very useful so they provide additional scoring signals. so let's look at links in more detail on the web. so this is a snapshot of some part of the web, let's say. so we can see there are many links that link the different pages together. and in this case, you can also look at the center here, there is a description of a link that's pointing to the document on the right side. now, this description text is called anchor text. now if you think about this text, it's actually quite useful because it provides some extra description of that page be points with. so for example, if someone wants to bookmark amazon.com front page the person might say the biggest online bookstore and then the link to amazon, right? so, the description here after is very similar to what the user would type in the query box when they are looking for or such a page. and that's why it's very useful for managing pages. suppose someone types in the query like online bookstore or biggest online bookstore. all right the query would match this anchor text in the page here. and then this actually provides evidence for matching the page that's being pointed to that is the amazon. a entry page. so if you match anchor text that describes an anchor to a page, actually that provides good evidence for the elements of the page being pointed to. so anchor text is very useful. if you look at the bottom part of this picture you can also see there are some patterns of some links and these links might indicate the utility of a document. so for example, on the right side you'll see this page has received the many inlinks. now that means many other pages are pointing to this page. this shows that this page is quite useful. on the left side you can see this is another page that points to many other pages. so this is a director page that would allow you to actually see a lot of other pages. so we can call the first case authority page and the second case half page, but this means the link information can help intuit. one is to provide extra text for matching. the other is to provide some additional scores for the webpage to characterize how likely a page is a hub, how likely a page is a authority. so people then of course and proposed ideas to leverage this link information. google's pagerank which was the main technique that they used in early days is a good example and that is an algorithm to capture page and popularity, basically to score authority. so the intuitions here are links are just like citations in literature. now think about one page pointing you to another page, this is very similar to one paper citing another paper. so, of course then, if a page is cited often, then we can assume this page to be more useful in general. so that's a very good intuition. now pagerank is essentially to take advantage of this intuition to implement with the principal approach. intuitively, it is essentially doing citation counting or in link counting. it just improves the simple idea in two ways. one it will consider indirect citations. so that means you don't just look at how many in links you have. you also look at what are those pages that are pointing to you. if those pages themselves have a lot of in-links, that means a lot. in some sense, you will get some credit from that. but if those pages that are pointing to you are not being pointed to by other pages they themselves don't have many in-links, then well, you don't get that much. so that's the idea of getting indirect citation. all right, so you can also understand this idea by looking at again the research papers. if you're cited by let's say ten papers, and those ten papers are just workshop papers or some papers that are not very influential, right? so although you've got ten in-links, and that's not as good as if you are cited by ten papers that themselves have attracted a lot of other citations. and so in this case where we would like to consider indirect links and page does that. the other idea is it's good to pseudo citations. assume that basically every page is having a number zero pseudo citation count. essentially you are trying to imagine there are many virtual links that will link all the pages together so that you actually get the pseudo citations from everyone. the reason why they want to do that. is this will allow them to solve the problem elegantly with linear algebra technique. so, i think maybe the best way to understand the pagerank is to think of this as through computer probability of random surfer visiting every webpage. [music",06_lesson-5-6-link-analysis-part-1
10,https://www.coursera.org/learn/text-retrieval,01_lesson-5-1-feedback-in-text-retrieval.en.txt,text-retrieval/06_week-5/02_week-5-lessons/01_lesson-5-1-feedback-in-text-retrieval.en.txt,"[sound] this lecture is about the feedback in text retrieval. so in this lecture, we will continue with the discussion of text retrieval methods. in particular, we're going to talk about the feedback in text retrieval. this is a diagram that shows the retrieval process. we can see the user would type in a query. and then, the query would be sent to a retrieval engine or search engine, and the engine would return results. these results would be issued to the user. now, after the user has seen these results, the user can actually make judgements. so for example, the user says, well, this is good and this document is not very useful and this is good again, etc. now, this is called a relevance judgment or relevance feedback because we've got some feedback information from the user based on the judgements. and this can be very useful to the system, knowing what exactly is interesting to the user. so the feedback module would then take this as input and also use the document collection to try to improve ranking. typically it would involve updating the query so the system can now render the results more accurately for the user. so this is called relevance feedback. the feedback is based on relevance judgements made by the users. now, these judgements are reliable but the users generally don't want to make extra effort unless they have to. so the down side is that it involves some extra effort by the user. there's another form of feedback called pseudo relevance feedback, or blind feedback, also called automatic feedback. in this case, we can see once the user has gotten [inaudible] or in fact we don't have to invoke users. so you can see there's no user involved here. and we simply assume that the top rank documents to be relevant. let's say we have assumed top 10 as relevant. and then, we will then use this assume the documents to learn and to improve the query. now, you might wonder, how could this help if we simply assume the top rank of documents? well, you can imagine these top rank of documents are actually similar to relevant documents even if they are not relevant. they look like relevant documents. so it's possible to learn some related terms to the query from this set. in fact, you may recall that we talked about using language model to analyze what association, to learn related words to the word of computer. and there, what we did is we first use computer to retrieve all the documents that contain computer. so imagine now the query here is a computer. and then, the result will be those documents that contain computer. and what we can do then is to take the top n results. they can match computer very well. and we're going to count the terms in this set. and then, we're going to then use the background language model to choose the terms that are frequent in this set but not frequent in the whole collection. so if we make a contrast between these two what we can find is that related to terms to the word computer. as we have seen before. and these related words can then be added to the original query to expand the query. and this would help us bring the documents that don't necessarily match computer but match other words like program and software. so this is very effective for improving the search result. but of course, pseudo-relevancy values are completely unreliable. we have to arbitrarily set a cut off. so there's also something in between called implicit feedback. in this case, what we do is we do involve users, but we don't have to ask users to make judgments. instead, we're going to observe how the user interacts with the search results. so in this case we'll look at the clickthroughs. so the user clicked on this one. and the user viewed this one. and the user skipped this one. and the user viewed this one again. now, this also is a clue about whether the document is useful to the user. and we can even assume that we're going to use only the snippet here in this document, the text that's actually seen by the user instead of the actual document of this entry. the link they are saying web search may be broken but it doesn't matter. if the user tries to fetch this document because of the displayed text we can assume these displayed text is probably relevant is interesting to you so we can learn from such information. and this is called interesting feedback. and we can, again, use the information to update the query. this is a very important technique used in modern. now, think about the google and bing and they can collect a lot of user activities while they are serving us. so they would observe what documents we click on, what documents we skip. and this information is very valuable. and they can use this to improve the search engine. so to summarize, we talked about the three kinds of feedback here. relevant feedback where the user makes explicit judgements. it takes some user effort, but the judgment information is reliable. we talk about the pseudo feedback where we seem to assume top brand marking will be relevant. we don't have to involve the user therefore we could do that, actually before we return the results to the user. and the third is implicit feedback where we use clickthroughs. where we involve the users, but the user doesn't have to make it explicitly their fault. make judgement. [music",01_lesson-5-1-feedback-in-text-retrieval
11,https://www.coursera.org/learn/text-retrieval,03_lesson-5-3-feedback-in-text-retrieval-feedback-in-lm.en.txt,text-retrieval/06_week-5/02_week-5-lessons/03_lesson-5-3-feedback-in-text-retrieval-feedback-in-lm.en.txt,"[sound] this lecture is about the feedback in the language modeling approach. in this lecture, we will continue the discussion of feedback in text retrieval. in particular, we're going to talk about the feedback in language modeling approaches. so we derive the query likelihood ranking function by making various assumptions. as a basic retrieval function, all those formulas worked well. but if we think about the feedback information, it's a little bit awkward to use query likelihood to perform feedback, because a lot of times the feedback information is additional information about the query. but we assume the query has generated it by assembling words from a language model in the query likelihood method. it's kind of unnatural to sample words that form feedback documents. as a result, researchers proposed a way to generalize query likelihood function, and it's called kullback-leibler divergence retrieval model. and this model is actually going to make the query likelihood retrieval function much closer to vector space model. yet this form of the language model can be regarded as a generalization of query likelihood, in the sense that it can cover query likelihood as a special case. and in this case, then feedback can be achieved through simply query model estimation or updating. this is very similar to rocchio, which updates the query vector. so let's see what is this kl-divergence retrieval model. so on the top, what you see is a query likelihood retrieval function, this one. and then kl-divergence, or also called cross entropy, retrieval model is basically to generalize the frequency part here into a language model. so basically it's the difference given by the probabilistic model here to characterize what the user is looking for, versus the count of query words there. and this difference allows us to plug in various different ways to estimate this. so this can be estimated in many different ways, including using feedback information. but this is called a kl-divergence, because this can be interpreted as matching the kl-divergence of two distributions. one is the query model, denoted by this distribution. one is the document language model here and smooth them with a collection language model, of course. and we are not going to talk about the detail of that, and you'll find it in some references. it's also called cross entropy because, in fact, we ignore some terms in the kl-divergence function and we will end up having actually cross entropy. and both are terms of information theory. but anyway, for our purposes here, you can just see the two formulas look almost identical, except that here we have a probability of a word given by a query language model. and here the sum is over all the words that are in the document and also with the nonzero probability for the query model. so it's kind of, again, a generalization of sum over all the matching query words. now you can also easily see we can recover the query likelihood retrieval function by simply setting this query model to the relative frequency of a word in the query. this is very easy to see once you plug this into here you can eliminate this query length as a constant. and then you will get exactly like that. so you can see the equivalence. and that's also why this kl-divergence model can be regarded as a generalization of query likelihood, because we can cover query likelihood as a special case. but it would also allow us to do much more than that. so this is how we can use the kl-divergence model to then do feedback. the picture shows that we first estimate a document language model, then we estimate a query language model, and we compute the kl-divergence. this is often denoted by a d here. but this basically means this is exactly like the vector space model, because we compute a vector for the document, then compute another vector for the query, and then we compute the distance. only that these vectors are of special forms, they are probability distributions. and then we get the results and we can find some feedback documents. let's assume they are mostly positive documents, although we could also consider both kinds of documents. so what we could do is, like in rocchio, we're going to compute another language model called the feedback language model here. again, this is going to be another vector just like the computing centroid of vector in rocchio. and then this model can be combined with the original query model using a linear interpolation, and this would then give us an update model, just like, again, in rocchio. so here we can see the parameter alpha can control the amount of feedback. if it's set to zero, then essentially there is no feedback. if it's set to one, we get full feedback and we ignore the original query. and this is generally not desirable, right? so unless you are absolutely sure you have seen a lot of relevant documents, then the query terms are not important. so of course, the main question here is, how do you compute this theta f? this is the big question here, and once you can do that, the rest is easy. so here we will talk about one of the approaches, and there are many approaches, of course. this approach is based on generative model, and i'm going to show you how it works. this will use a generative mixture model. so this picture shows that we have this model here, the feedback model that we want to estimate. and the basis is the feedback documents. let's say we are observing the positive documents. these are the clicked documents by users or random documents judged by users, or are simply top ranked documents that we assume to be relevant. now imagine how we can compute a centroid for these documents by using language model. one approach is simply to assume these documents are generated from this language model. as we did before, what we could do is just normalize the word frequency here to here and then we will get this word distribution. now the question is whether this distribution is good for feedback. well, you can imagine the top ranked word would be what? what do you think? well, those words would be common words. as we always see in a language model, the top ranked words are actually common words like the, a, etc. so it's not very good for feedback, because we would be adding a lot of such words to our query when we interpolate this with the original query model. so this was not good, so we need to do something. in particular, we are trying to get rid of those common words. and we have seen actually one way to do that by using background language model in the case of learning the associations of words, the words that are related to the word computer. we could do that and that would be another way to do this, but here we are going to talk about another approach which is a more principled approach. in this case, we're going to say well, you said that there are common words here in these documents that should not belong to this topic model, right? so now what we can do is to assume that, well, those words are generated from background language model, so they will generate those words like the, for example. and if we use maximum likelihood estimate, note that if all the words here must be generated from this model, then this model is forced to assign high probabilities to a word like the, because it occurs so frequently here. note that in order to reduce its probability in this model, we have to have another model, which is this one, to help explain the word the here. and in this case, it's not appropriate to use the background language model to achieve this goal because this model would assign high probabilities to these common words. so in this approach, then, we assume this machine that was generating these words would work as follows. we have a source control up here. imagine we flip a coin here to decide what distribution to use. with probability of lambda, the coin shows up as head and we're going to use the background language model. and we're going to do that in sample word from that model. with probability of 1 minus lambda, we're going to decide to use a known topic model, here, that we would like to estimate. and we're going to then generate a word here. if we make this assumption and this whole thing will be just one model, and we call this a mixture model because there are two distributions that are mixed together. and we actually don't know when each distribution is used. so again, think of this whole thing as one model, and we can still ask for words and it will still give us a word in a random manner. and of course, which word will show up will depend on both this distribution and that distribution. in addition, it would also depend on this lambda, because if you say lambda is very high and it's going to always use the background distribution, you will get different words. then if you say, well, lambda is very small, we're going to use this. so all of these are parameters in this model. and then if you're thinking this way, basically we can do exactly the same as what we did before. we're going to use maximum likelihood estimator to adjust this model, to estimate the parameters. basically we're going to adjust this parameter so that we can best explain all the data. the difference now is that we are not asking this model a known to explain this. but rather we are going to ask this whole model, mixture model, to explain the data. because it has got some help from the background model, it doesn't have to assign high probabilities to words like the. as a result, it will then assign higher probabilities to other words that are common here but not having high probability here. so those would be common here. and if they're common, they would have to have high probabilities, according to a maximum likelihood estimate method. and if they are rare here, then you don't get much help from this background model. as a result, this topic model must assign high probabilities. so the high probability words, according to the topic model, would be those that are common here but rare in the background. so this is basically a little bit like an idea of weighting here. but this would allow us to achieve the effect of removing these topic words that are meaningless in the feedback. so mathematically, what we have is to compute the likelihood, again, local likelihood, of the feedback documents. and note that we also have another parameter, lambda here, but we assume that the lambda denotes the noise in the feedback document. so we are going to, let's say set this to a parameter. let's say 50% of the words are noise or 90% are noise. and this can then be assumed it will be fixed. if we assume this is fixed, then we only have these probabilities as parameters, just like in the simple unigram language model. we have n parameters, n is the number of words. and then the likelihood function would look like this. it's very similar to the global likelihood function we see before, except that inside the logarithm there's a sum here. and this sum is because we consider two distributions. and which one is used would depend on lambda, and that's why we have this form. but mathematically, this is the function with theta as unknown variables. so this is just a function. all the other values are known except for this guy. so we can then choose this probability distribution to maximize this log likelihood, the same idea as the maximum likelihood estimate as a mathematical problem. we just have to solve this optimization problem. we essentially would try all the theta values until we find one that gives this whole thing the maximum probability. so it's a well-defined math problem. once we have done that, we obtain this theta f that can then be interpolated with original query model to the feedback. so here are some examples of the feedback model learned from a web document collection. and we do pseudo-feedback we just use the top ten documents and we use this mixture model. so the query is airport security. what we do is we first retrieve ten documents from the web database and this is of course pseudo-feedback. and then we're going to feed that mixture model to this ten document set. and these are the words learned using this approach. this is the probability of a word given by the feedback model in both cases. so in both cases you can see the highest probability words include the very relevant words to the query. so airport security, for example, these query words still show up as high probabilities in each case naturally, because they occur frequently in the top ranked documents. but we also see beverage, alcohol, bomb, terrorist, etc. so these are relevant to this topic, and they, if combined with original query, can help us much more accurately on documents. and also they can help us bring up documents that only mention some of these other words, maybe, for example, just airport and then bomb, for example. so this is how pseudo-feedback works. it shows that this model really works and picks up some related words to the query. what's also interesting is that if you look at the two tables here and you compare them, then you'll see, in this case, when lambda is set to a small value, then we'll see some common words here. and that means, well, we don't use the background model often. remember, lambda confuses the probability of using background model to generate the text. if we don't rely much on background model, we still have to use this topic model to account for the common words. whereas if we set lambda to a very high value, we will use the background model very often to explain these words. then there's no burden on expanding those common words in the feedback documents by the topic model. so as a result, the topic model here is very discriminative. it contains all the relevant words without common words. so this can be added to the original query to achieve feedback. so to summarize, in this lecture we have talked about the feedback in language model approach. in general, feedback is to learn from examples. these examples can be assumed examples, can be pseudo-examples, like assume the top ten documents that are assumed to be relevant. they could be based on user interactions, like feedback based on clickthroughs or implicit feedback. we talked about the three major feedback scenarios, relevance feedback, pseudo feedback, and implicit feedback. we talked about how to use rocchio to do feedback in vector space model and how to use query model estimation for feedback in language model. and we briefly talked about the mixture model and the basic idea. there are many other methods. for example, the relevance model is a very effective model for estimating query model. so you can read more about these methods in the references that are listed at the end of this lecture. so there are two additional readings here. the first one is a book that has a systematic review and discussion of language models for information retrieval. and the second one is a important research paper that's about relevance based language models, and it's a very effective way of computing query model. [music",03_lesson-5-3-feedback-in-text-retrieval-feedback-in-lm
12,https://www.coursera.org/learn/text-retrieval,04_lesson-5-4-web-search-introduction-web-crawler.en.txt,text-retrieval/06_week-5/02_week-5-lessons/04_lesson-5-4-web-search-introduction-web-crawler.en.txt,"this lecture is about web search. in this lecture, we're going to talk about one of the most important applications of text retrieval, web search engines. so let's first look at some general challenges and opportunities in web search. now, many informational retrieval algorithms had been developed before the web was born. so when the web was born, it created the best opportunity to apply those algorithms to major application problem that everyone would care about. so naturally, there have to be some further extensions of the classical search algorithms to address new challenges encountered in web search. so here are some general challenges. first, this is a scalability challenge. how to handle the size of the web and ensure completeness of coverage of all information. how to serve many users quickly and by answering all their queries. and so that's one major challenge and before the web was born the scale search was relatively small. the second problem is that there's no quality information and there are often spams. the third challenge is dynamics of the web. the new pages are constantly create and some pages may be updated very quickly, so it makes it harder to keep it indexed fresh. so these are some of the challenges that we have to solve in order to deal with high quality web searching. on the other hand there are also some interesting opportunities that we can leverage to include the search results. there are many additional heuristics, for example, using links that we can leverage to improve scoring. now everything that we talked about such as the vector space model are general algorithms. they can be applied to any search applications, so that's the advantage. on the other hand, they also don't take advantage of special characteristics of pages or documents in the specific applications, such as web search. web pages are linked with each other, so obviously, the linking is something that we can also leverage. so, because of these challenges and opportunities and there are new techniques that have been developed for web search or due to need for web search. one is parallel indexing and searching and this is to address the issue of scalability. in particular, google's imaging of map reduce is very influential and has been very helpful in that aspect. second, there are techniques that are developing for addressing the problem of spams, so spam detection. we'll have to prevent those spam pages from being ranked high. and there are also techniques to achieve robust ranking. and we're going to use a lot of signals to rank pages, so that it's not easy to spam the search engine with a particular trick. and the third line of techniques is link analysis and these are techniques that can allow us to improve such results by leveraging extra information. and in general in web searching, we're going to use multiple features for ranking not just for link analysis. but also exploring all kinds of crawls like the layout or anchor text that describes a link to another page. so, here's a picture showing the basic search engine technologies. basically, this is the web on the left and then user on the right side and we're going to help this user to get the access for the web information. and the first component is a crawler that would crawl pages and then the second component is indexer that would take these pages create the inverted index. the third component there is a retriever and that would use inverted index to answer user's query by talking to the user's browser. and then the search results will be given to the user and when the browser would show those results, it allows the user to interact with the web. so, we're going to talk about each of these components. first of all, we're going to talk about the crawler, also called a spider or software robot that would do something like crawling pages on the web. to build a toy crawler is relatively easy, because you just need to start with a set of seed pages. and then fetch pages from the web and parse these pages and figure out new links. and then add them to the priority que and then just explore those additional links. but to be able to real crawler actually is tricky and there are some complicated issues that we have to deal with. for example robustness, what if the server doesn't respond, what if there's a trap that generates dynamically generated webpages that might attract your crawler to keep crawling on the same side and to fetch dynamic generated pages? the results of this issue of crawling courtesy and you don't want to overload one particular server with many crawling requests and you have to respect the robot exclusion protocol. you also need to handle different types of files, there are images, pdf files, all kinds of formats on the web. and you have to also consider url extension, so sometimes those are cgi scripts and there are internal references, etc, and sometimes you have javascripts on the page and they also create challenges. and you ideally should also recognize redundant pages because you don't have to duplicate those pages. and finally, you may be interested in the discover hidden urls. those are urls that may not be linked to any page, but if you truncate the url to a shorter path, you might be able to get some additional pages. so what are the major crawling strategies? in general, breadth-first is most common because it naturally balances the sever load. you would not keep probing a particular server with many requests. also parallel crawling is very natural because this task is very easy to parallelize. and there is some variations of the crawling task, and one interesting variation is called a focused crawling. in this case, we're going to crawl just some pages about a particular topic. for example, all pages about automobiles, all right. and this is typically going to start with a query, and then you can use the query to get some results from a major search engine. and then you can start it with those results and then gradually crawl more. the one channel in crawling, is you will find the new channels that people created and people probably are creating new pages all the time. and this is very challenging if the new pages have not been actually linked to any old pages. if they are, then you can probably find them by re-crawling the old pages, so these are also some interesting challenges that have to be solved. and finally, we might face the scenario of incremental crawling or repeated crawling, right. let's say, if you want to build a web search engine, and you first crawl a lot of data from the web. but then, once you have cracked all the data, in the future you just need to crawl the updated pages. in general, you don't have to re-crawl everything, right? it's not necessary. so in this case, your goal is to minimize the resource overhead by using minimum resources to just the update pages. so, this is actually a very interesting research question here, and this is a open research question, in that there aren't many standard algorithms established yet for doing this task. but in general, you can imagine, you can learn, from the past experience. so the two major factors that you have to consider are, first will this page be updated frequently? and do i have to quote this page again? if the page is a static page and that hasn't being changed for months, you probably don't have to re-crawl it everyday because it's unlikely that it will changed frequently. on the other hand, if it's a sports score page that gets updated very frequently and you may need to re-crawl it and maybe even multiple times on the same day. the other factor to consider is, is this page frequently accessed by users? if it is, then it means that it is a high utility page and then thus it's more important to ensure such a page to refresh. compared with another page that has never been fetched by any users for a year, then even though that page has been changed a lot then. it's probably not that necessary to crawl that page or at least it's not as urgent as to maintain the freshness of frequently accessed page by users. so to summarize, web search is one of the most important applications of text retrieval and there are some new challenges particularly scalability, efficiency, quality information. there are also new opportunities particularly rich link information and layout, etc. a crawler is an essential component of web search applications and in general, you can find two scenarios. one is initial crawling and here we want to have complete crawling of the web if you are doing a general search engine or focused crawling if you want to just target as a certain type of pages. and then, there is another scenario that's incremental updating of the crawl data or incremental crawling. in this case, you need to optimize the resource, try to use minimum resource to get the [inaudible] [music",04_lesson-5-4-web-search-introduction-web-crawler
13,https://www.coursera.org/learn/text-retrieval,02_lesson-5-2-feedback-in-vector-space-model-rocchio.en.txt,text-retrieval/06_week-5/02_week-5-lessons/02_lesson-5-2-feedback-in-vector-space-model-rocchio.en.txt,"[sound] this lecture is about the feedback in the vector space model. in this lecture, we continue talking about the feedback in text retrieval. particularly, we're going to talk about feedback in the vector space model. as we have discussed before, in the case of feedback the task of text retrieval system is removed from examples in improved retrieval accuracy. we will have positive examples. those are the documents that assume would be relevant or be charged with being relevant. all the documents that are viewed by users. we also have negative examples. those are documents known to be non-relevant. they can also be the documents that are skipped by users. the general method in the vector space model for feedback is to modify our query vector. we want to place the query vector in a better position to make it accurate. and what does that mean exactly? well, if we think about the query vector that would mean we would have to do something to the vector elements. and in general, that would mean we might add new terms. or we might just weight of old terms or assign weights to new terms. as a result, in general, the query will have more terms. we often call this query expansion. the most effective method in the vector space model for feedback is called the rocchio feedback, which was actually proposed several decades ago. so the idea is quite simple. we illustrate this idea by using a two dimensional display of all the documents in the collection and also the query vector. so now we can see the query vector is here in the center, and these are all the documents. so when we use the query back there and use the same narrative function to find the most similar documents, we are basically doing a circle here and that these documents would be basically the top-ranked documents. and these process are relevant documents, and these are relevant documents, for example, it's relevant, etc. and then these minuses are negative documents, like these. so our goal here is trying to move this query back to some position, to improve the retrieval accuracy. by looking at this diagram, what do you think? where should we move the query vector so that we can improve the retrieval accuracy? intuitively, where do you want to move query vector? if you want to think more, you can pause the video. if you think about this picture, you can realize that in order to work well in this case you want the query vector to be as close to the positive vectors as possible. that means ideally, you want to place the query vectors somewhere here. or we want to move the query vector closer to this point. now so what exactly is this point? well, if you want these relevant documents to rank on the top, you want this to be in the center of all these relevant documents, right? because then if you draw a circle around this one, you'll get all these relevant documents. so that means we can move the query vector towards the centroid of all the relevant document vectors. and this is basically the idea of rocchio. of course, you can consider the centroid of negative documents and we want to move away from the negative documents. now your match that we're talking about moving vector closer to some other vec and away from other vectors. it just means that we have this formula. here you can see this is original query vector and this average basically is the centroid vector of relevant documents. when we take the average of these vectors, then were computing the centroid of these vectors. similarly, this is the average of non-relevant document like this. so it's essentially of non-relevant documents. and we have these three parameters here, alpha, beta, and gamma. they are controlling the amount of movement. when we add these two vectors together, we're moving the query vector closer to the centroid. this is when we add them together. when we subtracted this part, we kind of move the query vector away from that centroid. so this is the main idea of rocchio feedback. and after we have done this, we will get a new query vector which can be used to score documents. this new query vector, will then reflect the move of this original query vector toward this relevant centroid vector and away from the non-relevant value. okay, so let's take a look at the example. this is the example that we've seen earlier. only that i deemed that display of the actual documents. i only showed the vector representation of these documents. we have five documents here and we have to read in the documents here, right. and they're displayed in red. and these are the term vectors. now i have just assumed some of weights. a lot of terms, we have zero weights of course. now these are negative arguments. there are two here. there is another one here. now in this rocchio method, we first compute the centroid of each category. and so let's see, look at the centroid vector of the positive documents, we simply just, so it's very easy to see. we just add this with this one the corresponding element. and then that's down here and take the average. and then we're going to add the corresponding elements and then just take the average. and so we do this for all this. in the end, what we have is this one. this is the average vector of these two, so it's a centroid of these two. let's also look at the centroid of the negative documents. this is basically the same. we're going to take the average of the three elements. and these are the corresponding elements in the three vectors, and so on and so forth. so in the end, we have this one. now in the rocchio feedback method we're going to combine all these with the original query vector which is this. so now let's see how we combine them together. well, that's basically this. so we have a parameter alpha controlling the original query times weight that's one. and now we have beta to control the inference of the positive centroid of the weight, that's 1.5. that comes from here. all right, so this goes here. and we also have this negative weight here gamma here. and this way, it has come from, of course, the negative centroid here. and we do exactly the same for other terms, each is for one term. and this is our new vector. and we're going to use this new query vector, this one to rank the documents. you can imagine what would happen, right? because of the movement that this one would matches these red documents much better because we moved this vector closer to them. and it's going to penalize these black documents, these non relevent documents. so this is precisely what we wanted from feedback. now of course if we apply this method in practice we will see one potential problem and that is the original query has only four terms that are now zero. but after we do query explaining and merging, we'll have many times that would have non zero weights. so the calculation will have to involve more terms. in practice, we often truncate this matter and only retain the terms with highest weights. so let's talk about how we use this method in practice. i just mentioned that they're often truncated vector. consider only a small number of words that have highest weights in the centroid vector. this is for efficiency concern. i also said here that negative examples, or non-relevant examples tend not to be very useful, especially compared with positive examples. now you can think about why. one reason is because negative documents tend to distract the query in all directions. so, when you take the average, it doesn't really tell you where exactly it should be moving to. whereas positive documents tend to be clustered together. and they will point you to a consistent direction. so that also means that sometimes we don't have to use those negative examples. but note that in some cases, in difficult queries where most results are negative, negative feedback after is very useful. another thing is to avoid over-fitting. that means we have to keep relatively high weight on the original query terms. why? because the sample that we see in feedback is a relatively small sample. we don't want to overly trust the small sample. and the original query terms are still very important. those terms are heightened by the user and the user has decided that those terms are most important. so in order to prevent the us from over-fitting or drifting, prevent topic drifting due to the bias toward the feed backing symbols. we generally would have to keep a pretty high weight on the original terms so it was safe to do that. and this is especially true for pseudo relevance feedback. now, this method can be used for both relevance feedback and pseudo-relevance feedback. in the case of pseudo-feedback, the prime and the beta should be set to a smaller value because the relevant examples are assumed not to be relevant. they're not as reliable as the relevance feedback. in the case of relevance feedback, we obviously could use a larger value. so those parameters, they have to be set empirically. and the rocchio method is usually robust and effective. it's still a very popular method for feedback. [music",02_lesson-5-2-feedback-in-vector-space-model-rocchio
14,https://www.coursera.org/learn/text-retrieval,10_lesson-6-10-course-summary.en.txt,text-retrieval/07_week-6/02_week-6-lessons/10_lesson-6-10-course-summary.en.txt,"[noise] this lecture is a summary of this course. this map shows the major topics we have covered in this course. and here are some key high-level take-away messages. first, we talked about natural language content analysis. here the main take-away messages is natural language processing is a foundation for text retrieval, but currently the nlp isn't robust enough so the battle of wars is generally the main method used in modern search engines. and it's often sufficient before most of the search tasks, but obviously for more complex search tasks then we need a deeper natural language processing techniques. we then talked about the high level strategies for text access and we talked about push versus pull. in pull we talked about querying versus browsing. now in general in future search engines, we should integrate all these techniques to provide a math involved information access. and now we'll talk about a number of issues related to search engines. we talked about the search problem. and we framed that as a ranking problem. and we talked about a number of retrieval methods. we start with the overview of vector space model and the probabilistic model and then we talked about the vector space model in depth. we also later talked about the language modeling approach, and that's probabilistic model. and here, many take-away message is that the modeling retrieval function tend to look similar, and they generally use various heuristics. most important ones are tf-idf weighting, document length normalization. and the tf is often transformed through a sub media transformation function. and then we talked about how to implement a retrieval system, and here, the main techniques that we talked about, how to construct an inverted index so that we can prepare the system to answer a query quickly. and we talked about how to do a faster search by using the inverted index. and we then talked about how to evaluate the text retrieval system, mainly introduced to the cranfield evaluation methodology. this was a very important evaluation methodology that can be applied to many tasks. we talked about the major evaluation measures. so, the most important measures for a search engine are map, mean average precision, and ndcg summarize the discount or accumulative gain and also precision and recall are the two basic measures. and we then talked about feedback techniques. and we talked about the rocchio in the vector space model and the mixture model and the language modeling approach. feedback is a very important technique especially considering the opportunity of learning from a lot of pixels on the web. we then talked about web search. and here we talked about how to use parallel in that scene to solve the scalability issue in that scene we're going to use the net reduce. then we talked about how to use linking permission model app to improve search. we talked about page rank and hits as the major hours is to analyzing links on the web. we then talked about learning through rank. this is the use of machine learning to combine multiple features for improvement scoring. not only that the effectiveness can be improved in using this approach, but we can also improve the robustness of the. the ranking function so that it's not easy to expand a search engine. it just some features to promote the page. and finally we talked about the future of web search. about the some major reactions that we might to see in the future in improving the count of regeneration of such engines. and then finally we talked about the recommended systems and, these are systems to increment the push mode. and we'll talk about the two approaches, one is content-based, one is collaborative filtering and they can be combined together. now, an obvious missing piece in this picture is the user, so user interface is also an important component in any search engine. even though the current search interface is relatively simple they actually have done a lot of studies of user interfaces where we do visualization for example. and this is the topic to that, you can learn more by reading this book. it's an excellent book about all kinds of studies of search using the face. if you want to know more about the topics that we talked about, you can also read some additional readings that are listed here. in this short course we only manage to cover some basic topics in text retrievals and search engines. and these resources provide additional information about more advanced topics and they give a more thorough treatment of some of the topics that we talked about. and a main source is the synthesis digital library that you can see a lot of short to textbook or textbooks, or long tutorials. they tend to provide a lot of information to explain a topic. and there a lot of series that are related to this cause. one is information concepts, retrieval, and services. one is human langauge technology. and yet another is artificial intelligence and machine learning. there are also some major journals and conferences listed here that tend to have a lot of research papers we need to and topic of this course. and finally, for more information about resources including readings, tool kits, etc you can check out his url. so, if you have not taken the text mining course in this data mining specialization series then naturally the next step is to take that course. as this picture shows, to mine big text data, we generally need two kinds of techniques. one is text retrieval, which is covered in this course. and these techniques will help us convert raw big text data into small relevant text data, which are actually needed in the specific application. now human plays important role in mining any text data because text data is written for humans to consume. so involving humans in the process of data mining is very important and in this course we have covered the various strategies to help users get access to the most relevant data. these techniques are always so essential in any text mining system to help provide prominence and to help users interpret the inner patterns that the user will define through text data mining. so, in general, the user would have to go back to the original data to better understand the patterns. so the text mining cause, or rather, text mining and analytics course will be dealing with what to do once the user has a following information. so this is a second step in this picture where we would convert the text data into actionable knowledge. and this has to do with helping users to further digest the found information or to find the patterns and to reveal knowledge. in text and such knowledge can then be used in application systems to help decision making or to help a user finish a task. so, if you have not taken that course, the natural step and that natural next step would be to take that course. thank you for taking this course. i hope you had fun and found this course to be useful to you. and i look forward to interacting with you at a future opportunity. [music",10_lesson-6-10-course-summary
15,https://www.coursera.org/learn/text-retrieval,03_lesson-6-3-learning-to-rank-part-3.en.txt,text-retrieval/07_week-6/02_week-6-lessons/03_lesson-6-3-learning-to-rank-part-3.en.txt,"[sound] there are many more of the munster learning algorithms than the regression based approaches and they generally attempt to direct the optimizer retrieval method. like a map or ndcg. note that the optimization object or function that we have seen on the previous slide is not directly related to the retrieval measure. by maximizing the prediction of one or zero, we don't necessarily optimize the ranking of those documents. one can imagine that our prediction may not be too bad. and let's say both are around 0.5. so it's kind of in the middle of zero and one for the two documents. but the ranking can be wrong, so we might have a larger value for e2 and then e1. so that won't be good from retrieval perspective, even though function, it's not bad. in contrast, we might have another case where we predicted the values, or around the 0.9, it said. and by the objective function, the error would be larger. but if we didn't get the order of the two documents correct, that's actually a better result. so these new, more advanced approaches will try to correct that problem. of course, then the challenge is that the optimization problem will be harder to solve. and then, researchers have posed many solutions to the problem, and you can read more of the references at the end, know more about these approaches. now, these learning ranked approaches after the general. so there accounts would be be applied with many other ranking problems, not just the retrieval problem. so some people will go with recommender systems, computational advertising, or summarization and there are many others that you can probably encounter in your applications.. to summarize this lecture we have talked about using machine learning to combine much more features including ranking results. actually the use of machine learning in information retrieval has started since many decades ago. so for example, the rocchio feedback approach that we talked about earlier was a machine learning approach prior to relevance feedback. but the most recent use of machine learning has been driven by some changes in the environment of applications of retrieval systems. first, it's mostly freedom of availability of a lot of training data in the form of critical, such as they are more available than before. so the data can provide a lot of useful knowledge about relevance and machine learning methods can be applied into a leverage list. secondly, it's also freedom by the need for combining many features, and this is not only just because there are more features available on the web that can be naturally used for improved scoring. it's also because by combining them, we can improve the robustness of ranking, so this is desired for combating spams. modern search engines all use some kind of machine learning techniques to combine many features to optimize ranking and this is a major feature of these commercial engines such a google or bing. the topic of learning to rank is still active research topic in the community, and so we can expect to see new results in development in the next few years, perhaps. here are some additional readings that can give you more information about how learning to rank at works and also some advanced methods. [music",03_lesson-6-3-learning-to-rank-part-3
16,https://www.coursera.org/learn/text-retrieval,06_lesson-6-6-recommender-systems-content-based-filtering-part-2.en.txt,text-retrieval/07_week-6/02_week-6-lessons/06_lesson-6-6-recommender-systems-content-based-filtering-part-2.en.txt,"[sound] there are some interesting challenges in threshold for the learning the filtering problem. so here i show the historical data that you can collect in the filtering system, so you can see the scores and the status of relevance. so the first one has a score of 36.5 and it's relevant. the second one is not relevant and it's separate. of course, we have a lot of documents for which we don't know the status, because we have never delivered them to the user. so as you can see here, we only see the judgements of documents delivered to the user. so this is not a random sample, so it's a sensitive data. it's kind of biased, so that creates some difficultly for learning. secondly, there are in general very little labeled data and very few relevant data, so it's also challenging for machine learning approaches, typically they require more training data. and in the extreme case at the beginning we don't even have any labeled data as well. the system there has to make a decision, so that's a very difficult problem at the beginning. finally, there is also this issue of exploration versus exploitation tradeoff. now, this means we also want to explore the document space a little bit and to see if the user might be interested in documents that we have in data labeled. so in other words, we're going to explore the space of user interests by testing whether the user might be interested in some other documents that currently are not matching the user's interests so well. so how do we do that? well, we could lower the threshold a little bit until we just deliver some near misses to the user to see what the user would respond, to see how the user would respond to this extra document. and this is a tradeoff, because on the one hand, you want to explore, but on the other hand, you don't want to really explore too much, because then you will over deliver non-relevant information. so exploitation means you would exploit what you learn about the user. let's say you know the user is interested in this particular topic, so you don't want to deviate that much, but if you don't deviate at all then you don't exploit so that's also are not good. you might miss opportunity to learn another interest of the user. so this is a dilemma. and that's also a difficulty problem to solve. now, how do we solve these problems? in general, i think one can use the empirical utility optimization strategy. and this strategy is basically to optimize the threshold based on historical data, just as you have seen on the previous slide. right, so you can just compute the utility on the training data for each candidate score threshold. pretend that, what if i cut at this point. what if i cut at the different scoring threshold point, what would happen? what's utility? since these are training data, we can kind of compute the utility, and we know that relevant status, or we assume that we know relevant status based on approximation of click-throughs. so then we can just choose the threshold that gives the maximum utility on the training data. but this of course, doesn't account for exploration that we just talked about. and there is also the difficulty of biased training sample, as we mentioned. so, in general, we can only get the upper bound for the true optimal threshold, because the threshold might be actually lower than this. so, it's possible that this could discarded item might be actually interesting to the user. so how do we solve this problem? well, we generally, and as i said we can low with this threshold to explore a little bit. so here's on particular approach called beta-gamma threshold learning. so the idea is falling. so here i show a ranked list of all the training documents that we have seen so far, and they are ranked by their positions. and on the y axis we show the utility, of course, this function depends on how you specify the coefficients in the utility function, but we can then imagine, that depending on the cutoff position, we will have a utility. suppose i cut at this position and that would be a utility. for example, identify some cutting cutoff point. the optimal point, theta optimal, is the point when it will achieve the maximum utility if we had chosen this as threshold. and there is also zero utility threshold. you can see at this cutoff the utility is zero. what does that mean? that means if i lower the threshold a little bit, now i reach this threshold. the utility would be lower but it's still non-active at least, right? so it's not as high as the optimal utility. but it gives us as a safe point to explore the threshold, as i have explained, it's desirable to explore the interest of space. so it's desirable to lower the threshold based on your training there. so that means, in general, we want to set the threshold somewhere in this range. let's say we can use the alpha to control the deviation from the optimal utility point. so you can see the formula of the threshold would be just the interpolation of the zero utility threshold and the optimal utility threshold. now, the question is, how should we set alpha? and when should we deviate more from the optimal utility point? well, this can depend on multiple factors, and the one way to solve the problem is to encourage this threshold mechanism to explore up to the zero point, and that's a safe point, but we're not going to necessarily reach all the way to the zero point. rather, we're going to use other parameters to further define alpha and this specifically is as follows. so there will be a beta parameter to control the deviation from the optimal threshold and this can be based on can be accounting for the over-fitting to the training data let's say, and so this can be just an adjustment factor. but what's more interesting is this gamma parameter. here, and you can see in this formula, gamma is controlling the inference of the number of examples in training that are set. so you can see in this formula as n which denotes the number of training examples becomes bigger, then it would actually encourage less exploration. in other words, when these very small it would try to explore more. and that just means if we have seen few examples we're not sure whether we have exhausted the space of interest. so we need to explore but as we have seen many examples from the user many that have we feel that we probably don't have to explore more. so this gives us a beta gamma for exploration, right. the more examples we have seen the less exploration we need to do. so the threshold would be closer to the optimal threshold so that's the basic idea of this approach. this approach actually has been working well in some evaluation studies, particularly effective. and also can work on arbitrary utility with the appropriate lower bound. and explicitly addresses the exploration-exploitation tradeoff and it kind of uses the zero utility threshold point as a safeguard for exploration-exploitation tradeoff. we're not never going to explore further than the zero utility point. so if you take the analogy of gambling, and you don't want to risk on losing money. so it's a safe spend, really conservative strategy for exploration. and the problem is of course, this approach is purely heuristic and the zero utility lower boundary is also often too conservative, and there are, of course, more advance in machine learning approaches that have been proposed for solving this problems and this is their active research area. so to summarize, there are two strategies for recommended systems or filtering systems, one is content based, which is looking at the item similarity, and the other is collaborative filtering that was looking at the user similarity. we've covered content-based filtering approach. in the next lecture, we will talk about the collaborative filtering. in content-based filtering system, we generally have to solve several problems relative to filtering decision and learning, etc. and such a system can actually be built based on a search engine system by adding a threshold mechanism and adding adaptive learning algorithm to allow the system to learn from long term feedback from the user. [music",06_lesson-6-6-recommender-systems-content-based-filtering-part-2
17,https://www.coursera.org/learn/text-retrieval,09_lesson-6-9-recommender-systems-collaborative-filtering-part-3.en.txt,text-retrieval/07_week-6/02_week-6-lessons/09_lesson-6-9-recommender-systems-collaborative-filtering-part-3.en.txt,"[sound] so to summarize our discussion of recommender systems, in some sense, the filtering task for recommender task is easy, and in some other sense, the task is actually difficult. so it's easy because the user's expectation is low. in this case the system takes initiative to push information to the user. the user doesn't really make any effort, so any recommendation is better than nothing. all right. so, unless you recommend the noise items or useless documents. if you can recommend some useful information users generally will appreciate it, so that's, in that sense that's easy. however, filtering is actually much harder task than retrieval because you have to make a binary decision and you can't afford waiting for a lot of items and then you're going to see whether one item is better than others. you have to make a decision when you see this item. think about news filtering. as soon as you see the news enough to decide whether the news would be interesting to the user. if you wait for a few days, well, even if you can make accurate recommendation of the most relevant news, the utility is going to be significantly decreased. another reason why it's hard is because of data sparseness if you think of this as a learning problem. collaborative filtering, for example, is purely based on learning from the past ratings. so if you don't have many ratings there's really not that much you can do, right? and yeah i just mentioned this cold start problem. this is actually a very serious, serious problem. but of course there are strategies that have been proposed for the soft problem, and there are different strategies that you can use to alleviate the problem. you can use, for example, more user information to asses their similarity, instead of using the preferences of these users on these items give me additional information available about the user, etc. and we also talk about two strategies for filtering task. one is content-based where we look at items there is collaborative filtering where we look at use a similarity. and they obviously can be combined in a practical system. you can imagine they generally would have to be combined. so that would give us a hybrid strategy for filtering. and we also could recall that we talked about push versus pull as two strategies for getting access to the text data. and recommender system easy to help users in the push mode, and search engines are serving users in the pull mode. obviously the two should be combined, and they can be combined. the two have a system that can support user with multiple mode information access. so in the future we could anticipate such a system to be more useful the user. and either, this is an active research area so there are a lot of new algorithms being proposed all the time. in particular those new algorithms tend to use a lot of context information. now the context here could be the context of the user and could also be the context of the user. items. the items are not the isolated. they're connected in many ways. the users might form social network as well, so there's a rich context there that we can leverage in order to really solve the problem well and then that's active research area where also machine learning algorithms have been applied. here are some additional readings in the handbook called recommender systems and has a collection of a lot of good articles that can give you an overview of a number of specific approaches through recommender systems. [music",09_lesson-6-9-recommender-systems-collaborative-filtering-part-3
18,https://www.coursera.org/learn/text-retrieval,01_lesson-6-1-learning-to-rank-part-1.en.txt,text-retrieval/07_week-6/02_week-6-lessons/01_lesson-6-1-learning-to-rank-part-1.en.txt,"[music] this lecture is about the learning to rank. in this lecture, we are going to continue talking about web search. in particular we're going to talk about the using machine learning to combine different features to improve the ranking function. so the question that we address in this lecture is how we can combine many features to generate a single ranking function to optimize search results? in the previous lectures we have talked about a number of ways to rank documents. we have talked about some retrieval models like a bm25 or query light code. they can generate a based this course for matching documents with a query. and we also talked about the link based approaches like page rank that can give additional scores to help us improve ranking. now the question now is, how can we combine all these features and potentially many other features to do ranking? and this will be very useful for ranking webpages, not only just to improve accuracy, but also to improve the robustness of the ranking function. so that it's not easy for a spammer to just perturb a one or a few features to promote a page. so the general idea of learning to rank is to use machine learning to combine this features to optimize the weights on different features to generate the optimal ranking function. so we will assume that the given a query document pair q and d, we can define a number of features. and these features can vary from content based features such as a score of the document with respect to the query according to a retrieval function such as bm25 or query light hold of punitive commands from a machine or pl2 etcetera. it can also be a link based score like or page rank score like. it can be also application of retrieval models to the ink text of the page. those are the types of descriptions of links that point to this page. so, these can all the clues whether this document is relevant, or not. we can even include a feature such as whether the url has a tilde because this might be indicator of home page or entry page. so all these features can then be combined together to generate a ranking function. the question is, of course. how can we combine them? in this approach, we simply hypothesize that the probability that this document isn't relevant to this query is a function of all these features. so we can hypothesize this that the probability of relevance is related to these features through a particular form of the function that has some parameters. these parameters can control the influence of different features of the final relevance. now this is of course just an assumption. whether this assumption really makes sense is a big question and that's they have to empirically evaluate the function. but by hypothesizing that the relevance is related to these features in the particular way, we can then combine these features to generate the potential more powerful ranking function, a more robust ranking function. naturally the next question is how do we estimate those parameters? how do we know which features should have a higher weight, and which features will have lower weight? so this is the task of training or learning, so in this approach what we will do is use some training data. those are the data that have been charted by users so that we already know the relevant judgments. we already know which documents should be ranked high for which queries. and this information can be based on real judgments by users or this can also be approximated by just using click through information, where we can assume the clicked documents are better than the skipped documents clicked documents are relevant and the skipped documents are non-relevant. so in general with the fit such hypothesize ranking function to the training data meaning that we will try to optimize it's retrieval accuracy on the training data. and we can adjust these parameters to see how we can optimize the performance of the functioning on the training data in terms of some measures such as map or ndcg. so the training date would look like a table of tuples. each tuple has three elements, the query, the document, and the judgement. so it looks very much like our relevance judgement that we talked about in the evaluation of retrieval systems. [music",01_lesson-6-1-learning-to-rank-part-1
19,https://www.coursera.org/learn/text-retrieval,07_lesson-6-7-recommender-systems-collaborative-filtering-part-1.en.txt,text-retrieval/07_week-6/02_week-6-lessons/07_lesson-6-7-recommender-systems-collaborative-filtering-part-1.en.txt,"this lecture is about collaborative filtering. in this lecture we're going to continue the discussion of recommended systems. in particular, we're going to look at the approach of collaborative filtering. you have seen this slide before when we talked about the two strategies to answer the basic question, will user u like item x? in the previous lecture, we looked at the item similarity, that's content-based filtering. in this lecture, we're going to look at the user similarity. this is a different strategy, called a collaborative filtering. so first, what is collaborative filtering? it is to make filtering decisions for individual user based on the judgements of other uses. and that is to say we will infer individual's interest or preferences from that of other similar users. so the general idea is the following. given a user u, we're going to first find the similar users, u1 through. and then we're going to predict the use preferences based on the preferences of these similar users, u1 through. now, the user similarity here can be judged based their similarity, the preferences on a common set of items. now here you can see the exact content of item doesn't really matter. we're going to look at the only the relation between the users and the items. so this means this approach is very general. it can be applied to any items, not just the text of objects. so this approach would work well under the following assumptions. first, users with the same interest will have similar preferences. second, the users with similar preferences probably share the same interest. so for example, if the interest of the user is in information retrieval, then we can infer the user probably favor sigir papers. so those who are interested in information retrieval researching, probably all favor sigir papers. that's an assumption that we make. and if this assumption is true, then it would help collaborative filtering to work well. we can also assume that if we see people favor see sigir papers, then we can infer their interest is probably information retrieval. so in these simple examples, it seems to make sense, and in many cases such assumption actually does make sense. so another assumption we have to make is that there are sufficiently large number of user preferences available to us. so for example, if you see a lot of ratings of users for movies and those indicate their preferences on movies. and if you have a lot of such data, then cluttered and filtering can be very effective. if not, there will be a problem, and that's often called a cold start problem. that means you don't have many preferences available, so the system could not fully take advantage of collaborative filtering yet. so let's look at the filtering problem in a more formal way. so this picture shows that we are, in general, considering a lot of users and we're showing m users here, so u1 through. and we're also considering a number of objects. let's say n objects in order to o1 through on. and then we will assume that the users will be able to judge those objects and the user could for example give ratings to those items. for example, those items could be movies, could be products and then the users would give ratings 1 through 5 and see. so what you see here is that we have shown some ratings available for some combinations. so some users have watched some movies, they have rated those movies, they obviously won't be able to watch all the movies and some users may actually only watch a few movies. so this is in general a small symmetrics. so many items and many entries have unknown values. and what's interesting here is we could potentially infer the value of an element in this matrix based on other values. and that's after the essential question in collaborative filtering, and that is, we assume there's an unknown function here, f. that would map a pair of user and object to a rating. and we have observed the sum values of this function. and we want to infer the value of this function for other pairs that don't have that as available here. so this is very similar to other machinery problems where we'd know the values of the function on some training data set. and we hope to predict the values of this function on some test data so this is a function approximation. and how can we pick out the function based on the observed ratings. so this is the setup. now there are many approaches to solving this problem. in fact, this is a very active research area or reason that there are special conferences dedicated to the problem, major conference devoted to the problem. [music",07_lesson-6-7-recommender-systems-collaborative-filtering-part-1
20,https://www.coursera.org/learn/text-retrieval,05_lesson-6-5-recommender-systems-content-based-filtering-part-1.en.txt,text-retrieval/07_week-6/02_week-6-lessons/05_lesson-6-5-recommender-systems-content-based-filtering-part-1.en.txt,"[music] this lecture is about the recommender systems. so far we have talked about a lot of aspects of search engines. we have talked about the problem of search and ranking problem, different methods for ranking, implementation of search engine and how to evaluate a search engine, etc. this is important because we know that web search engines are by far the most important applications of text retrieval. and they are the most useful tools to help people convert big raw text data into a small set of relevant documents. another reason why we spend so many lectures on search engines, is because many techniques used in search engines are actually also very useful for recommender systems, which is the topic of this lecture. and so, overall, the two systems are actually well connected. and there are many techniques that are shared by them. so this is a slide that you have seen before, when we talked about the two different modes of text access. pull and the push. and we mentioned that recommender systems are the main systems to serve users in the push mode, where the systems will take the initiative to recommend the information to the user or pushes information to the user. and this often works well when the user has stable information need in the system has a good. so a recommender system is sometimes called a filtering system and it's because recommending useful items to people is like discarding or filtering out the the useless articles, and so in this sense they are kind of similar. and in all the cases the system must make a binary decision and usually there's a dynamic source of information items, and that you have some knowledge about the users' interest. and then the system would make a decision about whether this item is interesting to the user, and then if it's interesting then the system would recommend the article to the user. so the basic filtering question here is really will this user like this item? will u like item x? and there are two ways to answer this question, if you think about it. and one is look at what items u likes and then we can see if x is actually like those items. the other is to look at who likes x, and we can see if this user looks like a one of those users, or like most of those users. and these strategies can be combined. if we follow the first strategy and look at item similarity in the case of recommending text objects, then we're talking about a content-based filtering or content-based recommendation. if we look at the second strategy, then, it's to compare users and in this case we're user similarity and the technique is often called collaborative filtering. so, let's first look at the content-based filtering system. this is what the system would look like. inside the system, there will be a binary classifier that would have some knowledge about the user's interests, and this is called a user interest profile. it maintains this profile to keep track of all users interests, and then there is a utility function to guide the user to make decision a nice plan utility function in the moment. it helps the system decide where to set the threshold. and then the accepted documents will be those that have passed the threshold according to the classified. there should be also an initialization module that would take a user's input, maybe from a user's specified keywords or chosen category, etc., and this would be to feed into the system with the initiator's profile. there is also typically a learning module that would learn from users' feedback over time. now note that in this case typical users information is stable so the system would have a lot more opportunities to observe the users. if the user has taken a recommended item, has viewed that, and this a signal to indicate that the recommended item may be relevant. if the user discarded it, no, it's not relevant. and so such feedback can be a long term feedback, and can last for a long time. and the system can collect a lot of information about the user's interest and this then can then be used to improve the classify. now what's the criteria for evaluating such a system? how do we know this filtering system actually performs well? now in this case we cannot use the ranking evaluation measures like a map because we can't afford waiting for a lot of documents and then rank the documents to make a decision for the users. and so the system must make a decision in real time in general to decide whether the item is above the threshold or not. so in other words, we're trying to decide on absolute relevance. so in this case, one common user strategy is to use a utility function to evaluate the system. so here, i show linear utility function. that's defined as for example three multiplied the number of good items that you delivered, minus two multiplied by the number of bad items that you delivered. so in other words, we could kind of just treat this as almost in a gambling game. if you delete one good item, let's say you win three dollars, you gain three dollars but if you deliver a bad one you will lose two dollars. and this utility function basically kind of measures how much money you are get by doing this kind of game, right? and so it's clear that if you want to maximize this utility function, this strategy should be delivered as many good articles as possible, and minimize the delivery of bad articles. that's obvious, right? now one interesting question here is how should we set these coefficients? i just showed a three and negative two as possible coefficients. but one can ask the question, are they reasonable? so what do you think? do you think that's a reasonable choice? what about the other choices? so for example, we can have 10 and minus 1, or 1, minus 10. what's the difference? what do you think? how would this utility function affect the systems' threshold of this issue. right, you can think of these two extreme cases. (10, -1) + (1, -10), which one do you think would encourage this system to over do it and which one would encourage this system to be conservative? if you think about it you will see that when we get a bigger award for delivering our good document you incur only a small penalty for delivering a bad one. intuitively, you would be encouraged to deliver more. and you can try to deliver more in hope of getting a good one delivered. and then we'll get a big reward. so on the other hand, if you choose (1,-10), you really don't get such a big prize if you deliver a good document. on the other hand, you will have a big loss if you deliver a bad one. you can imagine that, the system would be very reluctant to deliver a lot of documents. it has to be absolutely sure that it's not. so this utility function has to be designed based on a specific application. the three basic problems in content-based filtering are the following, first, it has to make a filtering decision. so it has to be a binary decision maker, a binary classifier. given a text document and a profile description of the user, it has to say yes or no, whether this document should be deleted or not. so that's a decision module, and it should be an initialization module as you have seen earlier and this will get the system started. and we have to initialize the system based on only very limited text exclusion or very few examples from the user. and the third model is a learning model which you have, has to be able to learn from limited relevance judgements, because we counted them from the user about their preferences on the deliver documents. if we don't deliver document to the user we'll never be able to know whether the user likes it or not. and we had accumulate a lot of documents even then from entire history. all these modules will have to be optimized to maximize the utility. so how can we deal with such a system? and there are many different approaches. here we're going to talk about how to extend a retrieval system, a search engine for information filtering. again, here's why we've spent a lot of time talking about the search engines. because it's actually not very hard to extend the search engine for information filtering. so here's the basic idea for extending a retrieval system for information filtering. first, we can reuse a lot of retrieval techniques to do scoring. right, so we know how to score documents against queries, etc. we're going to match the similarity between profile text description and a document. and then we can use a score threshold for the filtering decision. we do retrieval and then we kind of find the scores of documents and then we'll apply a threshold to see whether the document is passing the threshold or not. and if it's passing the threshold, we're going to say it's relevant and we're going to deliver it to the user. another component that we have to add is, of course, to learn from the history, and we had used is the traditional feedback techniques to learn to improve scoring. and we know rock hill can be using for scoring improvement. and, but we have to develop a new approaches to learn how to accept this. and we need to set it initially and then we have to learn how to update the threshold over time. so here's what the system might look like if we just generalize the vector-space model for filtering problems, right? so you can see the document vector could be fed into a scoring module which already exists in a search engine that implements a vector-space model. and the profile will be treated as a query essentially, and then the profile vector can be matched with the document vector to generate the score. and then this score would be fed into a thresholding module that would say yes or no, and then the evaluation would be based on the utility for the filtering results. if it says yes and then the document would be sent to the user. and then user could give some feedback. the feedback information would be used to both adjust the threshold and to adjust the vector representation. so the vector learning is essentially the same as query modification or feedback in the case of search. the threshold of learning is a new component and that we need to talk a little bit more about. [music",05_lesson-6-5-recommender-systems-content-based-filtering-part-1
21,https://www.coursera.org/learn/text-retrieval,02_lesson-6-2-learning-to-rank-part-2.en.txt,text-retrieval/07_week-6/02_week-6-lessons/02_lesson-6-2-learning-to-rank-part-2.en.txt,"[music] so now let's take a look at the specific method that's based on regression. now, this is one of the many different methods, and in fact, it's one of the simplest methods. and i choose this to explain the idea because it's simple. so in this approach, we simply assume that the relevance of document with respect to a query is related to a linear combination of all the features. here i used xi to denote the feature. so xi of q and d is a feature. and we can have as many features as we would like. and we assume that these features can be combined in a linear manner. and each feature is controlled by a parameter here, and this beta i is a parameter. that's a weighting parameter. a larger value would mean the feature would have a higher weight, and it would contribute more to the scoring function. this specific form of the function actually also involves a transformation of the probability of relevance. so this is the probability of relevance. and we know that the probability of relevance is within the range from 0 to 1. and we could have just assumed that the scoring function is related to this linear combination. so we can do a linear regression. but then, the value of this linear combination could easily go beyond 1. so this transformation here would map the 0 to 1 range to the whole range of real values, you can verify it by yourself. so this allows us then to connect to the probability of variance which is between 0 and 1 to a linear combination of arbitrary features. and if we rewrite this into a probability function, we would get the next one. so on this equation, now we'll have the probability of relevance. and on the right hand side, we'll have this form. now, this form is clearly nonnegative, and it still involves a linear combination of features. and it's also clear that if this value is, this is actually negative of the linear combination in the equation above. if this value here is large, then it would mean this value is small. and therefore, this whole probability would be large. and that's we expect, that basically, it would mean if this combination gives us a high value, then the document's more likely irrelevant. so this is our hypothesis. again, this is not necessarily the best hypothesis, but this is a simple way to connect these features with the probability of relevance. so now we have this combination function. the next task is to estimate the parameters so that the function cache will be applied. but without knowing the beta values, it's harder to apply this function. so let's see how can estimate our beta values. all right, let's take a look at a simple example. in this example, we have three features. one is the bm25 score of the document and the query. one is the pagerank score of the document, which might or might not depend on the query. we might have a topic-sensitive pagerank, that would depend on the query. otherwise, the general pagerank doesn't really depend on the query. and then we have bm25 score on the anchor test of the document. now, these are then the feature values for a particular document query pair. and in this case, the document is d1 and the judgment says that it's relevant. here's another training instance and it's these feature values, but in this case, it's not relevant. this is an oversimplified case where we just have two instances, but it's sufficient to illustrate the point. so what we can do is we use the maximum likelihood estimator to actually estimate the parameters. basically, we're going to predict the relevance status of the document based on the feature values. that is, given that we observed these feature values here. can we predict the relevance here? now, of course, the prediction would be using this function that you see here. and we hypothesize that the probability of relevance is related to features in this way. so we are going to see, for what values of beta we can predict the relevance well. what do we mean by predicting the relevance well? well, we just mean, in the first case, for d1 this expression right here should give high values. in fact, we'll hope this to gave a value close to 1. why? because this is a relevant document. on the other hand, in the second case, for d2, we hope this value will be small, right. why? because it's a non-relevant document. so now let's see how this can be mathematically expressed. and this is similar to expressing the probability of document, only that we are not talking about the probability of words, but talking about the probability of relevance, 1 or 0. so what's the probability of this document being relevant if it has these feature values? well, this is just this expression. we just need to plug in the xi's. so that's what we will get. it's exactly like what we have seen above, only that we replaced these xi's with now specific values. so for example, this 0.7 goes to here and this 0.11 goes to here. and these are different feature values, and we combine them in this particular way. the beta values are still unknown. but this gives us the probability that this document is relevant, if we assume such a model. okay? and we want to maximize this probability, since this is a relevant document. what do we do for the second document? well, we want to compute the probability that the prediction is non-relevant. so this would mean we have to compute 1 minus this expression, since this expression is actually the probability of relevance. so to compute the non-relevance from relevance, we just do 1 minus the probability of relevance. okay? so this whole expression then just is our probability of predicting these two relevance values. one is 1 here, one is 0. and this whole equation is our probability of observing a 1 here and observing a 0 here. of course, this probability depends on the beta values. so then our goal is to adjust the beta values to make this whole thing reach its maximum, make it as large as possible. so that means we're going to compute this. the beta is just the parameter values that would maximize this whole likelihood expression. and what it means is, if you look at the function, is, we're going to choose betas to make this as large as possible and make this also as large as possible, which is equivalent to say, make this part as small as possible. and this is precisely what we want. so once we do the training, now we will know the beta values. so then this function would be well-defined. once beta values are known, both this and this would be completely specified. so for any new query and new document, we can simply compute the features for that pair. and then we just use this formula to generate the ranking score. and this scoring function can be used to rank documents for a particular query. so that's the basic idea of learning to rank. [music",02_lesson-6-2-learning-to-rank-part-2
22,https://www.coursera.org/learn/text-retrieval,04_lesson-6-4-future-of-web-search.en.txt,text-retrieval/07_week-6/02_week-6-lessons/04_lesson-6-4-future-of-web-search.en.txt,"[sound]. this lecture is about the future of web search. in this lecture, we're going to talk about some possible future trends of web search and intelligent information retrieval systems in general. in order to further improve the accuracy of a search engine, it's important that to consider special cases of information need. so one particular trend could be to have more and more specialized than customized search engines, and they can be called vertical search engines. these vertical search engines can be expected to be more effective than the current general search engines because they could assume that users are a special group of users that might have a common information need, and then the search engine can be customized with this ser, so, such users. and because of the customization, it's also possible to do personalization. so the search can be personalized, because we have a better understanding of the users. because of the restrictions with domain, we also have some advantages in handling the documents, because we can have better understanding of documents. for example, particular words may not be ambiguous in such a domain. so we can bypass the problem of ambiguity. another trend we can expect to see, is the search engine will be able to learn over time. it's like a lifetime learning or lifelong learning, and this is, of course, very attractive because that means the search engine will self-improve itself. as more people are using it, the search engine will become better and better, and this is already happening, because the search engines can learn from the [inaudible] of feedback. more users use it, and the quality of the search engine allows for the popular queries that are typed in by many users allow it to become better, so this is sort of another feature that we will see. the third trend might be to the integration of bottles of information access. so search, navigation, and recommendation or filtering might be combined to form a full-fledged information management system. and in the beginning of this course, we talked about push versus pull. these are different modes of information access, but these modes can be combined. and similarly, in the pull mode, querying and the browsing could also be combined. and in fact we're doing that basically, today, is the [inaudible] search endings. we are querying, sometimes browsing, clicking on links. sometimes we've got some information recommended. although most of the cases the information recommended is because of advertising. but in the future, you can imagine seamlessly integrate the system with multi-mode for information access, and that would be convenient for people. another trend is that we might see systems that try to go beyond the searches to support the user tasks. after all, the reason why people want to search is to solve a problem or to make a decision or perform a task. for example consumers might search for opinions about products in order to purchase a product, choose a good product by, so in this case it would be beneficial to support the whole workflow of purchasing a product, or choosing a product. in this era, after the common search engines already provide a good support. for example, you can sometimes look at the reviews, and then if you want to buy it, you can just click on the button to go the shopping site and directly get it done. but it does not provide a, a good task support for many other tasks. for example, for researchers, you might want to find the realm in the literature or site of the literature. and then, there's no, not much support for finishing a task such as writing a paper. so, in general, i think, there are many opportunities in the wait. so in the following few slides, i'll be talking a little bit more about some specific ideas or thoughts that hopefully, can help you in imagining new application possibilities. some of them might be already relevant to what you are currently working on. in general, we can think about any intelligent system, especially intelligent information system, as we specified by these these three nodes. and so if we connect these three into a triangle, then we'll able to specify an information system. and i call this data-user-service triangle. so basically the three questions you ask would be who are you serving and what kind of data are you are managing and what kind of service you provide. right there, this would help us basically specify in your system. and there are many different ways to connect them depending on how you connect them, you will have a different kind of systems. so let me give you some examples. on the top, you can see different kinds of users. on the left side, you can see different types of data or information, and on the bottom, you can see different service functions. now imagine you can connect all these in different ways. so, for example, you can connect everyone with web pages, and the support search and browsing, what do you get? well, that's web search, right? what if we connect uiuc employees with organization documents or enterprise documents to support the search and browsing, but that's enterprise search. if you connect the scientist with literature information to provide all kinds of service, including search, browsing, or alert of new random documents or mining analyzing research trends, or provide the task with support or decision support. for example, we might be, might be able to provide a support for automatically generating related work section for a research paper, and this would be closer to task support. right? so then we can imagine this would be a literature assistant. if we connect the online shoppers with blog articles or product reviews then we can help these people to improve shopping experience. so we can provide, for example data mining capabilities to analyze the reviews, to compare products, compare sentiment of products and to provide task support or decision support to have them choose what product to buy. or we can connect customer service people with emails from the customers, and, and we can imagine a system that can provide a analysis of these emails to find that the major complaints of the customers. we can imagine a system we could provide task support by automatically generating a response to a customer email. maybe intelligently attach also a promotion message if appropriate, if they detect that that's a positive message, not a complaint, and then you might take this opportunity to attach some promotion information. whereas if it's a complaint, then you might be able to automatically generate some generic response first and tell the customer that he or she can expect a detailed response later, etc. all of these are trying to help people to improve the productivity. so this shows that the opportunities are really a lot. it's just only restricted by our imagination. so this picture shows the trend of the technology, and also, it characterizes the, intelligent information system in three angles. you can see in the center, there's a triangle that connects keyword queries to search a bag of words representation. that means the current search engines basically provides search support to users and mostly model users based on keyword queries and sees the data through bag of words representation. so it's a very simple approximation of the actual information in the documents. but that's what the current system does. it connects these three nodes in such a simple way, or it only provides a basic search function and doesn't really understand the user, and it doesn't really understand that much information in the documents. now, i showed some trends to push each node toward a more advanced function. so think about the user node here, right? so we can go beyond the keyword queries, look at the user search history, and then further model the user completely to understand the, the user's task environment, task need context or other information. okay, so this is pushing for personalization and complete user model. and this is a major direction in research in, in order to build intelligent information systems. on the document side, we can also see, we can go beyond bag of words implementation to have entity relation representation. this means we'll recognize people's names, their relations, locations, etc. and this is already feasible with today's natural processing technique. and google is the reason the initiative on the knowledge graph. if you haven't heard of it, it is a good step toward this direction. and once we can get to that level without initiating robust manner at larger scale, it can enable the search engine to provide a much better service. in the future we would like to have knowledge representation where we can add perhaps inference rules, and then the search engine would become more intelligent. so this calls for large-scale semantic analysis, and perhaps this is more feasible for vertical search engines. it's easier to make progress in the particular domain. now on the service side, we see we need to go beyond the search of support information access in general. so search is only one way to get access to information as well recommender systems and push and pull so different ways to get access to random information. but going beyond access, we also need to help people digest the information once the information is found, and this step has to do with analysis of information or data mining. we have to find patterns or convert the text information into real knowledge that can be used in application or actionable knowledge that can be used for decision making. and furthermore the knowledge will be used to help a user to improve productivity in finishing a task, for example, a decision-making task. right, so this is a trend. and, and, and so basically, in this dimension, we anticipate in the future intelligent information systems will provide intelligent and interactive task support. now i should also emphasize interactive here, because it's important to optimize the combined intelligence of the users and the system. so we, we can get some help from users in some natural way. and we don't have to assume the system has to do everything when the human, user, and the machine can collaborate in an intelligent way, an efficient way, then the combined intelligence will be high and in general, we can minimize the user's overall effort in solving problem. so this is the big picture of future intelligent information systems, and this hopefully can provide us with some insights about how to make further innovations on top of what we handled today. [music",04_lesson-6-4-future-of-web-search
23,https://www.coursera.org/learn/text-retrieval,08_lesson-6-8-recommender-systems-collaborative-filtering-part-2.en.txt,text-retrieval/07_week-6/02_week-6-lessons/08_lesson-6-8-recommender-systems-collaborative-filtering-part-2.en.txt,"[sound] and here we're going to talk about basic strategy. and that would be based on similarity of users and then predicting the rating of and object by an active user using the ratings of similar users to this active user. this is called a memory based approach because it's a little bit similar to storing all the user information and when we are considering a particular user we going to try to retrieve the rating users or the similar users to this user case. and then try to use this information about those users to predict the preference of this user. so here is the general idea and we use some notations here, so x sub i j denotes the rating of object o j by user u i and n sub i is average rating of object by this user. so this n i is needed because we would like to normalize the ratings of objects by this user. so how do you do normalization? well, we're going to just subtract the average rating from all the ratings. now, this is to normalize these ratings so that the ratings from different users would be comparable. because some users might be more generous, and they generally give more high ratings but some others might be more critical so their ratings cannot be directly compared with each other or aggregate them together. so we need to do this normalization. another prediction of the rating on the item by another user or active user, u sub a here can be based on the average ratings of similar users. so the user u sub a is the user that we are interested in recommending items to. and we now are interested in recommending this o sub j. so we're interested in knowing how likely this user will like this object. how do we know that? where the idea here is to look at whether similar users to this user have liked this object. so mathematically this is to say well the predicted the rating of this user on this app object, user a on object o j is basically combination of the normalized ratings of different users, and in fact here, we're taking a sum over all the users. but not all users contribute equally to the average, and this is conjured by the weights. so this weight controls the inference of the user on the prediction. and of course, naturally this weight should be related to the similarity between ua and this particular user, ui. the more similar they are, then the more contribution user ui can make in predicting the preference of ua. so, the formula is extremely simple. you can see, it's a sum of all the possible users. and inside the sum we have their ratings, well, their normalized ratings as i just explained. the ratings need to be normalized in order to be comparable with each other. and then these ratings are weighted by their similarity. so you can imagine w of a and i is just a similarity of user a and user i. now what's k here? well k is simply a normalizer. it's just one over the sum of all the weights, over all the users. so this means, basically, if you consider the weight here together with k, and we have coefficients of weight that will sum to one for all the users. and it's just a normalization strategy so that you get this predictor rating in the same range as these ratings that we used to make the prediction. right? so this is basically the main idea of memory-based approaches for collaborative filtering. once we make this prediction, we also would like to map back through the rating that the user would actually make, and this is to further add the mean rating or average rating of this user u sub a to the predicted value. this would recover a meaningful rating for this user. so if this user is generous, then the average it would be is somewhat high, and when we add that the rating will be adjusted to our relatively high rate. now when you recommend an item to a user this actually doesn't really matter, because you are interested in basically the normalized reading, that's more meaningful. but when they evaluate these rather than filter approaches, they typically assume that actual ratings of the user on these objects to be unknown and then you do the prediction and then you compare the predicted ratings with their actual ratings. so, you do have access to the actual ratings. but, then you pretend that you don't know, and then you compare your systems predictions with the actual ratings. in that case, obviously, the systems prediction would be adjusted to match the actual ratings of the user and this is what's happening here basically. okay so this is the memory based approach. now, of course, if you look at the formula, if you want to write the program to implement it, you still face the problem of determining what is this w function? once you know the w function, then the formula is very easy to implement. so, indeed, there are many different ways to compute this function or this weight, w, and specific approaches generally differ in how this is computed. so here are some possibilities and you can imagine there are many other possibilities. one popular approach is we use the pearson correlation coefficient. this would be a sum over commonly rated items. and the formula is a standard appears in correlation coefficient formula as shown here. so this basically measures whether the two users tended to all give higher ratings to similar items or lower ratings to similar items. another measure is the cosine measure, and this is going to treat the rating vectors as vectors in the vector space. and then, we're going to measure the angle and compute the cosine of the angle of the two vectors. and this measure has been using the vector space model for retrieval, as well. so as you can imagine there are just as many different ways of doing that. in all these cases, note that the user's similarity is based on their preferences on items and we did not actually use any content information of these items. it didn't matter these items are, they can be movies, they can be books, they can be products, they can be text documents which has been cabled the content and so this allows such approach to be applied to a wide range of problems. now in some newer approaches of course, we would like to use more information about the user. clearly, we know more about the user, not just these preferences on these items. so in the actual filtering system, is in collaborative filtering, we could also combine that with content based filtering. we could use more context information, and those are all interesting approaches that people are just starting, and there are new approaches proposed. but, this memory based approach has been shown to work reasonably well, and it's easy to implement in practical applications this could be a starting point to see if the strategy works well for your application. so, there are some obvious ways to also improve this approach and mainly we would like to improve the user similarity measure. and there are some practical issues we deal with here as well. so for example, there will be a lot of missing values. what do you do with them? well, you can set them to default values or the average ratings of the user. and that would be a simple solution. but there are advanced approaches that can actually try to predict those missing values, and then use predictive values to improve the similarity. so in fact that the memory based apology can predict those missing values, right? so you get you have iterative approach where you first use some preliminary prediction and then you can use the predictive values to further improve the similarity function. so this is a heuristic way to solve the problem. and the strategy obviously would affect the performance of claritative filtering just like any other heuristics would improve these similarity functions. another idea which is actually very similar to the idea of idf that we have seen in text search is called a inverse user frequency or iuf. now here the idea is to look at where the two users share similar ratings. if the item is a popular item that has been viewed by many people and seen [inaudible] to people interested in this item may not be so interesting but if it's a rare item, it has not been viewed by many users. but these two users deal with this item and they give similar ratings. and, that says more about their similarity. it's kind of to emphasize more on similarity on items that are not viewed by many users. [music",08_lesson-6-8-recommender-systems-collaborative-filtering-part-2
24,https://www.coursera.org/learn/text-retrieval,03_lesson-4-3-query-likelihood-retrieval-function.en.txt,text-retrieval/05_week-4/02_week-4-lessons/03_lesson-4-3-query-likelihood-retrieval-function.en.txt,"[sound] this lecture is about query likelihood, probabilistic retrieval model. in this lecture, we continue the discussion of probabilistic retrieval model. in particular, we're going to talk about the query light holder retrieval function. in the query light holder retrieval model, our idea is model. how like their user who likes a document with pose a particular query? so in this case, you can imagine if a user likes this particular document about a presidential campaign news. now we assume, the user would use this a document as a basis to impose a query to try and retrieve this document. so again, imagine use a process that works as follows. where we assume that the query is generated by assembling words from the document. so for example, a user might pick a word like presidential, from this document and then use this as a query word. and then the user would pick another word like campaign, and that would be the second query word. now this of course is an assumption that we have made about how a user would pose a query. whether a user actually followed this process may be a different question, but this assumption has allowed us to formerly characterize this conditional probability. and this allows us to also not rely on the big table that i showed you earlier to use empirical data to estimate this probability. and this is why we can use this idea then to further derive retrieval function that we can implement with the program language. so as you see the assumption that we made here is each query word is independent of the sample. and also each word is basically obtained from the document. so now let's see how this works exactly. well, since we are completing a query likelihood then the probability here is just the probability of this particular query, which is a sequence of words. and we make the assumption that each word is generated independently. so as a result, the probability of the query is just a product of the probability of each query word. now how do we compute the probability of each query word? well, based on the assumption that a word is picked from the document that the user has in mind. now we know the probability of each word is just the relative frequency of each word in the document. so for example, the probability of presidential given the document. would be just the count of presidential document divided by the total number of words in the document or document s. so with these assumptions we now have actually a simple formula for retrieval. we can use this to rank our documents. so does this model work? let's take a look. here are some example documents that you have seen before. suppose now the query is presidential campaign and we see the formula here on the top. so how do we score this document? well, it's very simple. we just count how many times do we have seen presidential or how many times do we have seen campaigns, etc. and we see here 44, and we've seen presidential twice. so that's 2 over the length of document 4 multiplied by 1 over the length of document 4 for the probability of campaign. and similarly, we can get probabilities for the other two documents. now if you look at these numbers or these formulas for scoring all these documents, it seems to make sense. because if we assume d3 and d4 have about the same length, then looks like a nominal rank d4 above d3 and which is above d2. and as we would expect, looks like it did captures a tf query state, and so this seems to work well. however, if we try a different query like this one, presidential campaign update then we might see a problem. well what problem? well think about the update. now none of these documents has mentioned update. so according to our assumption that a user would pick a word from a document to generate a query, then the probability of obtaining the word update would be what? would be 0. so that causes a problem, because it would cause all these documents to have zero probability of generating this query. now why it's fine to have zero probability for d2, which is non-relevant? it's not okay to have 0 for d3 and d4 because now we no longer can distinguish them. what's worse? we can't even distinguish them from d2. so that's obviously not desirable. now when a [inaudible] has such result, we should think about what has caused this problem? so we have to examine what assumptions have been made, as we derive this ranking function. now is you examine those assumptions carefully you will realize, what has caused this problem? so take a moment to think about it. what do you think is the reason why update has zero probability and how do we fix it? so if you think about this from the moment you realize that that's because we have made an assumption that every query word must be drawn from the document in the user's mind. so in order to fix this, we have to assume that the user could have drawn a word not necessarily from the document. so that's the improved model. an improvement here is to say that, well instead of drawing a word from the document, let's imagine that the user would actually draw a word from a document model. and so i show a model here. and we assume that this document is generated using this unigram language model. now, this model doesn't necessarily assign zero probability for update in fact, we can assume this model does not assign zero probability for any word. now if we're thinking this way then the generation process is a little bit different. now the user has this model in mind instead of this particular document. although the model has to be estimated based on the document. so the user can again generate the query using a singular process. namely, pick a word for example, presidential and another word campaign. now the difference is that this time we can also pick a word like update, even though update doesn't occur in the document to potentially generate a query word like update. so that a query was updated 1 times 0 probabilities. so this would fix our problem. and it's also reasonable because when our thinking of what the user is looking for in a more general way, that is unique language model instead of fixed document. so how do we compute this query likelihood? if we make this sum wide involved two steps. the first one is compute this model, and we call it document language model here. for example, i've shown two pulse models here, it's major based on two documents. and then given a query like a data mining algorithms the thinking is that we'll just compute the likelihood of this query. and by making independence assumptions we could then have this probability as a product of the probability of each query word. we do this for both documents, and then we can score these two documents and then rank them. so that's the basic idea of this query likelihood retrieval function. so more generally this ranking function would look like in the following. here we assume that the query has n words, w1 through wn, and then the scoring function. the ranking function is the probability that we observe this query, given that the user is thinking of this document. and this is assume it will be product of probabilities of all individual words. this is based on independent assumption. now we actually often score the document before this query by using log of the query likelihood as shown on the second line. now we do this to avoid having a lot of small probabilities, mean multiply together. and this could cause under flow and we might loose the precision by transforming the value in our algorithm function. we maintain the order of these documents yet we can avoid the under flow problem. and so if we take longer than transformation of course, the product would become a sum as you on the second line here. so the sum of all the query words inside of the sum that is one of the probability of this word given by the document. and then we can further rewrite the sum to a different form. so in the first sum here, in this sum, we have it over all the query words and query word. and in this sum we have a sum of all the possible words. but we put a counter here of each word in the query. essentially we are only considering the words in the query, because if a word is not in the query, the count will be 0. so we're still considering only these n words. but we're using a different form as if we were going to take a sample of all the words in the vocabulary. and of course, a word might occur multiple times in the query. that's why we have a count here. and then this part is log of the probability of the word, given by the document language model. so you can see in this retrieval function, we actually know the count of the word in the query. so the only thing that we don't know is this document language model. therefore, we have converted the retrieval problem include the problem of estimating this document language model. so that we can compute the probability of each query word given by this document. and different estimation methods would lead to different ranking functions. this is just like a different way to place document in the vector space which leads to a different ranking function in the vector space model. here different ways to estimate will lead to a different ranking function for query likelihood. [music",03_lesson-4-3-query-likelihood-retrieval-function
25,https://www.coursera.org/learn/text-retrieval,02_lesson-4-2-statistical-language-model.en.txt,text-retrieval/05_week-4/02_week-4-lessons/02_lesson-4-2-statistical-language-model.en.txt,"[sound] this lecture is about the statistical language model. in this lecture, we're going to give an introduction to statistical language model. this has to do with how do you model text data with probabilistic models. so it's related to how we model query based on a document. we're going to talk about what is a language model. and then we're going to talk about the simplest language model called the unigram language model, which also happens to be the most useful model for text retrieval. and finally, what this class will use is a language model. what is a language model? well, it's just a probability distribution over word sequences. so here, i'll show one. this model gives the sequence today is wednesday a probability of 0.001. it give today wednesday is a very, very small probability because it's non-grammatical. you can see the probabilities given to these sentences or sequences of words can vary a lot depending on the model. therefore, it's clearly context dependent. in ordinary conversation, probably today is wednesday is most popular among these sentences. imagine in the context of discussing apply the math, maybe the eigenvalue is positive, would have a higher probability. this means it can be used to represent the topic of a text. the model can also be regarded as a probabilistic mechanism for generating text. and this is why it's also often called a generating model. so what does that mean? we can imagine this is a mechanism that's visualised here as a stochastic system that can generate sequences of words. so, we can ask for a sequence, and it's to send for a sequence from the device if you want, and it might generate, for example, today is wednesday, but it could have generated any other sequences. so for example, there are many possibilities, right? so in this sense, we can view our data as basically a sample observed from such a generating model. so, why is such a model useful? well, it's mainly because it can quantify the uncertainties in natural language. where do uncertainties come from? well, one source is simply the ambiguity in natural language that we discussed earlier in the lecture. another source is because we don't have complete understanding, we lack all the knowledge to understand the language. in that case, there will be uncertainties as well. so let me show some examples of questions that we can answer with a language model that would have interesting applications in different ways. given that we see john and feels, how likely will we see happy as opposed to habit as the next word in a sequence of words? now, obviously, this would be very useful for speech recognition because happy and habit would have similar acoustic sound, acoustic signals. but, if we look at the language model, we know that john feels happy would be far more likely than john feels habit. another example, given that we observe baseball three times and game once in a news article, how likely is it about sports? this obviously is related to text categorization and information retrieval. also, given that a user is interested in sports news, how likely would the user use baseball in a query? now, this is clearly related to the query likelihood that we discussed in the previous lecture. so now, let's look at the simplest language model, called a unigram language model. in such a case, we assume that we generate a text by generating each word independently. so this means the probability of a sequence of words would be then the product of the probability of each word. now normally, they're not independent, right? so if you have single word in like a language, that would make it far more likely to observe model than if you haven't seen the language. so this assumption is not necessarily true, but we make this assumption to simplify the model. so now the model has precisely n parameters, where n is vocabulary size. we have one probability for each word, and all these probabilities must sum to 1. so strictly speaking, we actually have n-1 parameters. as i said, text can then be assumed to be assembled, drawn from this word distribution. so for example, now we can ask the device or the model to stochastically generate the words for us, instead of sequences. so instead of giving a whole sequence, like today is wednesday, it now gives us just one word. and we can get all kinds of words. and we can assemble these words in a sequence. so that will still allow you to compute the probability of today is wednesday as the product of the three probabilities. as you can see, even though we have not asked the model to generate the sequences, it actually allows us to compute the probability for all the sequences, but this model now only needs n parameters to characterize. that means if we specify all the probabilities for all the words, then the model's behavior is completely specified. whereas if we don't make this assumption, we would have to specify probabilities for all kinds of combinations of words in sequences. so by making this assumption, it makes it much easier to estimate these parameters. so let's see a specific example here. here i show two unigram language models with some probabilities. and these are high probability words that are shown on top. the first one clearly suggests a topic of text mining, because the high probability was all related to this topic. the second one is more related to health. now we can ask the question, how likely were observe a particular text from each of these two models? now suppose we sample words to form a document. let's say we take the first distribution, would you like to sample words? what words do you think would be generated while making a text or maybe mining maybe another word? even food, which has a very small probability, might still be able to show up. but in general, high probability words will likely show up more often. so we can imagine what general text of that looks like in text mining. in fact, with small probability, you might be able to actually generate the actual text mining paper. now, it will actually be meaningful, although the probability will be very, very small. in an extreme case, you might imagine we might be able to generate a text mining paper that would be accepted by a major conference. and in that case, the probability would be even smaller. but it's a non-zero probability, if we assume none of the words have non-zero probability. similarly from the second topic, we can imagine we can generate a food nutrition paper. that doesn't mean we cannot generate this paper from text mining distribution. we can, but the probability would be very, very small, maybe smaller than even generating a paper that can be accepted by a major conference on text mining. so the point is that the keeping distribution, we can talk about the probability of observing a certain kind of text. some texts will have higher probabilities than others. now let's look at the problem in a different way. suppose we now have available a particular document. in this case, many of the abstract or the text mining table, and we see these word counts here. the total number of words is 100. now the question you ask here is an estimation question. we can ask the question which model, which one of these distribution has been used to generate this text, assuming that the text has been generated by assembling words from the distribution. so what would be your guess? what we have to decide are what probabilities text mining, etc., would have. suppose the view for a second, and try to think about your best guess. if you're like a lot of people, you would have guessed that well, my best guess is text has a probability of 10 out of 100 because i've seen text 10 times, and there are in total 100 words. so we simply normalize these counts. and that's in fact the word justified, and your intuition is consistent with mathematical derivation. and this is called the maximum likelihood estimator. in this estimator, we assume that the parameter settings of those that would give our observe the data the maximum probability. that means if we change these probabilities, then the probability of observing the particular text data would be somewhat smaller. so you can see, this has a very simple formula. basically, we just need to look at the count of a word in a document, and then divide it by the total number of words in the document or document lens. normalize the frequency. a consequence of this is, of course, we're going to assign zero probabilities to unseen words. if we have an observed word, there will be no incentive to assign a non-zero probability using this approach. why? because that would take away probability mass for these observed words. and that obviously wouldn't maximize the probability of this particular observed text data. but one has still question whether this is our best estimate. well, the answer depends on what kind of model you want to find, right? this estimator gives a best model based on this particular data. but if you are interested in a model that can explain the content of the full paper for this abstract, then you might have a second thought, right? so for thing, there should be other words in the body of that article, so they should not have zero probabilities, even though they're not observed in the abstract. so we're going to cover this a little bit more later in this class in the query likelihood model. so let's take a look at some possible uses of these language models. one use is simply to use it to represent the topics. so here i show some general english background texts. we can use this text to estimate a language model, and the model might look like this. right, so on the top, we have those all common words, the, a, is, we, etc., and then we'll see some common words like these, and then some very, very rare words in the bottom. this is a background language model. it represents the frequency of words in english in general. this is the background model. now let's look at another text, maybe this time, we'll look at the computer science research papers. so we have a collection of computer science research papers, we do as mentioned again, we can just use the maximum likelihood estimator, where we simply normalize the frequencies. now in this case, we'll get the distribution that looks like this. on the top, it looks similar because these words occur everywhere, they are very common. but as we go down, we'll see words that are more related to computer science, computer software, text, etc. and so although here, we might also see these words, for example, computer, but we can imagine the probability here is much smaller than the probability here. and we will see many other words here that would be more common in general english. so you can see this distribution characterizes a topic of the corresponding text. we can look at even the smaller text. so in this case, let's look at the text mining paper. now if we do the same, we have another distribution, again the can be expected to occur in the top. the sooner we see text, mining, association, clustering, these words have relatively high probabilities. in contrast, in this distribution, the text has a relatively small probability. so this means, again, based on different text data, we can have a different model, and the model captures the topic. so we call this document the language model, and we call this collection language model. and later, you will see how they're used in the retrieval function. but now, let's look at another use of this model. can we statistically find what words are semantically related to computer? now how do we find such words? well, our first thought is that let's take a look at the text that match computer. so we can take a look at all the documents that contain the word computer. let's build a language model. we can see what words we see there. well, not surprisingly, we see these common words on top as we always do. so in this case, this language model gives us the conditional probability of seeing the word in the context of computer. and these common words will naturally have high probabilities. but we also see the computer itself and software will have relatively high probabilities. but if we just use this model, we cannot just say all these words are semantically related to computer. so ultimately, what we'd like to get rid of is these common words. how can we do that? it turns out that it's possible to use language model to do that. but i suggest you think about that. so how can we know what words are very common, so that we want to kind of get rid of them? what model will tell us that? well, maybe you can think about that. so the background language model precisely tells us this information. it tells us what was our common in general. so if we use this background model, we would know that these words are common words in general. so it's not surprising to observe them in the context of computer. whereas computer has a very small probability in general, so it's very surprising that we have seen computer with this probability, and the same is true for software. so then we can use these two models to somehow figure out the words that are related to computer. for example, we can simply take the ratio of these group probabilities and normalize the topic of language model by the probability of the word in the background language model. so if we do that, we take the ratio, we'll see that then on the top, computer is ranked, and then followed by software, program, all these words related to computer. because they occur very frequently in the context of computer, but not frequently in the whole collection, whereas these common words will not have a high probability. in fact, they have a ratio about 1 down there because they are not really related to computer. by taking the sample of text that contains the computer, we don't really see more occurrences of that than in general. so this shows that even with these simple language models, we can do some limited analysis of semantics. so in this lecture, we talked about language model, which is basically a probability distribution over text. we talked about the simplest language model called unigram language model, which is also just a word distribution. we talked about the two uses of a language model. one is we represent the topic in a document, in a collection, or in general. the other is we discover word associations. in the next lecture, we're going to talk about how language model can be used to design a retrieval function. here are two additional readings. the first is a textbook on statistical natural language processing. the second is an article that has a survey of statistical language models with a lot of pointers to research work. [music",02_lesson-4-2-statistical-language-model
26,https://www.coursera.org/learn/text-retrieval,07_lesson-4-7-smoothing-methods-part-2.en.txt,text-retrieval/05_week-4/02_week-4-lessons/07_lesson-4-7-smoothing-methods-part-2.en.txt,"[sound] so let's plug in these model masses into the ranking function to see what we will get, okay? this is a general smoothing. so a general ranking function for smoothing with subtraction and you have seen this before. and now we have a very specific smoothing method, the jm smoothing method. so now let's see what what's a value for office of d here. and what's the value for p sub c here? right, so we may need to decide this in order to figure out the exact form of the ranking function. and we also need to figure out of course alpha. so let's see. well this ratio is basically this, right, so, here, this is the probability of c board on the top, and this is the probability of unseen war or, in other words basically 11 times basically the alpha here, this, so it's easy to see that. this can be then rewritten as this. very simple. so we can plug this into here. and then here, what's the value for alpha? what do you think? so it would be just lambda, right? and what would happen if we plug in this value here, if this is lambda. what can we say about this? does it depend on the document? no, so it can be ignored. right? so we'll end up having this ranking function shown here. and in this case you can easy to see, this a precisely a vector space model because this part is a sum over all the matched query terms, this is an element of the query map. what do you think is a element of the document up there? well it's this, right. so that's our document left element. and let's further examine what's inside of this logarithm. well one plus this. so it's going to be nonnegative, this log of this, it's going to be at least 1, right? and these, this is a parameter, so lambda is parameter. and let's look at this. now this is a tf. now we see very clearly this tf weighting here. and the larger the count is, the higher the weighting will be. we also see idf weighting, which is given by this. and we see docking the lan's relationship here. so all these heuristics are captured in this formula. what's interesting that we kind of have got this weighting function automatically by making various assumptions. whereas in the vector space model, we had to go through those heuristic design in order to get this. and in this case note that there's a specific form. and when you see whether this form actually makes sense. all right so what do you think is the denominator here, hm? this is a math of document. total number of words, multiplied by the probability of the word given by the collection, right? so this actually can be interpreted as expected account over word. if we're going to draw, a word, from the connection that we model. and, we're going to draw as many as the number of words in the document. if you do that, the expected account of a word, w, would be precisely given by this denominator. so, this ratio basically, is comparing the actual count, here. the actual count of the word in the document with expected count given by this product if the word is in fact following the distribution in the clutch this. and if this counter is larger than the expected counter in this part, this ratio would be larger than one. so that's actually a very interesting interpretation, right? it's very natural and intuitive, it makes a lot of sense. and this is one advantage of using this kind of probabilistic reasoning where we have made explicit assumptions. and, we know precisely why we have a logarithm here. and, why we have these probabilities here. and, we also have a formula that intuitively makes a lot of sense and does tf-idf weighting and documenting and some others. let's look at the, the dirichlet prior smoothing. it's very similar to the case of jm smoothing. in this case, the smoothing parameter is mu and that's different from lambda that we saw before. but the format looks very similar. the form of the function looks very similar. so we still have linear operation here. and when we compute this ratio, one will find that is that the ratio is equal to this. and what's interesting here is that we are doing another comparison here now. we're comparing the actual count. which is the expected account of the world if we sampled meal worlds according to the collection world probability. so note that it's interesting we don't even see docking the lens here and lighter in the jms model. all right so this of course should be plugged into this part. so you might wonder, so where is docking lens. interestingly the docking lens is here in alpha sub d so this would be plugged into this part. as a result what we get is the following function here and this is again a sum over all the match query words. and we're against the queer, the query, time frequency here. and you can interpret this as the element of a document vector, but this is no longer a single dot product, right? because we have this part, i know that n is the name of the query, right? so that just means if we score this function, we have to take a sum over all the query words, and then do some adjustment of the score based on the document. but it's still, it's still clear that it does documents lens modulation because this lens is in the denominator so a longer document will have a lower weight here. and we can also see it has tf here and now idf. only that this time the form of the formula is different from the previous one in jms one. but intuitively it still implements tfidf waiting and document lens rendition again, the form of the function is dictated by the probabilistic reasoning and assumptions that we have made. now there are also disadvantages of this approach. and that is, there's no guarantee that there's such a form of the formula will actually work well. so if we look about at this geo function, all those tf-idf waiting and document lens rendition for example it's unclear whether we have sub-linear transformation. unfortunately we can see here there is a logarithm function here. so we do have also the, so it's here right? so we do have the sublinear transformation, but we do not intentionally do that. that means there's no guarantee that we will end up in this, in this way. suppose we don't have logarithm, then there's no sub-linear transformation. as we discussed before, perhaps the formula is not going to work so well. so that's an example of the gap between a formal model like this and the relevance that we have to model, which is really a subject motion that is tied to users. so it doesn't mean we cannot fix this. for example, imagine if we did not have this logarithm, right? so we can take a risk and we're going to add one, or we can even add double logarithm. but then, it would mean that the function is no longer a proper risk model. so the consequence of the modification is no longer as predictable as what we have been doing now. so, that's also why, for example, pm45 remains very competitive and still, open channel how to use public risk models as they arrive, better model than the pm25. in particular how do we use query like how to derive a model and that would work consistently better than dm 25. currently we still cannot do that. still interesting open question. so to summarize this part, we've talked about the two smoothing methods. jelinek-mercer which is doing the fixed coefficient linear interpolation. dirichlet prior this is what add a pseudo counts to every word and is doing adaptive interpolation in that the coefficient would be larger for shorter documents. in most cases we can see, by using these smoothing methods, we will be able to reach a retrieval function where the assumptions are clearly articulate. so they are less heuristic. explaining the results also show that these, retrieval functions. also are very effective and they are comparable to bm 25 or pm lens adultation. so this is a major advantage of probably smaller where we don't have to do a lot of heuristic design. yet in the end that we naturally implemented tf-idf weighting and doc length normalization. each of these functions also has precise ones smoothing parameter. in this case of course we still need to set this smoothing parameter. there are also methods that can be used to estimate these parameters. so overall, this shows by using a probabilistic model, we follow very different strategies then the vector space model. yet, in the end, we end up uh,with some retrievable functions that look very similar to the vector space model. with some advantages in having assumptions clearly stated. and then, the form dictated by a probabilistic model. now, this also concludes our discussion of the query likelihood probabilistic model. and let's recall what assumptions we have made in order to derive the functions that we have seen in this lecture. well we basically have made four assumptions that i listed here. the first assumption is that the relevance can be modeled by the query likelihood. and the second assumption with med is, are query words are generated independently that allows us to decompose the probability of the whole query into a product of probabilities of old words in the query. and then, the third assumption that we have made is, if a word is not seen, the document or in the late, its probability proportional to its probability in the collection. that's a smoothing with a collection ama model. and finally, we made one of these two assumptions about the smoothing. so we either used jm smoothing or dirichlet prior smoothing. if we make these four assumptions then we have no choice but to take the form of the retrieval function that we have seen earlier. fortunately the function has a nice property in that it implements tf-idf weighting and document machine and these functions also work very well. so in that sense, these functions are less heuristic compared with the vector space model. and there are many extensions of this, this basic model and you can find the discussion of them in the reference at the end of this lecture. [music",07_lesson-4-7-smoothing-methods-part-2
27,https://www.coursera.org/learn/text-retrieval,05_lesson-4-5-statistical-language-model-part-2.en.txt,text-retrieval/05_week-4/02_week-4-lessons/05_lesson-4-5-statistical-language-model-part-2.en.txt,"[sound] so i showed you how we rewrite the query like holder which is a function into a form that looks like the formula of this slide after if we make the assumption about the smoothing, the language model based on the collection language model. now if you look at this rewriting, it will actually give us two benefits. the first benefit is it helps us better understand this ranking function. in particular, we're going to show that from this formula we can see smoothing with the collection language model would give us something like a tf-idf weighting and length normalization. the second benefit is that it also allows us to compute the query like holder more efficiently. in particular we see that the main part of the formula is a sum over the match of the query terms. so this is much better than if we take a sum over all the words. after we smooth the document the damage model we essentially have non zero problem for all the words. so this new form of the formula is much easier to score or to compute. it's also interesting to note that the last term here is actually independent of the document. since our goal is to rank the documents for the same query we can ignore this term for ranking. because it's going to be the same for all the documents. ignoring it wouldn't affect the order of the documents. inside the sum, we also see that each matched query term would contribute a weight. and this weight actually is very interesting because it looks like a tf-idf weighting. first we can already see it has a frequency of the word in a query just like in the vector space model. when we take a thought product, we see the word frequency in the query to show up in such a sum. and so naturally this part would correspond between the vector element from the documented vector. and here indeed we can see it actually encodes a weight that has similar in factor to tf-idf weight. i'll let you examine it, can you see it? can you see which part is capturing tf? and which part is a capturing idf weighting? so if want you can pause the video to think more about it. so have you noticed that this p sub seen is related to the term frequency in the sense that if a word occurs very frequently in the document, then the s made through probability here will tend to be larger. so this means this term is really doing something like a tf weight. now have you also noticed that this term in the denominator is actually achieving the factor of idf? why, because this is the popularity of the term in a collection. but it's in the denominator, so if the probability in the collection is larger then the weight is actually smaller. and this means a popular term. we actually have a smaller weight and this is precisely what idf weighting is doing. only that we now have a different form of tf and idf. remember idf has a logarithm of documented frequency. but here we have something different. but intuitively it achieves a similar effect. interestingly, we also have something related to the length of libation. again, can you see which factor is related to the document length in this formula? what i just say is that this term is related to idf weighting. this collection probability, but it turns out that this term here is actually related to document length normalization. in particular, f of sub d might be related to document length. so it encodes how much probability mass we want to give to unseen worlds. how much smoothing do we want to do? intuitively, if a document is long, then we need to do less smoothing because we can assume that data is large enough. we probably have observed all the words that the author could have written. but if the document is short then r of sub t could be expected to be large. we need to do more smoothing. it's likey there are words that have not been written yet by the author. so this term appears to paralyze the non document in that other sub d would tend to be longer than or larger than for a long document. but note that alpha sub d also occurs here and so this may not actually be necessary paralyzing long documents. the effect is not so clear yet. but as we will see later, when we consider some specific smoothing methods, it turns out that they do paralyze long documents. just like in tf-idf weighting and document length normalization formula in the vector space model. so, that's a very interesting observation because it means we don't even have to think about the specific way of doing smoothing. we just need to assume that if we smooth with this collection memory model, then we would have a formula that looks like tf-idf weighting and documents length violation. what's also interesting that we have very fixed form of the ranking function. and see we have not heuristically put a logarithm here. in fact, you can think about why we would have a logarithm here. you look at the assumptions that we have made, it would be clear it's because we have used a logarithm of query like for scoring. and we turned the product into a sum of logarithm of probability, and that's why we have this logarithm. note that if only want to heuristically implement a tf weighting and idf weighting, we don't necessary have to have a logarithm here. imagine if we drop this logarithm, we would still have tf and idf weighting. but what's nice with problem risk modeling is that we are automatically given the logarithm function here. and that's basically a fixed form of the formula that we did not really have to heuristically design, and in this case if you try to drop the logarithm the model probably won't work as well as if you keep the logarithm. so a nice property of problem risk modeling is that by following some assumptions and the probability rules we'll get a formula automatically. and the formula would have a particular form like in this case. and if we heuristically design the formula we may not necessarily end up having such a specific formula. so to summarize, we talked about the need for smoothing the document imaging model. otherwise it would give zero probability for unseen words in the document, and that's not good for storing a query with such an unseen word. it's also necessary, in general, to improve the accuracy of estimating the model represent the topic of this document. the general idea of smoothing in retrieval is to use the connecting memory model to, to give us some clue about which unseen words should have a higher probability. that is, the probability of an unseen word is assumed to be proportional to its probability in the collection. with this assumption, we've shown that we can derive a general ranking formula for query likelihood that has effect of tf-idf weighting and document length normalization. we also see that, through some rewriting, the scoring of such a ranking function is primarily based on sum of weights on matched query terms, just like in the vector space model. but, the actual ranking function is given us automatically by the probability rules and assumptions that we have made. and like in the vector space model where we have to heuristically think about the form of the function. however, we still need to address the question how exactly we should smooth the document and the model. how exactly we should use the reference and model based on the connection to adjust the probability of the maximum micro is made of and this is the topic of the next batch. [music",05_lesson-4-5-statistical-language-model-part-2
28,https://www.coursera.org/learn/text-retrieval,06_lesson-4-6-smoothing-methods-part-1.en.txt,text-retrieval/05_week-4/02_week-4-lessons/06_lesson-4-6-smoothing-methods-part-1.en.txt,"[sound] this lecture is about the specific smoothing methods for language models used in probabilistic retrieval model. in this lecture, we will continue the discussion of language models for information retrieval, particularly the query likelihood retrieval method. and we're going to talk about specifically the smoothing methods used for such a retrieval function. so this is a slide from a previous lecture where we show that with a query likelihood ranking and smoothing with the collection language model, we add up having a retrieval function that looks like the following. so this is the retrieval function based on these assumptions that we have discussed. you can see it's a sum of all the matching query terms, here. and inside its sum is the count of the term in the query and some weight for the term in the document. we have t of i, the f weight here, and then we have another constant here in n. so clearly if we want to implement this function using programming language, we still need to figure out a few variables. in particular, we're going to need to know how to estimate the probability of a word exactly and how do we set alpha. so in order to answer this question, we have to think about very specific smoothing methods, and that is main topic of this lecture. we're going to talk about two smoothing methods. the first is simple linear interpolation with a fixed coefficient. and this is also called a jelinek-mercer smoothing. so the idea is actually very simple. this picture shows how we estimate a document language model by using maximum likelihood estimate. that gives us word counts normalized by the total number of words in the text. the idea of using this method is to maximize the probability of the observed text. as a result, if a word like network is not observed in the text, it's going to get 0 probability, as shown here. so the idea of smoothing, then, is to rely on collection language model where this word is not going to have a zero probability to help us decide what nonzero probability should be assigned to such a word. so we can note that network has a nonzero probability here. so in this approach what we do is we do a linear interpolation between the maximum likelihood placement here and the collection language model, and this is computed by the smoothing parameter lambda, which is between 0 and 1. so this is a smoothing parameter. the larger lambda is, the more smoothing we will have. so by mixing them together, we achieve the goal of assigning nonzero probabilities to a word like network. so let's see how it works for some of the words here. for example, if we compute the smooth probability for text. now the maximum likelihood estimated gives us 10 over 100, and that's going to be here. but the collection probability is this. so we'll just combine them together with this simple formula. we can also see the word network, which used to have a zero probability, now is getting a non-zero probability of this value. and that's because the count is going to be zero for network here. but this part is nonzero, and that's basically how this method works. now if you think about this and you can easily see now the alpha sub d in this smoothing method is basically lambda. because that's remember the coefficient in front of the probability of the word given by the collection language model here. okay, so this is the first smoothing method. the second one is similar but it has a tie-in into the coefficient for linear interpolation. it's often called dirichlet prior, or bayesian, smoothing. so again here we face problem of zero probability for an unseen word like network. again we will use the collection language model, but in this case, we're going to combine them in somewhat different ways. the formula first can be seen as a interpolation of the maximum likelihood estimate and the collection language model as before, as in the j-m smoothing method. only that the coefficient now is not lambda, a fixed number, but a dynamic coefficient in this form, where mu is a parameter, it's a non-negative value. and you can see if we set mu to a constant, the effect is that a long document would actually get a smaller coefficient here. because a long document will have longer lengths, therefore the coefficient is actually smaller. and so a long document would have less smoothing, as we would expect. so this seems to make more sense than a fixed coefficient smoothing. of course, this part would be of this form so that the two coefficients would sum to 1. now this is one way to understand this smoothing. basically, it means it's a dynamic coefficient interpolation. there is another way to understand this formula which is even easier to remember, and that's on this side. so it's easier to see how we can rewrite the smoothing method in this form. now in this form we can easily see what change we have made to the maximum likelihood estimate, which would be this part. so normalize the count by the document length. so in this form we can see what we did is we add this to the count of every word. so what does this mean? well, this is basically something related to the probability of the word in the collection. and we multiply that by the parameter mu. and when we combine this with the count here, essentially we are adding pseudocounts to the observed text. we pretend every word has got this many pseudocount. so the total count would be the sum of these pseudocounts and the actual count of the word in the document. as a result, in total we would have added this many pseudocounts. why? because if you take somewhat this one over all the words, then we'll see the probability of the words would sum to 1, and that gives us just mu. so this is the total number of pseudocounts that we added. and so these probabilities would still sum to 1. so in this case, we can easily see the method is essentially to add this as a pseudocount to this data. pretend we actually augment the data by including some pseudo data defined by the collection language model. as a result, we have more counts is that the total counts for a word would be like this. and as a result, even if a word has zero count here, let's say if we have zero count here, then it would still have nonzero count because of this part. so this is how this method works. let's also take a look at some specific example here. so for text again we will have 10 as the original count that we actually observe, but we also add some pseudocount. and so the probability of text would be of this form. naturally, the probability of network would be just this part. and so here you can also see what's alpha sub d here. can you see it? if you want to think about it, you can pause the video. but you'll notice that this part is basically alpha sub d. so we can see, in this case, alpha sub d does depend on the document, because this length depends on the document, whereas in the linear interpolation, the j-m smoothing method, this is a constant. [music",06_lesson-4-6-smoothing-methods-part-1
29,https://www.coursera.org/learn/text-retrieval,04_lesson-4-4-statistical-language-model-part-1.en.txt,text-retrieval/05_week-4/02_week-4-lessons/04_lesson-4-4-statistical-language-model-part-1.en.txt,"[sound] this lecture is about smoothing of language models. in this lecture, we're going to continue talking about the probabilistic retrieval model. in particular, we're going to talk about the smoothing of language model in the query likelihood retrieval method. so you have seen this slide from a previous lecture. this is the ranking function based on the query likelihood. here, we assume that the independence of generating each query word and the formula would look like the following where we take a sum of all the query words. and inside the sum there is a log of probability of a word given by the document or document image model. so the main task now is to estimate this document language model as we said before different methods for estimating this model would lead to different retrieval functions. so in this lecture, we're going to be looking to this in more detail. so how do we estimate this language model? well the obvious choice would be the maximum likelihood estimate that we have seen before. and that is we're going to normalize the word frequencies in the document. and estimate the probability it would look like this. this is a step function here. which means all of the words that have the same frequency count will have identical problem with it. this is another freedom to count, that has different probability. note that for words that have not occurred in the document here they will have 0 probability. so we know this is just like the model that we assume earlier in the lecture. where we assume that the use of the simple word from the document to a formula to clear it. and there's no chance of assembling any word that's not in the document and we know that's not good. so how do we improve this? well in order to assign a none 0 probability to words that have not been observed in the document, we would have to take away some probability mass from the words that are observed in the document. so for example here, we have to take away some probability of the mass because we need some extra probability mass for the words otherwise they won't sum to 1. so all these probabilities must sum to 1. so to make this transformation and to improve the maximum likelihood estimated by assigning non zero probabilities to words that are not observed in the data. we have to do smoothing and smoothing has to do with improving the estimate by considering the possibility that if the author had been asking to write more words for the document, the author might have written other words. if you think about this factor then the a smoothed language model would be a more accurate than the representation of the actual topic. imagine you have seen an abstract of a research article. let's say this document is abstract. if we assume and see words in this abstract that we have a probability of 0. that would mean there's no chance of sampling a word outside the abstract of the formulated query. but imagine a user who is interested in the topic of this subject. the user might actually choose a word that's not in that chapter to use as query. so obviously, if we has asked this author to write more author would have written a full text of the article. so smoothing of the language model is an attempt to try to recover the model for the whole article. and then of course, we don't have knowledge about any words that are not observed in the abstract. so that's why smoothing is actually a tricky problem. so let's talk a little more about how to smooth a language model. the key question here is, what probability should be assigned to those unseen words? and there are many different ways of doing that. one idea here, that's very useful for retrieval is let the probability of unseen word be proportional to its probability given by a reference language model. that means if you don't observe the word in the dataset. we're going to assume that its probability is kind of governed by another reference language model that we will construct. it will tell us which unseen words would have a higher probability. in the case of retrieval, a natural choice would be to take the collection language model as the reference language model. that is to say, if you don't observe a word in the document, we're going to assume that the probability of this word would be proportional to the probability of word in the whole collection. so more formally, we'll be estimating the probability of a word key document as follows. if the word is seen in the document then the probability would be this counted the maximum likelihood estimate p sub c here. otherwise, if the word is not seen in the document we're going to let probability be proportional to the probability of the word in the collection. and here the coefficient that offer is to control the amount of probability mass that we assign to unseen words. obviously, all these probabilities must sum to 1, so alpha sub d is constrained in some way. so what if we plug in this smoothing formula into our query likelihood ranking function? this is what we will get. in this formula, we have this as a sum over all the query words and those that we have written here as the sum of all the vocabulary, you see here. this is the sum of all the words in the vocabulary, but not that we have a count of the word in the query. so in fact, we are just taking a sample of query words. this is now a common way that we would use, because of its convenience in some transformations. so this is as i said, this is sum of all the query words. in our smoothing method, we assume that the words that are not observed in the method would have a somewhat different form of probability. name it's four, this foru. so we're going to do then, decompose the sum into two parts. one sum is over all the query words that are matching the document. that means that in this sum, all the words have a non zero probability in the document. sorry, it's the non zero count of the word in the document. they all occur in the document. and they also have to of course have a non zero count in the query. so these are the query words that are matching the document. on the other hand, in this sum we are taking a sum of all the words that are not all query was not matching the document. so they occur in the query due to this term, but they don't occur in the document. in this case, these words have this probability because of our assumption about the smoothing. that here, these seen words have a different probability. now, we can go further by rewriting the second sum as a difference of two other sums. basically, the first sum is the sum of all the query words. now, we know that the original sum is not over all the query words. this is over all the query words that are not matched in the document. so here we pretend that they are actually over all the query words. so we take a sum over all the query words. obviously, this sum has extra terms that are not in this sum. because, here we're taking sum over all the query words. there, it's not matched in the document. so in order to make them equal, we will have to then subtract another sum here. and this is the sum over all the query words that are matching in the document. and this makes sense, because here we are considering all query words. and then we subtract the query that was matched in the document. that would give us the query that was not matched in the document. and this is almost a reverse process of the first step here. and you might wonder why do we want to do that. well, that's because if we do this, then we have different forms of terms inside of these sums. so now, you can see in this sum we have all the words matched, the query was matching the document with this kind of term. here we have another sum over the same set of terms, matched query terms in document. but inside the sum, it's different. but these two sums can clearly be merged. so if we do that, we'll get another form of the formula that looks like before me at the bottom here. and note that this is a very interesting formula. because here we combine these two that all or some of the query words matching in the document in the one sum here. and the other sum now is decomposing into two parts. and these two parts look much simpler just, because these are the probabilities of unseen words. this formula is very interesting because you can see the sum is now over the match the query terms. and just like in the vector space model, we take a sum of terms that are in the intersection of query vector and the document vector. so it already looks a little bit like the vector space model. in fact, there's even more similarity here as we explain on this slide. [music",04_lesson-4-4-statistical-language-model-part-1
30,https://www.coursera.org/learn/text-retrieval,01_lesson-4-1-probabilistic-retrieval-model-basic-idea.en.txt,text-retrieval/05_week-4/02_week-4-lessons/01_lesson-4-1-probabilistic-retrieval-model-basic-idea.en.txt,"[sound] this lecture is about the probabilistic retrieval model. in this lecture, we're going to continue the discussion of the text retrieval methods. we're going to look at another kind of very different way to design ranking functions than the vector space model that we discussed before. in probabilistic models, we define the ranking function, based on the probability that this document is relevant to this query. in other words, we introduce a binary random variable here. this is the variable r here. and we also assume that the query and the documents are all observations from random variables. note that in the vector-based models, we assume they are vectors, but here we assume they are the data observed from random variables. and so, the problem of retrieval becomes to estimate the probability of relevance. in this category of models, there are different variants. the classic probabilistic model has led to the bm25 retrieval function, which we discussed in in the vectors-based model because its a form is actually similar to a backwards space model. in this lecture, we will discuss another sub class in this p class called a language modeling approaches to retrieval. in particular, we're going to discuss the query likelihood retrieval model, which is one of the most effective models in probabilistic models. there was also another line called the divergence from randomness model which has led to the pl2 function, it's also one of the most effective state of the art retrieval functions. in query likelihood, our assumption is that this probability of relevance can be approximated by the probability of query given a document and relevance. so intuitively, this probability just captures the following probability. and that is if a user likes document d, how likely would the user enter query q ,in order to retrieve document d? so we assume that the user likes d, because we have a relevance value here. and then we ask the question about how likely we'll see this particular query from this user? so this is the basic idea. now, to understand this idea, let's take a look at the general idea or the basic idea of probabilistic retrieval models. so here, i listed some imagined relevance status values or relevance judgments of queries and documents. for example, in this line, it shows that q1 is a query that the user typed in. and d1 is a document that the user has seen. and 1 means the user thinks d1 is relevant to q1. so this r here can be also approximated by the click-through data that a search engine can collect by watching how you interacted with the search results. so in this case, let's say the user clicked on this document. so there's a 1 here. similarly, the user clicked on d2 also, so there is a 1 here. in other words, d2 is assumed to be relevant to q1. on the other hand, d3 is non-relevant, there's a 0 here. and d4 is non-relevant and then d5 is again, relevant, and so on and so forth. and this part, maybe, data collected from a different user. so this user typed in q1 and then found that the d1 is actually not useful, so d1 is actually non-relevant. in contrast, here we see it's relevant. or this could be the same query typed in by the same user at different times. but d2 is also relevant, etc. and then here, we can see more data about other queries. now, we can imagine we have a lot of such data. now we can ask the question, how can we then estimate the probability of relevance? so how can we compute this probability of relevance? well, intuitively that just means if we look at all the entries where we see this particular d and this particular q, how likely we'll see a one on this other column. so basically that just means that we can just collect the counts. we can first count how many times we have seen q and d as a pair in this table and then count how many times we actually have also seen 1 in the third column. and then, we just compute the ratio. so let's take a look at some specific examples. suppose we are trying to compute this probability for d1, d2 and d3 for q1. what is the estimated probability? now, think about that. you can pause the video if needed. try to take a look at the table. and try to give your estimate of the probability. have you seen that, if we are interested in q1 and d1, we'll be looking at these two pairs? and in both cases, well, actually, in one of the cases, the user has said this is 1, this is relevant. so r = 1 in only one of the two cases. in the other case, it's 0. so that's one out of two. what about the d1 and the d2? well, they are here, d1 and d2, d1 and d2, in both cases, in this case, r = 1. so it's a two out of two and so on and so forth. so you can see with this approach, we can actually score these documents for the query, right? we now have a score for d1, d2 and d3 for this query. and we can simply rank them based on these probabilities and so that's the basic idea probabilistic retrieval model. and you can see it makes a lot of sense, in this case, it's going to rank d2 above all the other documents. because in all the cases, when you have c and q1 and d2, r = 1. the user clicked on this document. so this also should show that with a lot of click-through data, a search engine can learn a lot from the data to improve their search engine. this is a simple example that shows that with even with small amount of entries here we can already estimate some probabilities. these probabilities would give us some sense about which document might be more relevant or more useful to a user for typing this query. now, of course, the problems that we don't observe all the queries and all the documents and all the relevance values, right? there would be a lot of unseen documents, in general, we have only collected the data from the documents that we have shown to the users. and there are even more unseen queries because you cannot predict what queries will be typed in by users. so obviously, this approach won't work if we apply it to unseen queries or unseen documents. nevertheless, this shows the basic idea of probabilistic retrieval model and it makes sense intuitively. so what do we do in such a case when we have a lot of unseen documents and unseen queries? well, the solutions that we have to approximate in some way. so in this particular case called a query likelihood retrieval model, we just approximate this by another conditional probability. p(q given d, r=1). so in the condition part, we assume that the user likes the document because we have seen that the user clicked on this document. and this part shows that we're interested in how likely the user would actually enter this query. how likely we will see this query in the same row. so note that here, we have made an interesting assumption here. basically, we're going to do, assume that whether the user types in this query has something to do with whether user likes the document. in other words, we actually make the following assumption. and that is a user formulates a query based on an imaginary relevant document. where if you just look at this as conditional probability, it's not obvious we are making this assumption. so what i really meant is that to use this new conditional probability to help us score, then this new conditional probability will have to somehow be able to estimate this conditional probability without relying on this big table. otherwise we would be having similar problems as before, and by making this assumption, we have some way to bypass this big table, and try to just model how the user formulates the query, okay? so this is how you can simplify the general model so that we can derive a specific relevant function later. so let's look at how this model work for our example. and basically, what we are going to do in this case is to ask the following question. which of these documents is most likely the imaginary relevant document in the user's mind when the user formulates this query? so we ask this question and we quantify the probability and this probability is a conditional probability of observing this query if a particular document is in fact the imaginary relevant document in the user's mind. here you can see we've computed all these query likelihood probabilities. the likelihood of queries given each document. once we have these values, we can then rank these documents based on these values. so to summarize, the general idea of modern relevance in the proper risk model is to assume the we introduce a binary random variable r, here. and then, let the scoring function be defined based on this conditional probability. we also talked about approximating this by using the query likelihood. and in this case we have a ranking function that's basically based on the probability of a query given the document. and this probability should be interpreted as the probability that a user who likes document d, would pose query q. now, the question of course is, how do we compute this conditional probability? at this in general has to do with how you compute the probability of text, because q is a text. and this has to do with a model called a language model. and these kind of models are proposed to model text. so more specifically, we will be very interested in the following conditional probability as is shown in this here. if the user liked this document, how likely the user would pose this query. and in the next lecture we're going to do, giving introduction to language models that we can see how we can model text that was a probable risk model, in general. [music",01_lesson-4-1-probabilistic-retrieval-model-basic-idea
31,https://www.coursera.org/learn/text-retrieval,01_lesson-1-1-natural-language-content-analysis.en.txt,text-retrieval/02_week-1/02_week-1-lessons/01_lesson-1-1-natural-language-content-analysis.en.txt,"[sound] >> this lecture is about natural language of content analysis. as you see from this picture, this is really the first step to process any text data. text data are in natural languages. so computers have to understand natural languages to some extent, in order to make use of the data. so that's the topic of this lecture. we're going to cover three things. first, what is natural language processing, which is the main technique for processing natural language to obtain understanding. the second is the state of the art of nlp which stands for natural language processing. finally we're going to cover the relation between natural language processing and text retrieval. first, what is nlp? well the best way to explain it is to think about if you see a text in a foreign language that you can understand. now what do you have to do in order to understand that text? this is basically what computers are facing. so looking at the simple sentence like a dog is chasing a boy on the playground. we don't have any problems understanding this sentence. but imagine what the computer would have to do in order to understand it. well in general, it would have to do the following. first, it would have to know dog is a noun, chasing's a verb, etc. so this is called lexical analysis, or part-of-speech tagging, and we need to figure out the syntactic categories of those words. so that's the first step. after that, we're going to figure out the structure of the sentence. so for example, here it shows that a and the dog would go together to form a noun phrase. and we won't have dog and is to go first. and there are some structures that are not just right. but this structure shows what we might get if we look at the sentence and try to interpret the sentence. some words would go together first, and then they will go together with other words. so here we show we have noun phrases as intermediate components, and then verbal phrases. finally we have a sentence. and you get this structure. we need to do something called a semantic analysis, or parsing. and we may have a parser accompanying the program, and that would automatically created this structure. at this point you would know the structure of this sentence, but still you don't know the meaning of the sentence. so we have to go further to semantic analysis. in our mind we usually can map such a sentence to what we already know in our knowledge base. for example, you might imagine a dog that looks like that. there's a boy and there's some activity here. but for a computer would have to use symbols to denote that. we'd use a symbol (d1) to denote a dog. and (b)1 can denote a boy and then (p)1 can denote a playground. now there is also a chasing activity that's happening here so we have a relationship chasing that connects all these symbols. so this is how a computer would obtain some understanding of this sentence. now from this representation we could also further infer some other things, and we might indeed naturally think of something else when we read a text and this is called inference. so for example, if you believe that if someone's being chased and this person might be scared, but with this rule, you can see computers could also infer that this boy maybe scared. so this is some extra knowledge that you'd infer based on some understanding of the text. you can even go further to understand why the person say at this sentence. so this has to do as a use of language. this is called pragmatic analysis. in order to understand the speak actor of a sentence, right? we say something to basically achieve some goal. there's some purpose there. and this has to do with the use of language. in this case the person who said this sentence might be reminding another person to bring back the dog. that could be one possible intent. to reach this level of understanding would require all of these steps and a computer would have to go through all these steps in order to completely understand this sentence. yet we humans have no trouble with understanding that, we instantly would get everything. there is a reason for that. that's because we have a large knowledge base in our brain and we can use common sense knowledge to help interpret the sentence. computers unfortunately are hard to obtain such understanding. they don't have such a knowledge base. they are still incapable of doing reasoning and uncertainties, so that makes natural language processing difficult for computers. but the fundamental reason why natural language processing is difficult for computers is simply because natural language has not been designed for computers. natural languages are designed for us to communicate. there are other languages designed for computers. for example, programming languages. those are harder for us, right? so natural languages is designed to make our communication efficient. as a result, we omit a lot of common sense knowledge because we assume everyone knows about that. we also keep a lot of ambiguities because we assume the receiver or the hearer could know how to decipher an ambiguous word based on the knowledge or the context. there's no need to demand different words for different meanings. we could overload the same word with different meanings without the problem. because of these reasons this makes every step in natural language of processing difficult for computers, ambiguity is the main difficulty. and common sense and reasoning is often required, that's also hard. so let me give you some examples of challenges here. consider the word level ambiguity. the same word can have different syntactic categories. for example design can be a noun or a verb. the word of root may have multiple meanings. so square root in math sense or the root of a plant. you might be able to think about it's meanings. there are also syntactical ambiguities. for example, the main topic of this lecture, natural language processing, can actually be interpreted in two ways in terms of the structure. think for a moment and see if you can figure that out. we usually think of this as processing of natural language, but you could also think of this as do say, language processing is natural. so this is an example of synaptic ambiguity. what we have different is structures that can be applied to the same sequence of words. another common example of an ambiguous sentence is the following. a man saw a boy with a telescope. now in this case the question is, who had a telescope. this is called a prepositional phrase attachment ambiguity or pp attachment ambiguity. now we generally don't have a problem with these ambiguities because we have a lot of background knowledge to help us disambiguate the ambiguity. another example of difficulty is anaphora resolution. so think about the sentence john persuaded bill to buy a tv for himself. the question here is does himself refer to john or bill? so again this is something that you have to use some background or the context to figure out. finally, presupposition is another problem. consider the sentence, he has quit smoking. now this obviously implies that he smoked before. so imagine a computer wants to understand all these subtle differences and meanings. it would have to use a lot of knowledge to figure that out. it also would have to maintain a large knowledge base of all the meanings of words and how they are connected to our common sense knowledge of the world. so this is why it's very difficult. so as a result, we are steep not perfect, in fact far from perfect in understanding natural language using computers. so this slide sort of gains a simplified view of state of the art technologies. we can do part of speech tagging pretty well, so i showed 97% accuracy here. now this number is obviously based on a certain dataset, so don't take this literally. this just shows that we can do it pretty well. but it's still not perfect. in terms of parsing, we can do partial parsing pretty well. that means we can get noun phrase structures, or verb phrase structure, or some segment of the sentence, and this dude correct them in terms of the structure. and in some evaluation results, we have seen above 90% accuracy in terms of partial parsing of sentences. again, i have to say these numbers are relative to the dataset. in some other datasets, the numbers might be lower. most of the existing work has been evaluated using news dataset. and so a lot of these numbers are more or less biased toward news data. think about social media data, the accuracy likely is lower. in terms of a semantical analysis, we are far from being able to do a complete understanding of a sentence. but we have some techniques that would allow us to do partial understanding of the sentence. so i could mention some of them. for example, we have techniques that can allow us to extract the entities and relations mentioned in text articles. for example, recognizing dimensions of people, locations, organizations, etc in text. so this is called entity extraction. we may be able to recognize the relations. for example, this person visited that place or this person met that person or this company acquired another company. such relations can be extracted by using the computer current natural language processing techniques. they're not perfect but they can do well for some entities. some entities are harder than others. we can also do word sense disintegration to some extend. we have to figure out whether this word in this sentence would have certain meaning in another context the computer could figure out, it has a different meaning. again, it's not perfect, but you can do something in that direction. we can also do sentiment analysis, meaning, to figure out whether a sentence is positive or negative. this is especially useful for review analysis, for example. so these are examples of semantic analysis. and they help us to obtain partial understanding of the sentences. it's not giving us a complete understanding, as i showed it before, for this sentence. but it would still help us gain understanding of the content. and these can be useful. in terms of inference, we are not there yet, probably because of the general difficulty of inference and uncertainties. this is a general challenge in artificial intelligence. now that's probably also because we don't have complete semantical representation for natural [inaudible] text. so this is hard. yet in some domains perhaps, in limited domains when you have a lot of restrictions on the word uses, you may be able to perform inference to some extent. but in general we can not really do that reliably. speech act analysis is also far from being done and we can only do that analysis for very special cases. so this roughly gives you some idea about the state of the art. and then we also talk a little bit about what we can't do, and so we can't even do 100% part of speech tagging. now this looks like a simple task, but think about the example here, the two uses of off may have different syntactic categories if you try to make a fine grained distinctions. it's not that easy to figure out such differences. it's also hard to do general complete parsing. and again, the same sentence that you saw before is example. this ambiguity can be very hard to disambiguate and you can imagine example where you have to use a lot of knowledge in the context of the sentence or from the background, in order to figure out who actually had the telescope. so although the sentence looks very simple, it actually is pretty hard. and in cases when the sentence is very long, imagine it has four or five prepositional phrases, and there are even more possibilities to figure out. it's also harder to do precise deep semantic analysis. so here's an example. in the sentence ""john owns a restaurant."" how do we define owns exactly? the word own, it is something that we can understand but it's very hard to precisely describe the meaning of own for computers. so as a result we have a robust and a general natural language processing techniques that can process a lot of text data. in a shallow way, meaning we only do superficial analysis. for example, parts of speech tagging or a partial parsing or recognizing sentiment. and those are not deep understanding, because we're not really understanding the exact meaning of the sentence. on the other hand of the deep understanding techniques tend not to scale up well, meaning that they would fill only some restricted text. and if you don't restrict the text domain or the use of words, then these techniques tend not to work well. they may work well based on machine learning techniques on the data that are similar to the training data that the program has been trained on. but they generally wouldn't work well on the data that are very different from the training data. so this pretty much summarizes the state of the art of natural language processing. of course, within such a short amount of time we can't really give you a complete view of nlp, which is a big field. and i'd expect to see multiple courses on natural language processing topic itself. but because of its relevance to the topic that we talk about, it's useful for you to know the background in case you happen to be exposed to that. so what does that mean for text retrieval? well, in text retrieval we are dealing with all kinds of text. it's very hard to restrict text to a certain domain. and we also are often dealing with a lot of text data. so that means the nlp techniques must be general, robust, and efficient. and that just implies today we can only use fairly shallow nlp techniques for text retrieval. in fact, most search engines today use something called a bag of words representation. now, this is probably the simplest representation you can possibly think of. that is to turn text data into simply a bag of words. meaning we'll keep individual words, but we'll ignore all the orders of words. and we'll keep duplicated occurrences of words. so this is called a bag of words representation. when you represent text in this way, you ignore a lot of valid information. that just makes it harder to understand the exact meaning of a sentence because we've lost the order. but yet this representation tends to actually work pretty well for most search tasks. and this was partly because the search task is not all that difficult. if you see matching of some of the query words in a text document, chances are that that document is about the topic, although there are exceptions. so in comparison of some other tasks, for example, machine translation would require you to understand the language accurately. otherwise the translation would be wrong. so in comparison such tasks are all relatively easy. such a representation is often sufficient and that's also the representation that the major search engines today, like a google or bing are using. of course, i put in parentheses but not all, of course there are many queries that are not answered well by the current search engines, and they do require the replantation that would go beyond bag of words replantation. that would require more natural language processing to be done. there was another reason why we have not used the sophisticated nlp techniques in modern search engines. and that's because some retrieval techniques actually, naturally solved the problem of nlp. so one example is word sense disintegration. think about a word like java. it could mean coffee or it could mean program language. if you look at the word anome, it would be ambiguous, but when the user uses the word in the query, usually there are other words. for example, i'm looking for usage of java applet. when i have applet there, that implies java means program language. and that contest can help us naturally prefer documents which java is referring to program languages. because those documents would probably match applet as well. if java occurs in that documents where it means coffee then you would never match applet or with very small probability. so this is the case when some retrieval techniques naturally achieve the goal of word. another example is some technique called feedback which we will talk about later in some of the lectures. this technique would allow us to add additional words to the query and those additional words could be related to the query words. and these words can help matching documents where the original query words have not occurred. so this achieves, to some extent, semantic matching of terms. so those techniques also helped us bypass some of the difficulties in natural language processing. however, in the long run we still need a deeper natural language processing techniques in order to improve the accuracy of the current search engines. and it's particularly needed for complex search tasks. or for question and answering. google has recently launched a knowledge graph, and this is one step toward that goal, because knowledge graph would contain entities and their relations. and this goes beyond the simple bag of words replantation. and such technique should help us improve the search engine utility significantly, although this is the open topic for research and exploration. in sum, in this lecture we talked about what is nlp and we've talked about the state of that techniques. what we can do, what we cannot do. and finally, we also explain why the bag of words replantation remains the dominant replantation used in modern search engines, even though deeper nlp would be needed for future search engines. if you want to know more, you can take a look at some additional readings. i only cited one here and that's a good starting point. thanks. [music",01_lesson-1-1-natural-language-content-analysis
32,https://www.coursera.org/learn/text-retrieval,03_lesson-1-3-text-retrieval-problem.en.txt,text-retrieval/02_week-1/02_week-1-lessons/03_lesson-1-3-text-retrieval-problem.en.txt,"[music] this lecture is about the text retrieval problem. this picture shows our overall plan for lectures. in the last lecture, we talked about the high level strategies for text access. we talked about push versus pull. such engines are the main tools for supporting the pull mode. starting from this lecture, we're going to talk about the how search engines work in detail. so first it's about the text retrieval problem. we're going to talk about the three things in this lecture. first, we define text retrieval. second we're going to make a comparison between text retrieval and the related task database retrieval. finally, we're going to talk about the document selection versus document ranking as two strategies for responding to a user's query. so what is text retrieval? it should be a task that's familiar for the most of us because we're using web search engines all the time. so text retrieval is basically a task where the system would respond to a user's query with relevant documents. basically, it's for supporting a query as one way to implement the poll mode of information access. so the situation is the following. you have a collection of text retrieval documents. these documents could be all the webpages on the web, or all the literature articles in the digital library. or maybe all the text files in your computer. a user will typically give a query to the system to express information need. and then, the system would return relevant documents to users. relevant documents refer to those documents that are useful to the user who typed in the query. all this task is a phone call that information retrieval. but literally information retrieval would broadly include the retrieval of other non-textual information as well, for example audio, video, etc. it's worth noting that text retrieval is at the core of information retrieval in the sense that other medias such as video can be retrieved by exploiting the companion text data. so for example, current the image search engines actually match a user's query was the companion text data of the image. this problem is also called search problem. and the technology is often called the search technology industry. if you ever take a course in databases it will be useful to pause the lecture at this point and think about the differences between text retrieval and database retrieval. now these two tasks are similar in many ways. but, there are some important differences. so, spend a moment to think about the differences between the two. think about the data, and the information managed by a search engine versus those that are managed by a database system. think about the different between the queries that you typically specify for database system versus queries that are typed in by users in a search engine. and then finally think about the answers. what's the difference between the two? okay, so if we think about the information or data managed by the two systems, we will see that in text retrieval. the data is unstructured, it's free text. but in databases, they are structured data where there is a clear defined schema to tell you this column is the names of people and that column is ages, etc. the unstructured text is not obvious what are the names of people mentioned in the text. because of this difference, we also see that text information tends to be more ambiguous and we talk about that in the processing chapter, whereas in databases. but they don't tend to have where to find the semantics. the results important difference in the queries, and this is partly due to the difference in the information or data. so test queries tend to be ambiguous. whereas in their research, the queries are typically well-defined. think about a sql query that would clearly specify what records to be returned. so it has very well-defined semantics. keyword queries or electronic queries tend to be incomplete, also in that it doesn't really specify what documents should be retrieved. whereas complete specification for what should be returned. and because of these differences, the answers would be also different. being the case of text retrieval, we're looking for it rather than the documents. in the database search, we are retrieving records or match records with the sequel query more precisely. now in the case of text retrieval, what should be the right answers to the query is not very well specified, as we just discussed. so it's unclear what should be the right answers to a query. and this has very important consequences, and that is, textual retrieval is an empirically defined problem. so this is a problem because if it's empirically defined, then we can not mathematically prove one method is better than another method. that also means we must rely on empirical evaluation involving users to know which method works better. and that's why we have. you need more than one lectures to cover the issue of evaluation. because this is very important topic for sir jennings. without knowing how to evaluate heroism properly, there's no way to tell whether we have got the better or whether one system is better than another. so now let's look at the problem in a formal way. so, this slide shows a formal formulation of the text retrieval problem. first, we have our vocabulary set, which is just a set of words in a language. now here, we are considering only one language, but in reality, on the web, there might be multiple natural languages. we have texts that are in all kinds of languages. but here for simplicity, we just assume that is one kind of language. as the techniques used for retrieving data from multiple languages are more or less similar to the techniques used for retrieving documents in one end, which although there is important difference, the principle methods are very similar. next, we have the query, which is a sequence of words. and so here, you can see the query is defined as a sequence of words. each q sub i is a word in the vocabulary. a document is defined in the same way, so it's also a sequence of words. and here, d sub ij is also a word in the vocabulary. now typically, the documents are much longer than queries. but there are also cases where the documents may be very short. so you can think about what might be a example of that case. i hope you can think of twitter search. tweets are very short. but in general, documents are longer than the queries. now, then we have a collection of documents, and this collection can be very large. so think about the web. it could be very large. and then the goal of text retrieval is you'll find the set of relevant in the documents, which we denote by r'(q), because it depends on the query. and this in general, a subset of all the documents in the collection. unfortunately, this set of relevant documents is generally unknown, and user-dependent in the sense that, for the same query typed in by different users, they expect the relevant documents may be different. the query given to us by the user is only a hint on which document should be in this set. and indeed, the user is generally unable to specify what exactly should be in this set, especially in the case of web search, where the connection's so large, the user doesn't have complete knowledge about the whole production. so the best search system can do is to compute an approximation of this relevant document set. so we denote it by r'(q). so formerly, we can see the task is to compute this r'(q) approximation of the relevant documents. so how can we do that? now imagine if you are now asked to write a program to do this. what would you do? now think for a moment. right, so these are your input. the query, the documents. and then you are to compute the answers to this query, which is a set of documents that would be useful to the user. so, how would you solve the problem? now in general, there are two strategies that we can use. the first strategy is we do a document selection, and that is, we're going to have a binary classification function, or binary classifier. that's a function that would take a document and query as input, and then give a zero or one as output to indicate whether this document is relevant to the query or not. so in this case, you can see the document. the relevant document is set, is defined as follows. it basically, all the documents that have a value of 1 by this function. so in this case, you can see the system must have decide if the document is relevant or not. basically, it has to say whether it's one or zero. and this is called absolute relevance. basically, it needs to know exactly whether it's going to be useful to the user. alternatively, there's another strategy called document ranking. now in this case, the system is not going to make a call whether a document is random or not. but rather the system is going to use a real value function, f here. that would simply give us a value that would indicate which document is more likely relevant. so it's not going to make a call whether this document is relevant or not. but rather it would say which document is more likely relevant. so this function then can be used to random documents, and then we're going to let the user decide where to stop, when the user looks at the document. so we have a threshold theta here to determine what documents should be in this approximation set. and we're going to assume that all the documents that are ranked above the threshold are in this set, because in effect, these are the documents that we deliver to the user. and theta is a cutoff determined by the user. so here we've got some collaboration from the user in some sense, because we don't really make a cutoff. and the user kind of helped the system make a cutoff. so in this case, the system only needs to decide if one document is more likely relevant than another. and that is, it only needs to determine relative relevance, as opposed to absolute relevance. now you can probably already sense that relative relevance would be easier to determine than absolute relevance. because in the first case, we have to say exactly whether a document is relevant or not. and it turns out that ranking is indeed generally preferred to document selection. so let's look at these two strategies in more detail. so this picture shows how it works. so on the left side, we see these documents, and we use the pluses to indicate the relevant documents. so we can see the true relevant documents here consists this set of true relevant documents, consists of these process, these documents. and with the document selection function, we're going to basically classify them into two groups, relevant documents, and non-relevant ones. of course, the classified will not be perfect so it will make mistakes. so here we can see, in the approximation of the relevant documents, we have got some number in the documents. and similarly, there is a relevant document that's misclassified as non-relevant. in the case of document ranking, we can see the system seems like, simply ranks all the documents in the descending order of the scores. and then, we're going to let the user stop wherever the user wants to stop. if the user wants to examine more documents, then the user will scroll down some more and then stop [inaudible]. but if the user only wants to read a few random documents, the user might stop at the top position. so in this case, the user stops at d4. so in fact, we have delivered these four documents to our user. so as i said ranking is generally preferred, and one of the reasons is because the classifier in the case of document selection is unlikely accurate. why? because the only clue is usually the query. but the query may not be accurate in the sense that it could be overly constrained. for example, you might expect relevant documents to talk about all these topics by using specific vocabulary. and as a result, you might match no relevant documents. because in the collection, no others have discussed the topic using these vocabularies, right? so in this case, we'll see there is this problem of no relevant documents to return in the case of over-constrained query. on the other hand, if the query is under-constrained, for example, if the query does not have sufficient descriptive words to find the random documents. you may actually end up having of over delivery, and this when you thought these words my be sufficient to help you find the right documents. but, it turns out they are not sufficient and there are many distractions, documents using similar words. and so, this is a case of over delivery. unfortunately, it's very hard to find the right position between these two extremes. why? because whether users looking for the information in general the user does not have a good knowledge about the information to be found. and in that case, the user does not have a good knowledge about what vocabularies will be used in those relevent documents. so it's very hard for a user to pre-specify the right level of constraints. even if the classifier is accurate, we also still want to rend these relevant documents, because they are generally not equally relevant. relevance is often a matter of degree. so we must prioritize these documents for a user to examine. and note that this prioritization is very important because a user cannot digest all the content the user generally would have to look at each document sequentially. and therefore, it would make sense to users with the most relevant documents. and that's what ranking is doing. so for these reasons, ranking is generally preferred. now this preference also has a theoretical justification and this is given by the probability ranking principle. in the end of this lecture, there is reference for this. this principle says, returning a ranked list of documents in descending order of probability that a document is relevant to the query is the optimal strategy under the following two assumptions. first, the utility of a document (to a user) is independent of the utility of any other document. second, a user would be assumed to browse the results sequentially. now it's easy to understand why these assumptions are needed in order to justify site for the ranking strategy. because if the documents are independent, then we can evaluate the utility of each document that's separate. and this would allow the computer score for each document independently. and then, we are going to rank these documents based on the scrolls. the second assumption is to say that the user would indeed follow the rank list. if the user is not going to follow the ranked list, is not going to examine the documents sequentially, then obviously the ordering would not be optimal. so under these two assumptions, we can theoretically justify the ranking strategy is, in fact, the best that you could do. now, i've put one question here. do these two assumptions hold? i suggest you to pause the lecture, for a moment, to think about this. now, can you think of some examples that would suggest these assumptions aren't necessarily true. now, if you think for a moment, you may realize none of the assumptions is actually true. for example, in the case of independence assumption we might have documents that have similar or exactly the same content. if we look at each of them alone, each is relevant. but if the user has already seen one of them, we can assume it's generally not very useful for the user to see another similar or duplicated one. so clearly the utility on the document that is dependent on other documents that the user has seen. in some other cases you might see a scenario where one document that may not be useful to the user, but when three particular documents are put together. they provide answers to the user's question. so this is a collective relevance and that also suggests that the value of the document might depend on other documents. sequential browsing generally would make sense if you have a ranked list there. but even if you have a rank list, there is evidence showing that users don't always just go strictly sequentially through the entire list. they sometimes will look at the bottom for example, or skip some. and if you think about the more complicated interfaces that we could possibly use like two dimensional in the phase. where you can put that additional information on the screen then sequential browsing is a very restricted assumption. so the point here is that none of these assumptions is really true but less than that. but probability ranking principle establishes some solid foundation for ranking as a primary pattern for search engines. and this has actually been the basis for a lot of research work in information retrieval. and many hours have been designed based on this assumption, despite that the assumptions aren't necessarily true. and we can address this problem by doing post processing of a ranked list, for example, to remove redundancy. so to summarize this lecture, the main points that you can take away are the following. first, text retrieval is an empirically defined problem. and that means which algorithm is better must be judged by the users. second, document ranking is generally preferred. and this will help users prioritize examination of search results. and this is also to bypass the difficulty in determining absolute relevance because we can get some help from users in determining where to make the cut off, it's more flexible. so, this further suggests that the main technical challenge in designing a search engine is the design effective ranking function. in other words, we need to define what is the value of this function f on the query and document pair. how we design such a function is the main topic in the following lectures. there are two suggested additional readings. the first is the classical paper on the probability ranking principle. the second one is a must-read for anyone doing research on information retrieval. it's a classic ir book, which has excellent coverage of the main research and results in early days up to the time when the book was written. chapter six of this book has an in-depth discussion of the probability ranking principle and probably for retrieval models in general. [music",03_lesson-1-3-text-retrieval-problem
33,https://www.coursera.org/learn/text-retrieval,06_lesson-1-6-vector-space-retrieval-model-simplest-instantiation.en.txt,text-retrieval/02_week-1/02_week-1-lessons/06_lesson-1-6-vector-space-retrieval-model-simplest-instantiation.en.txt,"in this lecture we're going to talk about how to instantiate vector space model so that we can get very specific ranking function. so this is to continue the discussion of the vector space model, which is one particular approach to design a ranking function. and we're going to talk about how we use the general framework of the the vector space model as a guidance to instantiate the framework to derive a specific ranking function. and we're going to cover the symbolist instantiation of the framework. so as we discussed in the previous lecture, the vector space model is really a framework. and this didn't say. as we discussed in the previous lecture, vector space model is really a framework. it does not say many things. so, for example, here it shows that it did not say how we should define the dimension. it also did not say how we place a document vector in this space. it did not say how we place a query vector in this vector space. and, finally, it did not say how we should measure the similarity between the query vector and the document vector. so you can imagine, in order to implement this model, we have to say specifically how we compute these vectors. what is exactly xi? and what is exactly yi? this will determine where we place a document vector, where we place a query vector. and, of course, we also need to say exactly what should be the similarity function. so if we can provide a definition of the concepts that would define the dimensions and these xi's or yi's and namely weights of terms for queries and document, then we will be able to place document vectors and query vectors in this well defined space. and then, if we also specify similarity function, then we'll have a well defined ranking function. so let's see how we can do that and think about the instantiation. actually, i would suggest you to pause the lecture at this point, spend a couple minutes to think about. suppose you are asked to implement this idea. you have come up with the idea of vector space model, but you still haven't figured out how to compute these vectors exactly, how to define the similarity function. what would you do? so, think for a couple of minutes, and then proceed. so, let's think about some simplest ways of instantiating this vector space model. first, how do we define the dimension? well, the obvious choice is to use each word in our vocabulary to define the dimension. and show that there are n words in our vocabulary. therefore, there are n dimensions. each word defines one dimension. and this is basically the bag of words with now let's look at how we place vectors in this space. again here, the simplest strategy is to use a bit vector to represent both the query and a document. and that means each element, xi and yi will be taking a value of either zero or 1. when it's 1, it means the corresponding word is present in the document or in the query. when it's 0, it's going to mean that it's absent. so you can imagine if the user types in a few words in the query, then the query vector will only have a few 1's, many, many zeros. the document vector, generally we have more 1's, of course. but it will also have many zeros since the vocabulary is generally very large. many words don't really occur in any document. many words will only occasionally occur in a document. a lot of words will be absent in a particular document. so now we have placed the documents and the query in the vector space. let's look at how we measure the similarity. so, a commonly used similarity measure here is dot product. the dot product of two vectors is simply defined as the sum of the products of the corresponding elements of the two vectors. so, here we see that it's the product of x1 and y1. so, here. and then, x2 multiplied by y2. and then, finally, xn multiplied by yn. and then, we take a sum here. so that's a dot product. now, we can represent this in a more general way using a sum here. so this is only one of the many different ways of measuring the similarity. so, now we see that we have defined the dimensions, we have defined the vectors, and we have also defined the similarity function. so now we finally have the simplest vector space model, which is based on the bit vector [inaudible] dot product similarity and bag of words [inaudible]. and the formula looks like this. so this is our formula. and that's actually a particular retrieval function, a ranking function right? now we can finally implement this function using a program language, and then rank the documents for query. now, at this point you should again pause the lecture to think about how we can interpreted this score. so, we have gone through the process of modeling the retrieval problem using a vector space model. and then, we make assumptions about how we place vectors in the vector space, and how do we define the similarity. so in the end, we've got a specific retrieval function shown here. now, the next step is to think about whether this retrieval function actually makes sense, right? can we expect this function to actually perform well when we used it to rank documents for user's queries? so it's worth thinking about what is this value that we are calculating. so, in the end, we'll get a number. but what does this number mean? is it meaningful? so, spend a couple minutes to sort of think about that. and, of course, the general question here is do you believe this is a good ranking function? would it actually work well? so, again, think about how to interpret this value. is it actually meaningful? does it mean something? this is related to how well the document matched the query. so, in order to assess whether this simplest vector space model actually works well, let's look at the example. so, here i show some sample documents and a sample query. the query is news about the presidential campaign. and we have five documents here. they cover different terms in the query. and if you look at these documents for a moment, you may realize that some documents are probably relevant, and some others are probably not relevant. now, if i asked you to rank these documents, how would you rank them? this is basically our ideal ranking. when humans can examine the documents, and then try to rank them. now, so think for a moment, and take a look at this slide. and perhaps by pausing the lecture. so i think most of you would agree that d4 and d3 are probably better than others because they really cover the query well. they match news, presidential and campaign. so, it looks like these documents are probably better than the others. they should be ranked on top. and the other three d2, d1, and d5 are really not relevant. so we can also say d4 and d3 are relevant documents, and d1, d2 and d5 are non-relevant. so now let's see if our simplest vector space model could do the same, or could do something closer. so, let's first think about how we actually use this model to score documents. all right. here i show two documents, d1 and d3. and we have the query also here. in the vector space model, of course we want to first compute the vectors for these documents and the query. now, i showed the vocabulary here as well. so these are the end dimensions that we'll be thinking about. so what do you think is the vector for the query? note that we're assuming that we only use zero and 1 to indicate whether a term is absent or present in the query or in the document. so these are zero,1 bit vectors. so what do you think is the query vector? well, the query has four words here. so for these four words, there will be a 1. and for the rest, there will be zeros. now, what about the documents? it's the same. so d1 has two rows, news and about. so, there are two 1's here, and the rest are zeroes. similarly, so now that we have the two vectors, let's compute the similarity. and we're going to use do product. so you can see when we use dot product, we just multiply the corresponding elements, right? so these two will be formal product, and these two will generate another product, and these two will generate yet another product and so on, so forth. now you can easily see if we do that, we actually don't have to care about these zeroes because whenever we have a zero the product will be zero. so when we take a sum over all these pairs, then the zero entries will be gone. as long as you have one zero, then the product would be zero. so, in the fact, we're just counting how many pairs of 1 and 1. in this case, we have seen two, so the result will be 2. so what does that mean? well, that means this number, or the value of this scoring function, is simply the count of how many unique query terms are matched in the document. because if a term is matched in the document, then there will be two one's. if it's not, then there will be zero on the document side. similarly, if the document has a term but the term is not in the query, there will be a zero in the query vector. so those don't count. so, as a result, this scoring function basically measures how many unique query terms are matched in a document. this is how we interpret this score. now, we can also take a look at d3. in this case, you can see the result is 3 because d3 matched to the three distinctive query words news, presidential campaign, whereas d1 only matched the two. now in this case, this seems reasonable to rank d3 on top of d1. and this simplest vector space model indeed does that. so that looks pretty good. however, if we examine this model in detail, we likely will find some problems. so, here i'm going to show all the scores for these five documents. and you can easily verify they're correct because we're basically counting the number of unique query terms matched in each document. now note that this measure actually makes sense, right? it basically means if a document matches more unique query terms, then the document will be assumed to be more relevant. and that seems to make sense. the only problem is here we can note that there are three documents, d2, d3 and d4. and they tied with a 3 as a score. so, that's a problem because if you look at them carefully, it seems that the d4 should be ranked above d3 because d3 only mentions the presidential once, but d4 mentioned it multiple times. in the case of d3, presidential could be an dimension. but d4 is clearly above the presidential campaign. another problem is that d2 and d3 also have the same score. but if you look at the three words that are matched, in the case of d2, it matched the news, about and campaign. but in the case of d3, it matched news, presidential and campaign. so intuitively this reads better because matching presidential is more important than matching about, even though about and the presidential are both in the query. so intuitively, we would like d3 to be ranked above d2. but this model doesn't do that. so that means this model is still not good enough. we have to solve these problems. to summarize, in this lecture we talked about how to instantiate a vector space model. we mainly need to do three things. one is to define the dimension. the second is to decide how to place documents as vectors in the vector space, and to also place a query in the vector space as a vector. and third is to define the similarity between two vectors, particularly the query vector and the document vector. we also talked about various simple way to instantiate the vector space model. indeed, that's probably the simplest vector space model that we can derive. in this case, we use each word to define the dimension. we use a zero, 1 bit vector to represent a document or a query. in this case, we basically only care about word presence or absence. we ignore the frequency. and we use the dot product as the similarity function. and with such a instantiation, we showed that the scoring function is basically to score a document based on the number of distinct query words matched in the document. we also showed that such a simple vector space model still doesn't work well, and we need to improve it. and this is a topic that we're going to cover in the next lecture. [music",06_lesson-1-6-vector-space-retrieval-model-simplest-instantiation
34,https://www.coursera.org/learn/text-retrieval,05_lesson-1-5-vector-space-model-basic-idea.en.txt,text-retrieval/02_week-1/02_week-1-lessons/05_lesson-1-5-vector-space-model-basic-idea.en.txt,"[sound] this lecture is about the vector space retrieval model. we're going to give an introduction to its basic idea. in the last lecture, we talked about the different ways of designing a retrieval model, which would give us a different arranging function. in this lecture, we're going to talk about a specific way of designing a ramping function called a vector space retrieval model. and we're going to give a brief introduction to the basic idea. vector space model is a special case of similarity based models as we discussed before. which means we assume relevance is roughly similarity, between the document and the query. now whether is this assumption is true is actually a question. but in order to solve the search problem, we have to convert the vague notion of relevance into a more precise definition that can be implemented with the program analogy. so in this process, we have to make a number of assumptions. this is the first assumption that we make here. basically, we assume that if a document is more similar to a query than another document. then the first document will be assumed it will be more relevant than the second one. and this is the basis for ranking documents in this approach. again, it's questionable whether this is really the best definition for randoms. as we will see later there are other ways to model randoms. the basic idea of vectors for base retrieval model is actually very easy to understand. imagine a high dimensional space where each dimension corresponds to a term. so here i issue a three dimensional space with three words, programming, library and presidential. so each term here defines one dimension. now we can consider vectors in this, three dimensional space. and we're going to assume that all our documents and the query will be placed in this vector space. so for example, on document might be represented by this vector, d1. now this means this document probably covers library and presidential, but it doesn't really talk about programming. what does this mean in terms of representation of document? that just means we're going to look at our document from the perspective of this vector. we're going to ignore everything else. basically, what we see here is only the vector root condition of the document. of course, the document has all information. for example, the orders of words are [inaudible] model and that's because we assume that the [inaudible] of words will [inaudible]. so with this presentation you can really see d1 simply suggests a [inaudible] library. now this is different from another document which might be recommended as a different vector, d2 here. now in this case, the document that covers programming and library, but it doesn't talk about presidential. so what does this remind you? well you can probably guess the topic is likely about program language and the library is software lab library. so this shows that by using this vector space reproduction, we can actually capture the differences between topics of documents. now you can also imagine there are other vectors. for example, d3 is pointing into that direction, that might be a presidential program. and in fact we can place all the documents in this vector space. and they will be pointing to all kinds of directions. and similarly, we're going to place our query also in this space, as another vector. and then we're going to measure the similarity between the query vector and every document vector. so in this case for example, we can easily see d2 seems to be the closest to this query vector. and therefore, d2 will be rendered above others. so this is basically the main idea of the vector space model. so to be more precise, vector space model is a framework. in this framework, we make the following assumptions. first, we represent a document and query by a term vector. so here a term can be any basic concept. for example, a word or a phrase or even n gram of characters. those are just sequence of characters inside a word. each term is assumed that will be defined by one dimension. therefore n terms in our vocabulary, we define n-dimensional space. a query vector would consist of a number of elements corresponding to the weights on different terms. each document vector is also similar. it has a number of elements and each value of each element is indicating the weight of the corresponding term. here, you can see, we assume there are n dimensions. therefore, they are n elements each corresponding to the weight on the particular term. so the relevance in this case will be assumed to be the similarity between the two vectors. therefore, our ranking function is also defined as the similarity between the query vector and document vector. now if i ask you to write a program to implement this approach in a search engine. you would realize that this was far from clear. we haven't said a lot of things in detail, therefore it's impossible to actually write the program to implement this. that's why i said, this is a framework. and this has to be refined in order to actually suggest a particular ranking function that you can implement on a computer. so what does this framework not say? well, it actually hasn't said many things that would be required in order to implement this function. first, it did not say how we should define or select the basic concepts exactly. we clearly assume the concepts are orthogonal. otherwise, there will be redundancy. for example, if two synonyms or somehow distinguish it as two different concepts. then they would be defining two different dimensions and that would clearly cause redundancy here. or all the emphasizing of matching this concept, because it would be as if you match the two dimensions when you actually matched one semantic concept. secondly, it did not say how we exactly should place documents and the query in this space. basically that show you some examples of query and document vectors. but where exactly should the vector for a particular document point to? so this is equivalent to how to define the term weights? how do you compute the lose element values in those vectors? this is a very important question, because term weight in the query vector indicates the importance of term. so depending on how you assign the weight, you might prefer some terms to be matched over others. similarly, the total word in the document is also very meaningful. it indicates how well the term characterizes the document. if you got it wrong then you clearly don't represent this document accurately. finally, how to define the similarity measure is also not given. so these questions must be addressed before we can have a operational function that we can actually implement using a program language. so how do we solve these problems is the main topic of the next lecture. [music",05_lesson-1-5-vector-space-model-basic-idea
35,https://www.coursera.org/learn/text-retrieval,04_lesson-1-4-overview-of-text-retrieval-methods.en.txt,text-retrieval/02_week-1/02_week-1-lessons/04_lesson-1-4-overview-of-text-retrieval-methods.en.txt,"[sound] this lecture is a overview of text retrieval methods. in the previous lecture, we introduced the problem of text retrieval. we explained that the main problem is the design of ranking function to rank documents for a query. in this lecture, we will give an overview of different ways of designing this ranking function. so the problem is the following. we have a query that has a sequence of words and the document that's also a sequence of words. and we hope to define a function f that can compute a score based on the query and document. so the main challenge you hear is with design a good ranking function that can rank all the relevant documents on top of all the non-relevant ones. clearly, this means our function must be able to measure the likelihood that a document d is relevant to a query q. that also means we have to have some way to define relevance. in particular, in order to implement the program to do that, we have to have a computational definition of relevance. and we achieve this goal by designing a retrieval model, which gives us a formalization of relevance. now, over many decades, researchers have designed many different kinds of retrieval models. and they fall into different categories. first, one family of the models are based on the similarity idea. basically, we assume that if a document is more similar to the query than another document is, then we will say the first document is more relevant than the second one. so in this case, the ranking function is defined as the similarity between the query and the document. one well known example in this case is vector space model, which we will cover more in detail later in the lecture. a second kind of models are called probabilistic models. in this family of models, we follow a very different strategy, where we assume that queries and documents are all observations from random variables. and we assume there is a binary random variable called r here to indicate whether a document is relevant to a query. we then define the score of document with respect to a query as a probability that this random variable r is equal to 1, given a particular document query. there are different cases of such a general idea. one is classic probabilistic model, another is language model, yet another is divergence from randomness model. in a later lecture, we will talk more about one case, which is language model. a third kind of model are based on probabilistic inference. so here the idea is to associate uncertainty to inference rules, and we can then quantify the probability that we can show that the query follows from the document. finally, there is also a family of models that are using axiomatic thinking. here, an idea is to define a set of constraints that we hope a good retrieval function to satisfy. so in this case, the problem is to seek a good ranking function that can satisfy all the desired constraints. interestingly, although these different models are based on different thinking, in the end, the retrieval function tends to be very similar. and these functions tend to also involve similar variables. so now let's take a look at the common form of a state of the art retrieval model and to examine some of the common ideas used in all these models. first, these models are all based on the assumption of using bag of words to represent text, and we explained this in the natural language processing lecture. bag of words representation remains the main representation used in all the search engines. so with this assumption, the score of a query, like a presidential campaign news with respect to a document of d here, would be based on scores computed based on each individual word. and that means the score would depend on the score of each word, such as presidential, campaign, and news. here, we can see there are three different components, each corresponding to how well the document matches each of the query words. inside of these functions, we see a number of heuristics used. so for example, one factor that affects the function d here is how many times does the word presidential occur in the document? this is called a term frequency, or tf. we might also denote as c of presidential and d. in general, if the word occurs more frequently in the document, then the value of this function would be larger. another factor is, how long is the document? and this is to use the document length for scoring. in general, if a term occurs in a long document many times, it's not as significant as if it occurred the same number of times in a short document. because in a long document, any term is expected to occur more frequently. finally, there is this factor called document frequency. that is, we also want to look at how often presidential occurs in the entire collection, and we call this document frequency, or df of presidential. and in some other models, we might also use a probability to characterize this information. so here, i show the probability of presidential in the collection. so all these are trying to characterize the popularity of the term in the collection. in general, matching a rare term in the collection is contributing more to the overall score than matching up common term. so this captures some of the main ideas used in pretty much older state of the art original models. so now, a natural question is, which model works the best? now it turns out that many models work equally well. so here are a list of the four major models that are generally regarded as a state of the art original models, pivoted length normalization, bm25, query likelihood, pl2. when optimized, these models tend to perform similarly. and this was discussed in detail in this reference at the end of this lecture. among all these, bm25 is probably the most popular. it's most likely that this has been used in virtually all the search engines, and you will also often see this method discussed in research papers. and we'll talk more about this method later in some other lectures. so, to summarize, the main points made in this lecture are first the design of a good ranking function pre-requires a computational definition of relevance, and we achieve this goal by designing appropriate retrieval model. second, many models are equally effective, but we don't have a single winner yet. researchers are still active and working on this problem, trying to find a truly optimal retrieval model. finally, the state of the art ranking functions tend to rely on the following ideas. first, bag of words representation. second, tf and document frequency of words. such information is used in the weighting function to determine the overall contribution of matching a word and document length. these are often combined in interesting ways, and we'll discuss how exactly they are combined to rank documents in the lectures later. there are two suggested additional readings if you have time. the first is a paper where you can find the detailed discussion and comparison of multiple state of the art models. the second is a book with a chapter that gives a broad review of different retrieval models. [music",04_lesson-1-4-overview-of-text-retrieval-methods
36,https://www.coursera.org/learn/text-retrieval,02_lesson-1-2-text-access.en.txt,text-retrieval/02_week-1/02_week-1-lessons/02_lesson-1-2-text-access.en.txt,"[sound] in this lecture,  we're going to talk about the text access. in the previous lecture, we talked about the natural language content, analysis. we explained that the state of the are natural language processing techniques are still not good enough to process a lot of unrestricted text data in a robust manner. as a result, bag of words remains very popular in applications like a search engine. in this lecture, we're going to talk about some high-level strategies to help users get access to the text data. this is also important step to convert raw big text data into small random data. that are actually needed in a specific application. so the main question we'll address here, is how can a text information system, help users get access to the relevant text data? we're going to cover two complimentary strategies, push versus pull. and then we're going to talk about two ways to implement the pull mode, querying versus browsing. so first push versus pull. these are two different ways connect the users with the right information at the right time. the difference is which takes the initiative, which party takes the initiative. in the pull mode, the users take the initiative to start the information access process. and in this case, a user typically would use a search engine to fulfill the goal. for example, the user may type in the query and then browse the results to find the relevant information. so this is usually appropriate for satisfying a user's ad hoc information need. an ad hoc information need is a temporary information need. for example, you want to buy a product so you suddenly have a need to read reviews about related product. but after you have cracked information, you have purchased in your product. you generally no longer need such information, so it's a temporary information need. in such a case, it's very hard for a system to predict your need, and it's more proper for the users to take the initiative, and that's why search engines are very useful. today because many people have many information needs all the time. so as we're speaking google is probably processing many queries from this. and those are all, or mostly adequate. information needs. so this is a pull mode. in contrast in the push mode in the system would take the initiative to push the information to the user or to recommend information to the user. so in this case this is usually supported by a recommender system. now this would be appropriate if. the user has a stable information. for example you may have a research interest in some topic and that interest tends to stay for a while. so, it's rather stable. your hobby is another example of. a stable information need is such a case the system can interact with you and can learn your interest, and then to monitor the information stream. if the system hasn't seen any relevant items to your interest, the system could then take the initiative to recommend the information to you. so, for example, a news filter or news recommended system could monitor the news stream and identify interesting news to you and simply push the news articles to you. this mode of information access may be also a property that when this system has good knowledge about the users need and this happens in the search context. so for example, when you search for information on the web a search engine might infer you might be also interested in something related. formation. and they would recommend the information to you, so that just reminds you, for example, of an advertisement placed on the search page. so this is about the two high level strategies or two modes of text access. now let's look at the pull mode in more detail. in the pull mode, we can further distinguish it two ways to help users. querying versus browsing. in querying, a user would just enter a query. typical the keyword query, and the search engine system would return relevant documents to use. and this works well when the user knows what exactly are the keywords to be used. so if you know exactly what you are looking for, you tend to know the right keywords. and then query works very well, and we do that all of the time. but we also know that sometimes it doesn't work so well. when you don't know the right keywords to use in the query, or you want to browse information in some topic area. you use because browsing would be more useful. so in this case, in the case of browsing, the users would simply navigate it, into the relevant information by following the paths supported by the structures of documents. so the system would maintain some kind of structures and then the user could follow these structures to navigate. so this really works well when the user wants to explore the information space or the user doesn't know what are the keywords to using the query. or simply because the user finds it inconvenient to type in a query. so even if a user knows what query to type in if the user is using a cellphone to search for information. it's still harder to enter the query. in such a case, again, browsing tends to be more convenient. the relationship between browsing and querying is best understood by making and imagine you're site seeing. imagine if you're touring a city. now if you know the exact address of attraction. taking a taxi there is perhaps the fastest way. you can go directly to the site. but if you don't know the exact address, you may need to walk around. or you can take a taxi to a nearby place and then walk around. it turns out that we do exactly the same in the information studies. if you know exactly what you are looking for, then you can use the right keywords in your query to find the information you're after. that's usually the fastest way to do, find information. but what if you don't know the exact keywords to use? well, you clearly probably won't so well. you will not related pages. and then, you need to also walk around in the information space, meaning by following the links or by browsing. you can then finally get into the relevant page. if you want to learn about again. you will likely do a lot of browsing so just like you are looking around in some area and you want to see some interesting attractions related in the same. [inaudible]. so this analogy also tells us that today we have very good support for query, but we don't really have good support for browsing. and this is because in order to browse effectively, we need a map to guide us, just like you need a map to. of chicago, through the city of chicago, you need a topical map to tour the information space. so how to construct such a topical map is in fact a very interesting research question that might bring us more interesting browsing experience on the web or in applications. so, to summarize this lecture, we've talked about the two high level strategies for text access; push and pull. push tends to be supported by the recommender system, and pull tends to be supported by the search engine. of course, in the sophisticated [inaudible] information system, we should combine the two. in the pull mode, we can further this [inaudible] querying and browsing. again we generally want to combine the two ways to help you assist, so that you can support the both querying nad browsing. if you want to know more about the relationship between pull and push, you can read this article. this give excellent discussion of the relationship between machine filtering and information retrieval. here informational filtering is similar to information recommendation or the push mode of information access. [music",02_lesson-1-2-text-access
37,https://www.coursera.org/learn/text-retrieval,06_lesson-2-6-system-implementation-fast-search.en.txt,text-retrieval/03_week-2/02_week-2-lessons/06_lesson-2-6-system-implementation-fast-search.en.txt,"[sound] this lecture is about how to do faster search by using invert index. in this lecture, we're going to continue the discussion of system implementation. in particular, we're going to talk about how to support a faster search by using invert index. so let's think about what a general scoring function might look like. now of course, the vector space model is a special case of this, but we can imagine many other retrieval functions of the same form. so the form of this function is as follows. we see this scoring function of a document d and a query q is defined as first a function of fa that adjustment a function that would consider two factors. that i'll assume here at the end, f sub d of d and f sub q of q. these are adjustment factors of a document and a query, so they are at the level of a document and the query. so and then inside of this function, we also see there's another function called h. so this is the main part of the scoring function and these as i just said of the scoring factors at the level of the whole document and the query. for example, document [inaudible] and this aggregate punching would then combine all these. now inside this h function, there are functions that would compute the weights of the contribution of a matched query term ti. so this g, the function g gives us the weight of a matched query term ti in document d. and this h function would then aggregate all these weights. so for example, take a sum of all the matched query terms, but it can also be a product or it could be another way of aggregating them. and then finally, this adjustment the functioning would then consider the document level or query level factors to further adjust this score, for example, document [inaudible]. so, this general form would cover many state of [inaudible] functions. let's look at how we can score documents with such a function using virtual index. so, here's a general algorithm that works as follows. first this query level and document level factors can be pre-computed in the indexing time. of course, for the query we have to compute it at the query time but for document, for example, document [inaudible] can be pre-computed. and then, we maintain a score accumulator for each document d to computer h. an h is an aggregation function over all the matching query terms. so how do we do that? for each period term we're going to do fetch the inverted list from the invert index. this will give us all the documents that match this query term and that includes d1, f1 and so dn fn. so each pair is a document id and the frequency of the term in the document. then for each entry d sub j and f sub j are particular match of the term in this particular document d sub j. we'll going to compute the function g that would give us something like weight of this term, so we're computing the weight completion of matching this query term in this document. and then, we're going to update the score accumulator for this document and this would allow us to add this to our accumulator that would incrementally compute function h. so this is basically a general way to allow pseudo computer or functions of this form by using the inbound index. note that we don't have to attach any of document and that didn't match any query term. well, this is why it's fast, we only need to process the documents that matched at least one query term. in the end, then we're going to adjust the score the computer this function f sub a and then we can sort. so let's take a look at a specific example. in this case, let's assume the scoring function is a very simple one, it just takes the sum of t f, the role of t f, the count of a term in the document. this simplification would help shield the algorithm clearly. it's very easy to extend the computation to include other weights like the transformation of tf, or [inaudible] or idf [inaudible]. so let's take a look at specific example, where the queries information security and it show some entries of invert index on the right side. information occurred in four documents and their frequencies are also there, security occurred in three documents. so let's see how the arrows works, so first we iterate overall query terms and we fetch the first query then, what is that? that's information, right? and imagine we have all these score accumulators who score the, scores for these documents. we can imagine there will be other but then they will only be allocated as needed. so before we do any waiting of terms, we don't even need a score of. that comes actually we have these score accumulators eventually allocating. so lets fetch the interest from the entity [inaudible] for information, that the first one. so these four accumulators obviously would be initialize as zeros. so, the first entry is d1 and 3, 3 is occurrences of information in this document. since our scoring function assume that the score is just a sum of these raw counts. we just need to add a 3 to the score accumulator to account for the increase of score due to matching this term information, a document d1. and then, we go to the next entry, that's d2 and 4 and then we add a 4 to the score accumulator of d2. of course, at this point, that we will allocate the score accumulator as needed. and so at this point, we allocated the d1 and d2, and the next one is d3, and we add one, we allocate another score [inaudible] d3 and add one to it. and then finally, the d4 gets a 5, because the term information occurred five times in this document. okay, so this completes the processing of all the entries in the invert index for information. it processed all the contributions of matching information in this four documents. so now, our error will go to the next that's security. so, we're going to fetch all the inverted index entries for security. so, in this case, there are three entries, and we're going to go through each of them. the first is d2 and 3 and that means security occur three humps in d2 and what do we do? well, we do exactly the same, as what we did for information. so, this time we're going to change the score [inaudible] d2 since it's already allocated and what we do is we'll add 3 to the existing value which is a 4, so we now get a 7 for d2. d2 score is increased because the match that falls the information and the security. go to the next entry, that's d4 and 1, so we would the score for d4 and again, we add 1 to d4 so d4 goes from 5 to 6. finally, we process d5 and a 3. since we have not yet allocated a score accumulated for d5, at this point, we're going to allocate 1 for d5, and we're going to add a 3 to it. so, those scores, of the last rule, are the final scores for these documents. if our scoring function is just a simple some of tf values. now, what if we, actually, would like to do form addition? well, we going to do the [inaudible] at this point, for each document. so, to summarize this, all right, so you can see, we first process the information determine query term information and we processed all the entries in what index for this term. then we process the security, all right, its worst think about what should be the order of processing here when we can see the query terms? it might make a difference especially if we don't want to keep all the score accumulators. let's say, we only want to keep the most promising score accumulators. what do you think would be a good order to go through? would you process a common term first or would you process a rare term first? the answers is we just go to who should process the rare term first. a rare term would match a few documents, and then the score contribution would be higher, because the ideal value would be higher. and then, it allows us to attach the most diplomacy documents first. so, it helps pruning some non-promising ones, if we don't need so many documents to be returned to the user. so those are all heuristics for further improving the accuracy. here you can also see how we can incorporate the idea of waiting, right? so they can [inaudible] when we incorporate [inaudible] when we process each query time. when we fetch the inverted index we can fetch the document frequency and then we can compute idf. or maybe perhaps the idf value has already been precomputed when we indexed the documents. at that time, we already computed the idf value that we can just fetch it, so all these can be done at this time. so that would mean when we process all the entries for information, these words would be adjusted by the same idf, which is idf for information. so this is the basic idea of using inverted index for fast research and it works well for all kinds of formulas that are of the general form. and this generally, the general form covers actually most state of art retrieval functions. so there are some tricks to further improve the efficiency, some general techniques to encode the caching. this is we just store some results of popular queries, so that next time when you see the same query, you simply return the stored results. similarly, you can also slow the list of inverted index in the memory for a popular term. and if the query term is popular likely, you will soon need to factor the inverted index for the same term again. so keeping it in the memory would help, and these are general techniques for improving efficiency. we can also keep only the most promising accumulators because a user generally doesn't want to examine so many documents. we only need to return high qualities subset of documents that likely are ranked on the top. for that purpose, we can then prune the accumulators. we don't have to store all the accumulators. at some point, we just keep the highest value accumulators. another technique is to do parallel processing and that's needed for really process in such a large data set like the web data set. and you scale up to the web-scale really to have the special techniques you do parallel processing and to distribute the storage of files on machines. so here is a list of some text retrieval toolkits, it's not a complete list. you can find more information at this url on the bottom. and here, i listed your four here, lucene's one of the most popular toolkits that can support a lot of applications and it has very nice support for applications. you can use it to build a search engine application very quickly. the downside is that it's not that easy to extend it, and the algorithms implemented they are also not the most advanced algorithms. lemur or indri is another toolkit that does not have such a nice support web application as lucene but it has many advanced search algorithms and it's also easy to extend. terrier is yet another toolkit that also has good support for application capability and some advanced algorithms. so that's maybe in between lemur or lucene, or maybe rather combining the strands of both, so that's also useful tool kit. meta is a toolkit that we will use for the problem assignment and this is a new toolkit that has a combination of both text retrieval algorithms and text mining algorithms. and so talking models are implement they are a number of text analysis algorithms implemented in the toolkit as well as basic search algorithms. so to summarize all the discussion about the system implementation, here are the major takeaway points. inverted index is the primary data structure for supporting a search engine and that's the key to enable faster response to a user's query. and the basic idea is to preprocess the data as much as we can, and we want to do compression when appropriate. so that we can save disk space and we can speed up io and processing of inverted index in general. we talked about how to construct the invert index when the data can't fit into the memory. and then we talk about faster search using that index basically, what's we exploit the invective index to accumulate a scores for documents [inaudible] algorithm. and we exploit the zipf's law to avoid the touching many documents that don't match any query term and this algorithm can actually support a wide range of ranking algorithms. so these basic techniques have great potential for further scaling up using distributed file system, parallel processing, and caching. here are two additional readings you can take a look, if you have time and you are interested in learning more about this. the first one is a classical textbook on the efficiency o inverted index and the compression techniques. and how to, in general feel that the efficient any inputs of the space, overhead and speed. the second one is a newer textbook that has a nice discussion of implementing and evaluating search engines. [music",06_lesson-2-6-system-implementation-fast-search
38,https://www.coursera.org/learn/text-retrieval,05_lesson-2-5-system-implementation-inverted-index-construction.en.txt,text-retrieval/03_week-2/02_week-2-lessons/05_lesson-2-5-system-implementation-inverted-index-construction.en.txt,"[sound] this lecture is about the inverted index construction. in this lecture, we will continue the discussion of system implementation. in particular, we're going to discuss how to construct the inverted index. the construction of the inverted index is actually very easy if the dataset is very small. it's very easy to construct a dictionary and then store the postings in a file. the problem is that when our data is not able to fit to the memory then we have to use some special method to deal with it. and unfortunately, in most retrieval applications the dataset will be large. and they generally cannot be loaded into memory at once. and there are many approaches to solve that problem, and sorting-based method is quite common and works in four steps as shown here. first, you collect the local termid, documentid and frequency tuples. basically you will locate the terms in a small set of documents. and then once you collect those accounts you can sort those count based on terms. so that you will be able to local a partial inverted index and these are called rounds. and then you write them into a temporary file on the disk and then you merge in step 3. do pairwise merging of these runs, until you eventually merge all the runs and generate a single inverted index. so this is an illustration of this method. on the left you see some documents and on the right we have a term lexicon and a document id lexicon. these lexicons are to map string-based representations of document ids or terms into integer representations or map back from integers to the stream representation. the reason why we want our interest using integers to present these ids is because integers are often easier to handle. for example, integers can be used as index for array, and they are also easy to compress. so this is one reason why we tend to map these strings into integers, so that we don't have to carry these strings around. so how does this approach work? well, it's very simple. we're going to scan these documents sequentially and then parse the documents and count the frequencies of terms. and in this stage we generally sort the frequencies by document ids, because we process each document sequentially. so we'll first encounter all the terms in the first document. therefore the document ids are all ones in this case. and this will be followed by document ids two and they are natural results in this only just because we process the data in a sequential order. at some point, we will run out of memory and that would have to write them into the disc. before we do that we 're going to sort them, just use whatever memory we have. we can sort them and then this time we're going to sort based on term ids. note that here, we're using the term ids as a key to sort. so all the entries that share the same term would be grouped together. in this case, we can see all the ids of documents that match term 1 would be grouped together. and we're going to write this into that this is a temporary file. and would that allows you to use the memory to process and makes a batch of documents. and we're going to do that for all the documents. so we're going to write a lot of temporary files into the disc. and then the next stage is we do merge sort basically. we're going to merge them and then sort them. eventually, we will get a single inverted index, where the entries are sorted based on term ids. and on the top, we're going to see these are the older entries for the documents that match term id 1. so this is basically, how we can do the construction of inverted index. even though the data cannot be all loaded into the manner. now, we mention earlier that because of hostings are very large, it's desirable to compress them. so let's now take a little bit how we compressed inverted index. well the idea of compression in general, is for leverage skewed distributions of values. and we generally have to use variable-length encoding, instead of the fixed-length encoding as we use by default in a program manager like c++. and so how can we leverage the skewed distributions of values to compress these values? well in general, we will use few bits to encode those frequent words at the cost of using longer bit string code those rare values. so in our case, let's think about how we can compress the tf, tone frequency. now, if you can picture what the inverted index look like, and you will see in post things, there are a lot of tone frequencies. those are the frequencies of terms in all those documents. now, if you think about it, what kind of values are most frequent there? you probably will be able to guess that small numbers tend to occur far more frequently than large numbers. why? well, think about the distribution of words and this is to do the sip of slopes, and many words occur just rarely so we see a lot of small numbers. therefore, we can use fewer bits for the small, but highly frequent integers and that's cost of using more bits for larger integers. this is a trade off of course. if the values are distributed to uniform, then this won't save us any space, but because we tend to see many small values, they are very frequent. we can save on average even though sometimes when we see a large number we have to use a lot of bits. what about the document ids that we also saw in postings? well they are not distributed in the skewed way. so how can we deal with that? well it turns out that we can use a trick called a d-gap and that is to store the difference of these term ids. and we can imagine if a term has matched that many documents then there will be longest of document ids. so when we take the gap, and we take the difference between adjacent document ids, those gaps will be small. so again, see a lot of small numbers. whereas if a term occurred in only a few documents, then the gap would be large, the large numbers would not be frequent. so this creates some skewed distribution, that would allow us to compress these values. this is also possible because in order to uncover or uncompress these document ids, we have to sequentially process the data. because we stored the difference and in order to recover the exact document id we have to first recover the previous document id. and then we can add the difference to the previous document id to restore the current document id. now this was possible because we only needed to have sequential access to those document ids. once we look up the term, we look up all the document ids that match the term, then we sequentially process them. so it's very natural, that's why this trick actually works. and there are many different methods for encoding. so binary code is a commonly used code in just any program language. we use basically fixed glance in coding. unary code, gamma code, and delta code are all possibilities and there are many other possibilities. so let's look at some of them in more detail. binary coding is really equal length coding, and that's a property for randomly distributed values. the unary coding is a variable length in coding method. in this case, integer this 1 will be encoded as x -1, 1 bit followed by 0. so for example, 3 will be encoded as 2, 1s followed by 0, whereas 5 will be encoded as 4, 1s, followed by 0, etc. so now you can imagine how many bits do we have to use for a large number like 100? so how many bits do you have to use exactly for a number like 100? well exactly, we have to use 100 bits. so it's the same number of bits as the value of this number. so this is very inefficient if you were likely to see some large numbers. imagine if you occasionally see a number like 1,000, you have to use 1,000 bits. so this only works well if you are absolutely sure that there will be no large numbers, mostly very often you see very small numbers. now, how do you decode this code? now since these are variable length encoding methods, you can't just count how many bits and then just stop. you can't say 8-bits or 32-bits, then you will start another code. they are variable length, so you will have to rely on some mechanism. in this case for unary, you can see it's very easy to see the boundary. now you can easily see 0 would signal the end of encoding. so you just count up how many 1s you have seen and at the end you hit 0. you have finished one number, you will start another number. now we just saw that unary coding is too aggressive. in rewarding small numbers, and if you occasionally can see a very big number, it would be a disaster. so what about some other less aggressive method? well gamma coding's one of them and in this method we can use unary coding for a transform form of that. so it's 1 plus the floor of log of x. so the magnitude of this value is much lower than the original x. so that's why we can afford using unary code for that. and so first i have the unary code for coding this log of x. and this would be followed by a uniform code or binary code. and this basically the same uniform code, and binary code are the same. and we're going to use this coder to code the remaining part of the value of x. and this is basically precisely x-1 to the floor of log of x so the unary code are basically called the flow of log of x, well add one there and here. but the remaining part we'll be using uniform code through actually code the difference between the x and this 2 to the log of x. and it's easy to show that for this difference we only need to use up to this many bits and the floor of log of x bits. and this is easy to understand, if the difference is too large, then we would have a higher floor of log of x. so here are some examples for example, 3 is is encoded as 101. the first two digits are the unary code. so this isn't for the value 2, 10 encodes 2 in unary coding. and so that means the floor of log of x is 1, because we won't actually use unary codes. in code 1 plus the flow of log of x, since this is two then we know that the flow of log of x is actually 1. so that 3 is still larger than 2 to the 1. so the difference is 1, and the 1 is encoded here at the end. so that's why we have 101 for 3. now similarly 5 is encoded as 110, followed by 01. and in this case the unary code in code 3. and so this is a unary code 110 and so the flow of log of x is 2. and that means we're going to compute a difference between 5 and the 2 to the 2 and that's 1. and so we now have again 1 at the end. but this time we're going to use 2 bits, because with this level of flow of log of x. we could have more numbers a 5, 6, 7 they would all share the same prefix here, 110. so in order to differentiate them, we have to use 2 bits in the end to differentiate them. so you can imagine 6 would be 10 here in the end instead of 01 after 10. it's also true that the form of a gamma code is always the first odd number of bits, and in the center there is a 0. that's the end of the unary code. and before that or on the left side of this 0, there will be all 1s. and on the right side of this 0, it's binary coding or uniform coding. so how can you decode such code? well you again first do unary coding. once you hit 0, you have got the unary code and this also tell you how many bits you have to read further to decode the uniform code. so this is how you can decode a gamma code. there is also a delta code that's basically the same as a gamma code except that you replace the unary prefix with the gamma code. so that's even less conservative than gamma code in terms of wording the small integers. so that means, it's okay if you occasionally see a large number. it's okay with delta code. it's also fine with the gamma code, it's really a big loss for unary code. and they are all operating of course, at different degrees of favoring short or favoring small integers. and that also means they would be appropriate for a sorting distribution. but none of them is perfect for all distributions. and which method works the best would have to depend on the actual distribution in your dataset. for inverted index compression, people have found that gamma coding seems to work well. so how to uncompress inverted index? i will just talk about this. firstly, you decode those encoded integers. and we just i think discussed the how we decode unary coding and gamma coding. what about the document ids that might be compressed using d-gap? well, we're going to do sequential decoding so supposed the encoded i list is x1, x2, x3 etc. we first decode x1 to obtain the first document id, id1. then we can decode x2, which is actually the difference between the second id and the first one. so we have to add the decoder value of x2 to id1 to recover the value of the id at this secondary position. so this is where you can see the advantages of converting document ids to integers. and that allows us to do this kind of compression. and we just repeat until we decode all the documents. every time we use the document id in the previous position to help to recover the document id in the next position. [music",05_lesson-2-5-system-implementation-inverted-index-construction
39,https://www.coursera.org/learn/text-retrieval,04_lesson-2-4-implementation-of-tr-systems.en.txt,text-retrieval/03_week-2/02_week-2-lessons/04_lesson-2-4-implementation-of-tr-systems.en.txt,"[music] this lecture is about the implementation of text retrieval systems. in this lecture we will discuss how we can implement a text retrieval method to build a search engine. the main challenge is to manage a lot of text data and to enable a query to be answered very quickly and to respond to many queries. this is a typical text retrieval system architecture. we can see the documents are first processed by a tokenizer to get tokenized units, for example, words. and then, these words, or tokens, will be processed by a indexer that will create a index, which is a data structure for the search engine to use to quickly answer a query. and the query would be going through a similar processing step. so the tokenizer would be apprised of the query as well, so that the text can be processed in the same way. the same units would be matched with each other. the query's representation would then be given to the scorer, which would use the index to quickly answer user's query by scoring the documents and then ranking them. the results will be given to the user. and then the user can look at the results and provided us some feedback that can be explicit judgements of both which documents are good, which documents are bad. or implicit feedback such as so that user didn't have to do anything extra. end user will just look at the results, and skip some, and click on some result to view. so these interacting signals can be used by the system to improve the ranking accuracy by assuming that viewed documents are better than the skipped ones. so a search engine system then can be divided into three parts. the first part is the indexer, and the second part is a scorer that responds to the users query, and the third part is a feedback mechanism. now typically, the indexer is done in the offline manner, so you can pre-process the correct data and to build the inventory index, which we will introduce in moment. and this data structure can then be used by the online module which is a scorer to process a user's query dynamically and quickly generate search results. the feedback mechanism can be done online or offline, depending on the method. the implementation of the indexer and the scorer is very standard, and this is the main topic of this lecture and the next few lectures. the feedback mechanism, on the other hand, has variations, it depends on which method is used. so that is usually done in algorithms specific way. let's first talk about the tokenizer. tokernization is a normalized lexical units in through the same form, so that semantically similar words can be matched with each other. now, in the language like english, stemming is often used and this will map all the inflectional forms of words into the same root form. so for example, computer, computation, and computing can all be matched to the root form compute. this way all these different forms of computing can be matched with each other. now normally, this is a good idea, to increase the coverage of documents that are matched up with this query. but it's also not always beneficial, because sometimes the subtlest difference between computer and computation might still suggest the difference in the coverage of the content. but in most cases, stemming seems to be beneficial. when we tokenize the text in some other languages, for example chinese, we might face some special challenges in segmenting the text to find the word boundaries. because it's not obvious where the boundary is as there's no space to separate them. so here of course, we have to use some language specific processing techniques. once we do tokenization, then we would index the text documents and than it'll convert the documents and do some data structure that can enable faster search. the basic idea is to precompute as much as we can basically. so the most commonly used index is call an inverted index. and this has been used in many search engines to support basic search algorithms. sometimes the other indices, for example, document index might be needed in order to support feedback, like i said. and these kind of techniques are not really standard in that they vary a lot according to the feedback methods. to understand why we want to use inverted index it will be useful for you to think about how you would respond to a single term query quickly. so if you want to use more time to think about that, pause the video. so think about how you can pre process the text data so that you can quickly respond to a query with just one word. where if you have thought about that question, you might realize that where the best is to simply create the list of documents that match every term in the vocabulary. in this way, you can basically pre-construct the answers. so when you see a term you can simply just to fetch the random list of documents for that term and return the list to the user. so that's the fastest way to respond to a single term here. now the idea of the invert index is actually, basically, like that. we're going to do pre-constructed search an index, that will allows us to quickly find all the documents that match a particular term. so let's take a look at this example. we have three documents here, and these are the documents that you have seen in some previous lectures. suppose that we want to create an inverted index for these documents. then we want to maintain a dictionary, in the dictionary we will have one entry for each term and we're going to store some basic statistics about the term. for example, the number of documents that match the term, or the total number of code or frequency of the term, which means we would kind of duplicate the occurrences of the term. and so, for example, news, this term occur in all the three documents, so the count of documents is three. and you might also realize we needed this count of documents, or document frequency, for computing some statistics to be used in the vector space model. can you think of that? so what weighting heuristic would need this count. well, that's the idea, right, inverse document frequency. so, idf is the property of a term, and we can compute it right here. so, with the document that count here, it's easy to compute the idea of, either at this time, or with the old index, or. at random time when we see a query. now in addition to these basic statistics, we'll also store all the documents that matched the news, and these entries are stored in the file called postings. so in this case it matched three documents and we store information about these three documents here. this is the document id, document 1 and the frequency is 1. the tf is one for news, in the second document it's also 1, et cetera. so from this list, we can get all the documents that match the term news and we can also know the frequency of news in these documents. so, if the query has just one word, news, and we have easily look up to this table to find the entry and go quicker into the postings to fetch all the documents that matching yours. so, let's take a look at another term. this time, let's take a look at the word presidential. this would occur in only one document, document 3. so the document frequency is 1 but it occurred twice in this document. so the frequency count is two, and the frequency count is used for some other reachable method where we might use the frequency to assess the popularity of a term in the collection. similarly we'll have a pointer to the postings here, and in this case, there is only one entry here because the term occurred in just one document and that's here. the document id is 3 and it occurred twice. so this is the basic idea of inverted index. it's actually pretty simple, right? with this structure we can easily fetch all the documents that match a term. and this will be the basis for scoring documents for a query. now sometimes we also want to store the positions of these terms. so in many of these cases the term occurred just once in the document. so there's only one position for example in this case. but in this case, the term occurred twice so there's two positions. now the position information is very useful for the checking whether the matching of query terms is actually within a small window of, let's say, five words or ten words. or, whether the matching of the two query terms is, in fact, a phrase of two words. that this can all be checked quickly by using the position from each. so, why is inverted index good for fast search? well, we just talked about the possibility of using the two answer single-term query. and that's very easy. what about the multiple term queries? well let's first look at the some special cases of the boolean query. a boolean query is basically a boolean expression like this. so i want the value in the document to match both term a and term b. so that's one conjunctive query. or i want the web documents to match term a or term b. that's a disjunctive query. but how can we answer such a query by using inverted index? well if you think a bit about it, it would be obvious because we have simply fetch all the documents that match term a and also fetch all the documents that match term b. and then just take the intersection to answer a query like a and b. or to take the union to answer the query a or b. so this is all very easy to answer. it's going to be very quick. now what about the multi-term keyword query? we talked about the vector space model for example and we will do a match such query with document and generate the score. and the score is based on aggregated term weights. so in this case it's not the boolean query but the scoring can be actually done in similar way. basically it's similar to disjunctive boolean query. basically, it's like a or b. we take the union of all the documents that match at least one query term and then we would aggregate the term weights. so this is a basic idea of using inverted index for scoring documents in general. and we're going to talk about this in more detail later. but for now, let's just look at the question why is in both index, a good idea? basically why is more efficient than sequentially just scanning documents. this is the obvious approach. you can just compute a score for each document and then you can then sort them. and this is a straightforward method but this is going to be very slow imagine the wealth, there's a lot of documents. if you do this then it will take a long time to answer your query. so the question now is why would the invert index be much faster? well it has to do is the word distribution in text. so, here's some common phenomena of word distribution in the text. there are some languages independent of patterns that seem to be stable. and these patterns are basically characterized by the following pattern. a few words like the common words like the, a, or we occur very, very frequently in text. so they account for a large percent of occurrences of words. but most words would occur just rarely. there are many words that occur just once, let's say, in a document or once in the collection. and there are many such. it's also true that the most frequent the words in one corpus they have to be rare in another. that means although the general phenomenon is applicable, was observed in many cases that exact words that are common may vary from context to context. so this phenomena is characterized by what's called a zipf's law. this law says that the rank of a word multiplied by the frequency of the word is roughly constant. so formally if we use f(w) to denote the frequency, r(w) to denote the rank of a word. then this is the formula. it basically says the same thing, just mathematical term. where c is basically a constant and so, and there is also a parameter, alpha, that might be adjusted to better fit any empirical observations. so if i plot the word frequencies in sorted order, then you can see this more easily. the x axis is basically the word rank. this is r(w) and the y axis is word frequency or f(w). now this curve shows that the product of the two is roughly the constant. now if you look at these words, we can see they can be separated into three groups. in the middle, it's the intermediary frequency words. these words tend to occur quite in a few documents, but they are not like those most frequent words. and they are also not very rare. so they tend to be often used in queries and they also tend to have high tf-idf weights. these intermediate frequency words. but if you look at the left part of the curve, these are the highest frequency words. they are covered very frequently. they are usually words, like the, we, of etc. those words are very, very frequent and they are in fact the two frequent to be discriminated, and they are generally not very useful for retrieval. so they are often removed and this is called the stop words removal. so you can use pretty much just the kind of words in the collection to kind of infer what words might be stop words. those are basically the highest frequency words. and they also occupy a lot of space in the inverted index. you can imagine the posting entries for such a word would be very long. and then therefore, if you can remove such words you can save a lot of space in the inverted index. we also show the tail part, which has a lot of rare words. those words don't occur very frequently, and there are many such words. those words are actually very useful for search also, if a user happens to be interested in such a topic. but because they're rare, it's often true that users aren't necessarily interested in those words. but retain them would allow us to match such a document accurately. they generally have very high idf. so what kind of data structures should we use to store inverted index? well, it has two parts, right. if you recall, we have a dictionary and we also have postings. the dictionary has modest size, although for the web it's still going to be very large but compare it with postings it's more distinct. and we also need to have fast random access to the entries because we're going to look up on the query term very quickly. so therefore, we'd prefer to keep such a dictionary in memory if it's possible. if the collection is not very large, this is feasible, but if the collection is very large then it's in general not possible. if the vocabulary size is very large, obviously we can't do that. so, in general that's how it goes. so the data structures that we often use for storing dictionary, it would be direct access. there are structures like hash table, or b-tree if we can't store everything in memory or use disk. and then try to build a structure that would allow it to quickly look up entries. for postings they are huge. and in general, we don't have to have direct access to a specific entry. we generally would just look up a sequence of document ids and frequencies for all the documents that matches the query term. so would read those entries sequentially. and therefore because it's large and we generally have store postings on disc, they have to stay on disc and they would contain information such as document ids, term frequency or term positions, etcetera. now because they are very large, compression is often desirable. now this is not only to save disc space, and this is of course one benefit of compression, it it's not going to occupy that much space. but it's also to help improving speed. can you see why? well, we know that input and output would cost a lot of time. in comparison with the time taken by cpu. so, cpu is much faster but io takes time and so by compressing the inverter index, opposing files will become smaller, and the entries, that we have the readings, and memory to process a query term, would be smaller, and then, so we can reduce the amount of tracking io and that can save a lot of time. of course, we have to then do more processing of the data when we uncompress the data in the memory. but as i said cpu is fast. so over all we can still save time. so compression here is both to save disc space and to speed up the loading of the index. [music",04_lesson-2-4-implementation-of-tr-systems
40,https://www.coursera.org/learn/text-retrieval,02_lesson-2-2-tf-transformation.en.txt,text-retrieval/03_week-2/02_week-2-lessons/02_lesson-2-2-tf-transformation.en.txt,"[music] in this lecture, we continue the discussion of vector space model. in particular, we're going to talk about the tf transformation. in the previous lecture, we have derived a tf idea of weighting formula using the vector space model. and we have assumed that this model actually works pretty well for these examples as shown on this slide, except for d5, which has received a very high score. indeed, it has received the highest score among all these documents. but this document is intuitive and non-relevant, so this is not desirable. in this lecture, we're going to talk about, how we're going to use tf transformation to solve this problem. before we discuss the details, let's take a look at the formula for this simple tf-idf weighting ranking function. and see why this document has received such a high score. so this is the formula, and if you look at the formula carefully, then you will see it involves a sum over all the matched query terms. and inside the sum, each matched query term has a particular weight. and this weight is tf-idf weighting. so it has an idea of component, where we see two variables. one is the total number of documents in the collection, and that is m. the other is the document of frequency. this is the number of documents that are contained. this word w. the other variables involved in the formula include the count of the query term. w in the query, and the count of the word in the document. if you look at this document again, now it's not hard to realize that the reason why it hasn't received a high score is because it has a very high count of campaign. so the count of campaign in this document is a 4, which is much higher than the other documents, and has contributed to the high score of this document. so in treating the amount to lower the score for this document, we need to somehow restrict the contribution of the matching of this term in the document. and if you think about the matching of terms in the document carefully, you actually would realize, we probably shouldn't reward multiple occurrences so generously. and by that i mean, the first occurrence of a term says a lot about the matching of this term, because it goes from zero count to a count of one. and that increase means a lot. once we see a word in the document, it's very likely that the document is talking about this word. if we see a extra occurrence on top of the first occurrence, that is to go from one to two, then we also can say that, well the second occurrence kind of confirmed that it's not a accidental managing of the word. now we are more sure that this document is talking about this word. but imagine we have seen, let's say, 50 times of the word in the document. now, adding one extra occurrence is not going to test more about the evidence, because we're already sure that this document is about this word. so if you're thinking this way, it seems that we should restrict the contribution of a high count of a term, and that is the idea of tf transformation. so this transformation function is going to turn the real count of word into a term frequency weight for the word in the document. so here i show in x axis that we'll count, and y axis i show the term frequency weight. so in the previous breaking functions, we actually have imprison rate use some kind of transformation. so for example, in the 0/1 bit vector recantation, we actually use such a transformation function, as shown here. basically if the count is 0, then it has 0 weight, otherwise it would have a weight of 1. it's flat. now, what about using term count as tf weight? well, that's a linear function, so it has just exactly the same weight as the count. now we have just seen that this is not desirable. so what we want is something like this. so for example, with an algorithm function, we can't have a sublinear transformation that looks like this. and this will control the influence of really high weight, because it's going to lower its inference. yet, it will retain the inference of small counts. or we might want to even bend the curve more by applying logarithm twice. now people have tried all these methods. and they are indeed working better than the linear form of the transformation. but so far, what works the best seems to be this special transformation, called a bm25 transformation. bm stands for best matching. now in this transformation, you can see there's a parameter k here. and this k controls the upper bound of this function. it's easy to see this function has a upper bound, because if you look at the x divided by x + k, where k is a non-active number, then the numerator will never be able to exceed the denominator, right? so it's upper bounded by k+1. now, this is also difference between this transformation function and a logarithm transformation. which it doesn't have upper bound. furthermore, one interesting property of this function is that, as we vary k, we can actually simulate different transformation functions. including the two extremes that are shown here. that is, the 0/1 bit transformation and the linear transformation. so for example, if we set k to 0, now you can see the function value will be 1. so we precisely recover the 0/1 bit transformation. if you set k to very large number on the other hand, it's going to look more like the linear transformation function. so in this sense, this transformation is very flexible. it allows us to control the shape of the transformation. it also has a nice property of the upper bound. and this upper bound is useful to control the inference of a particular term. and so that we can prevent a spammer from just increasing the count of one term to spam all queries that might match this term. in other words, this upper bound might also ensure that all terms would be counted when we aggregate the weights to compute the score. as i said, this transformation function has worked well so far. so to summarize this lecture, the main point is that we need to do sublinear tf transformation, and this is needed to capture the intuition of diminishing return from higher term counts. it's also to avoid the dominance by one single term over all others. this bm25 transformation that we talked about is very interesting. it's so far one of the best-performing tf transformation formulas. it has upper bound, and so it's also robust and effective. now if we're plugging this function into our tf-idf weighting vector space model. then we'd end up having the following ranking function, which has a bm25 tf component. now, this is already very close to a state of the odd ranking function called bm25. and we'll discuss how we can further improve this formula in the next lecture. [music",02_lesson-2-2-tf-transformation
41,https://www.coursera.org/learn/text-retrieval,03_lesson-2-3-doc-length-normalization.en.txt,text-retrieval/03_week-2/02_week-2-lessons/03_lesson-2-3-doc-length-normalization.en.txt,"[sound] this lecture is about document length normalization in the vector space model. in this lecture, we will continue the discussion of the vector space model. in particular, we're going to discuss the issue of document length normalization. so far in the lectures about the vector space model, we have used the various signals from the document to assess the matching of the document with a query. in particular, we have considered the tone frequency. the count of a tone in a document. we have also considered it's global statistics such as, idf, inverse document frequency. but we have not considered document lengths. so here i show two example documents, d4 is much shorter with only 100 words. d6 on the other hand, has a 5000 words. if you look at the matching of these query words, we see that in d6, there are more matchings of the query words. but one might reason that, d6 may have matched these query words in a scattered manner. so maybe the topic of d6, is not really about the topic of the query. so, the discussion of the campaign at the beginning of the document, may have nothing to do with the managing of presidential at the end. in general, if you think about the long documents, they would have a higher chance for matching any query. in fact, if you generate a long document randomly by assembling words from a distribution of words, then eventually you probably will match an inquiry. so in this sense, we should penalize on documents because they just naturally have better chance matching to any query, and this is idea of document normalization. we also need to be careful in avoiding to over penalize long documents. on the one hand, we want to penalize the long document. but on the other hand, we also don't want to over-penalize them. now, the reasoning is because a document that may be long because of different reasons. in one case, the document may be long because it uses more words. so for example, think about the vortex article on the research paper. it would use more words than the corresponding abstract. so, this is a case where we probably should penalize the matching of long documents such as a full paper. when we compare the matching of words in such a long document with matching of the words in the shop abstract. then long papers in general, have a higher chance of matching clearer words, therefore, we should penalize them. however, there is another case when the document is long, and that is when the document simply has more content. now consider another case of long document, where we simply concatenate a lot of abstracts of different papers. in such a case, obviously, we don't want to over-penalize such a long document. indeed, we probably don't want to penalize such a document because it's long. so that's why, we need to be careful about using the right degree of penalization. a method of that has been working well, based on recent results, is called a pivoted length normalization. and in this case, the idea is to use the average document length as a pivot, as a reference point. that means we'll assume that for the average length documents, the score is about right so the normalizer would be 1. but if the document is longer than the average document length, then there will be some penalization. whereas if it's a shorter, then there is even some reward. so this is illustrated at using this slide, on the axis, x-axis you can see the length of document. on the y-axis, we show the normalizer. in this case, the pivoted length normalization formula for the normalizer, is seeing to be interpolation of 1 and the normalize the document in length controlled by a parameter b here. so you can see here, when we first divide the length of the document by the average documents, this not only gives us some sense about how this document is compared with average documents, but also gives us a benefit of not worrying about the unit of length. we can measure the length by words or by characters. anyway, this normalizer has interesting property. first we see that, if we set the parameter b to 0 then the value would be 1. so, there's no lens normalization at all. so, b, in this sense, controls the lens normalization. whereas, if we set b to a nonzero value, then the normalizer would look like this. all right, so the value would be higher for documents that are longer than the average document lens. whereas, the value of the normalizer would be shorter, would be smaller for shorter documents. so in this sense, we see there is a penalization for long documents, and there's a reward for short documents. the degree of penalization is controlled by b, because if we set b to a larger value, then the normalizer would look like this. there's even more penalization for long documents and more reward for the short documents. by adjusting b, which varies from 0 to 1, we can control the degree of length normalization. so, if we plug in this length normalization fact that into the vector space model, ranking functions is that we have already examined them. then we will end up having the following formulas. and these are in fact the state of the vector space model formulas. let's take a look at each of them. the first one is called a pivoted length normalization vector space model, and a reference in [inaudible] duration of this model. and here we see that, it's basically a tfi model that we have discussed, the idea of component should be very familiar to you. there is also a query term frequency component here. and then, in the middle, there is the normalizer tf and in this case, we see we use the double logarithm as we discussed before and this is to achieve a sublinear transformation. but we also put a document the length normalizer in the bottom. right, so this would cause penalization for long document, because the larger the denominator is, then the smaller the is. and this is of course controlled by the parameter b here. and you can see again, if b is set to 0 then there is no length normalization. okay, so this is one of the two most effective at these base model formulas. the next one called a bm25 or okapi, is also similar in that it also has a idf component here, and query idf component here. but in the middle, the normal issue's a little bit different. as we explained, there is our copy tf transformation here, and that does sublinear transformation with the upper bound. in this case we have put the length normalization factor here. we're adjusting k but it achieves a similar factor, because we put a normalizer in the denominator. therefore, again, if a document is longer then the term weight will be smaller. so you can see after we have gone through all the n answers that we talked about, and we have in the end reached the basically the state of god functions. so, so far, we have talked about mainly how to place the document vector in the vector space. and, this has played an important role in determining the effectiveness of the simple function. but there are also other dimensions, where we did not really examine details. for example, can we further improve the instantiation of the dimension of the vector space model? now, we've just assumed that the bag of words representation should issue dimension as a word but obviously, we can see there are many other choices. for example, a stemmed word, those are the words that haven't transformed into the same root form, so that computation and computing were all become the same and they can be match. we get those stop word removal. this is to remove some very common words that don't carry any content like the off. we get use of phrases to define dimensions. we can even use later in the semantical analysis, it will find some clusters of words that represent the a late in the concept as one by an engine. we can also use smaller unit, like a character end grams those are sequences of and the characters for dimensions. however, in practice, people have found that the bag-of-words representation with phrases is still the most effective one and it's also efficient. so, this is still so far the most popular dimension instantiation method. and it's used in all major search engines. i should also mention, that sometimes we need to do language specific and domain specific tokenization. and this is actually very important, as we might have variations of terms that might prevent us from matching them with each other, even when they mean the same thing. in some languages like chinese, there is also the challenge in segmenting text to obtain word band rates because it's just a sequence of characters. a word might correspond to one character or two characters or even three characters. so, it's easier in english when we have a space to separate the words. in some other languages, we may need to do some americanize processing to figure a way out of what are the boundaries for words. there is also the possibility to improve the similarity of the function. and so far we have used as a top product, but one can imagine there are other measures. for example, we can measure the cosine of the angle between two vectors. or we can use euclidean distance measure. and these are all possible, but dot product seems still the best and one reason is because it's very general. in fact that it's sufficiently general, if you consider the possibilities of doing waiting in different ways. so, for example, cosine measure can be thought of as the thought product of two normalized factors. that means, we first normalize each factor and then we take the thought product. that would be critical to the cosine measure. i just mentioned that the bm25, seems to be one of the most effective formulas. but there has been also further developments in improving bm25. although, none of these words have changed the bm25 fundamental. so in one line work, people have divide the bm25 f. here, f stands for field, and this is use bm25 for documents with structures. so for example, you might consider a title field, the abstract, or body of the research article. or even anchor text on the web page, those are the text fields that describe links to other pages and these can all be combined with a proper way of different fields to help improve scoring for different documents. when we use bm25 for such a document and the obvious choice is to apply bm25 for each field and then combine the scores. basically, the idea of bm25f is to first combine the frequency counts of terms in all the fields, and then apply bm25. now, this has advantage of avoiding over counting the first occurrence of the term. remember in the sublinear transformation of tf, the first occurrence is very important and it contributes a large weight. and if we do that for all the fields, then the same term might have gained a lot of advantage in every field. but when we combine these word frequencies together, we just do the transformation one time. at that time, then the extra occurrences will not be counted as fresh first recurrences. and this method has been working very well for scoring structure with documents. the other line of extension is called a bm25+. in this line, risk is to have to address the problem of over penalization of long documents by bm25. so to address this problem, the fix is actually quite simple. we can simply add a small constant to the tf normalization formula. but what's interesting is that, we can analytically prove that by doing such a small modification, we will fix the problem of over penalization of law documents by the original bm25. so the new formula called bm25+, is empirically and analytically shown to be better than bm25. so to summarize all what we have said about vector space model, here are the major take away points. first, in such a model, we use the similarity of relevance. assuming that relevance of a document with respect to a query, is basically proportional to the similarity between the query and the document. so naturally, that implies that the query and document must have been represented in the same way. and in this case, we will present them as vectors in high-dimensional vector space. where the dimensions are defined by words, or concepts, or terms, in general. and we generally, need to use a lot of heuristics to design the ranking function. we use some examples, which show the needs for several heuristics, including tf weighting and transformation. and idf weighting, and document length normalization. these major heuristics are the most important of heuristics, to ensure such a general ranking function to work well for all kinds of test. and finally, bm25 and pivoted normalization seem to be the most effective formulas out of the vector space model. now i have to say that, i put bm25 in the category of vector space model, but in fact, the bm25 has been derived using probabilistic model. so the reason why i've put it in the vector space model is first, the ranking function actually has a nice interpretation in the vector space model. we can easily see, it looks very much like a vector space model, with a special waiting function. the second reason is because the original bm25, has somewhat different form of idf. and that form of idf after the [inaudible] doesn't work so well as the standard idf that you have seen here. so as effective retrieval function, bm25 should probably use a heuristic modification of the idf. to make them even more look like a vector space model there are some additional readings. the first is, a paper about the pivoted length normalization. it's an excellent example of using empirical data analysis to suggest the need for length normalization and then further derive the length normalization formula. the second, is the original paper where the bm25 was proposed. the third paper, has a thorough discussion of bm25 and its extensions, particularly bm25 f. and finally, in the last paper has a discussion of improving bm25 to correct the over penalization of long documents. [music",03_lesson-2-3-doc-length-normalization
42,https://www.coursera.org/learn/text-retrieval,01_lesson-2-1-vector-space-model-improved-instantiation.en.txt,text-retrieval/03_week-2/02_week-2-lessons/01_lesson-2-1-vector-space-model-improved-instantiation.en.txt,"[sound] in this lecture, we are going to talk about how to improve the instantiation of the vector space model. this is a continued discussion of the vector space model. we're going to focus on how to improve the instantiation of this model. in the previous lecture, you have seen that with simple instantiations of the vector space model, we can come up with a simple scoring function that would give us basically an account of how many unique query terms are matched in the document. we also have seen that this function has a problem, as shown on this slide. in particular, if you look at these three documents, they will all get the same score because they match the three unique query words. but intuitively we would like d4 to be ranked above d3, and d2 is really not relevant. so the problem here is that this function couldn't capture the following heuristics. first, we would like to give more credit to d4 because it matched presidential more times than d3. second, intuitively, matching presidential should be more important than matching about, because about is a very common word that occurs everywhere. it doesn't really carry that much content. so in this lecture, let's see how we can improve the model to solve these two problems. it's worth thinking at this point about why do we have these problems? if we look back at assumptions we have made while instantiating the vector space model, we'll realize that the problem is really coming from some of the assumptions. in particular, it has to do with how we placed the vectors in the vector space. so then naturally, in order to fix these problems, we have to revisit those assumptions. perhaps we will have to use different ways to instantiate the vector space model. in particular, we have to place the vectors in a different way. so let's see how we can improve this. one natural thought is in order to consider multiple times of a term in the document, we should consider the term frequency instead of just the absence or presence. in order to consider the difference between a document where a query term occurred multiple times and one where the query term occurred just once, we have to consider the term frequency, the count of a term in the document. in the simplest model, we only modeled the presence and absence of a term. we ignored the actual number of times that a term occurs in a document. so let's add this back. so we're going to then represent a document by a vector with term frequency as element. so that is to say, now the elements of both the query vector and the document vector will not be 0 or 1s, but instead they will be the counts of a word in the query or the document. so this would bring in additional information about the document, so this can be seen as more accurate representation of our documents. so now let's see what the formula would look like if we change this representation. so as you'll see on this slide, we still use dot product. and so the formula looks very similar in the form. in fact, it looks identical. but inside the sum, of course, x i and y i are now different. they are now the counts of word i in the query and in the document. now at this point i also suggest you to pause the lecture for a moment and just to think about how we can interpret the score of this new function. it's doing something very similar to what the simplest vsm is doing. but because of the change of the vector, now the new score has a different interpretation. can you see the difference? and it has to do with the consideration of multiple occurrences of the same term in a document. more importantly, we would like to know whether this would fix the problems of the simplest vector space model. so let's look at this example again. so suppose we change the vector representation to term frequency vectors. now let's look at these three documents again. the query vector is the same because all these words occurred exactly once in the query. so the vector is still a 01 vector. and in fact, d2 is also essentially representing the same way because none of these words has been repeated many times. as a result, the score is also the same, still 3. the same is true for d3, and we still have a 3. but d4 would be different, because now presidential occurred twice here. so the ending for presidential in the document vector would be 2 instead of 1. as a result, now the score for d4 is higher. it's a 4 now. so this means by using term frequency, we can now rank d4 above d2 and d3, as we hoped to. so this solved the problem with d4. but we can also see that d2 and d3 are still filtering the same way. they still have identical scores, so it did not fix the problem here. so how can we fix this problem? intuitively, we would like to give more credit for matching presidential than matching about. but how can we solve the problem in a general way? is there any way to determine which word should be treated more importantly and which word can be basically ignored? about is such a word which does not really carry that much content. we can essentially ignore that. we sometimes call such a word a stock word. those are generally very frequent and they occur everywhere. matching it doesn't really mean anything. but computationally how can we capture that? so again, i encourage you to think a little bit about this. can you came up with any statistical approaches to somehow distinguish presidential from about? now if you think about it for a moment, you'll realize that one difference is that a word like above occurs everywhere. so if you count the occurrence of the word in the whole collection, then we will see that about has much higher frequency than presidential, which tends to occur only in some documents. so this idea suggests that we could somehow use the global statistics of terms or some other information to trying to down-weight the element of about in a vector representation of d2. at the same time, we hope to somehow increase the weight of presidential in the vector of d3. if we can do that, then we can expect that d2 will get the overall score to be less than 3 while d3 will get the score above 3. then we would be able to rank d3 on top of d2. so how can we do this systematically? again, we can rely on some statistical count. and in this case, the particular idea is called inverse document frequency. now we have seen document frequency as one signal used in the modern retrieval functions. we discussed this in a previous lecture. so here is the specific way of using it. document frequency is the count of documents that contain a particular term. here we say inverse document frequency because we actually want to reward a word that doesn't occur in many documents. and so the way to incorporate this into our vector representation is then to modify the frequency count by multiplying it by the idf of the corresponding word, as shown here. if we can do that, then we can penalize common words, which generally have a lower idf, and reward rare words, which will have a higher idf. so more specifically, the idf can be defined as the logarithm of m+1 divided by k, where m is the total number of documents in the collection, k is the df or document frequency, the total number of documents containing the word w. now if you plot this function by varying k, then you would see the curve would look like this. in general, you can see it would give a higher value for a low df word, a rare word. you can also see the maximum value of this function is log of m+1. it would be interesting for you to think about what's the minimum value for this function. this could be an interesting exercise. now the specific function may not be as important as the heuristic to simply penalize popular terms. but it turns out that this particular function form has also worked very well. now whether there's a better form of function here is the open research question. but it's also clear that if we use a linear penalization, like what's shown here with this line, then it may not be as reasonable as the standard idf. in particular, you can see the difference in the standard idf, and we somehow have a turning point of here. after this point, we're going to say these terms are essentially not very useful. they can be essentially ignored. and this makes sense when the term occurs so frequently and let's say a term occurs in more than 50% of the documents, then the term is unlikely very important and it's basically a common term. it's not very important to match this word. so with the standard idf you can see it's basically assumed that they all have low weights. there's no difference. but if you look at the linear penalization, at this point that there is still some difference. so intuitively we'd want to focus more on the discrimination of low df words rather than these common words. well, of course, which one works better still has to be validated by using the empirically correlated dataset. and we have to use users to judge which results are better. so now let's see how this can solve problem 2. so now let's look at the two documents again. now without the idf weighting before, we just have term frequency vectors. but with idf weighting we now can adjust the tf weight by multiplying with the idf value. for example, here we can see is adjustment and in particular for about there's adjustment by using the idf value of about, which is smaller than the idf value of presidential. so if you look at these, the idf will distinguish these two words. as a result, adjustment here would be larger, would make this weight larger. so if we score with these new vectors, then what would happen is that, of course, they share the same weights for news and campaign, but the matching of about will discriminate them. so now as a result of idf weighting, we will have d3 to be ranked above d2 because it matched a rare word, whereas d2 matched a common word. so this shows that the idf weighting can solve problem 2. so how effective is this model in general when we used tf-idf weighting? well, let's look at all these documents that we have seen before. these are the new scores of the new documents. but how effective is this new weighting method and new scoring function point? so now let's see overall how effective is this new ranking function with tf-idf weighting. here we show all the five documents that we have seen before, and these are their scores. now we can see the scores for the first four documents here seem to be quite reasonable. they are as we expected. however, we also see a new problem because now d5 here, which did not have a very high score with our simplest vector space model, now actually has a very high score. in fact, it has the highest score here. so this creates a new problem. this is actually a common phenomenon in designing retrieval functions. basically, when you try to fix one problem, you tend to introduce other problems. and that's why it's very tricky how to design effective ranking function. and what's the best ranking function is their open research question. researchers are still working on that. but in the next few lectures we're going to also talk about some additional ideas to further improve this model and try to fix this problem. so to summarize this lecture, we've talked about how to improve the vector space model, and we've got to improve the instantiation of the vector space model based on td-idf weighting. so the improvement is mostly on the placement of the vector where we give high weight to a term that occurred many times in a document but infrequently in the whole collection. and we have seen that this improved model indeed looks better than the simplest vector space model. but it also still has some problems. in the next lecture we're going to look at how to address these additional problems. [music",01_lesson-2-1-vector-space-model-improved-instantiation
43,https://www.coursera.org/learn/text-mining,04_3-4-probabilistic-topic-models-expectation-maximization-algorithm-part-1.en.txt,text-mining/04_week-3/02_week-3-lessons/04_3-4-probabilistic-topic-models-expectation-maximization-algorithm-part-1.en.txt,"this lecture is about the expectation-maximization algorithm, also called the em algorithm. in this lecture, we're going to continue the discussion of probabilistic topic models. in particular, we're going to introduce the em algorithm, which is a family of useful algorithms for computing the maximum likelihood estimate of mixture models. so this is now familiar scenario of using a two component, the mixture model, to try to factor out the background words from one topic word of distribution here. so we're interested in computing this estimate, and we're going to try to adjust these probability values to maximize the probability of the observed document. note that we assume that all the other parameters are known. so the only thing unknown is the word probabilities given by theta sub. in this lecture, we're going to look into how to compute this maximum likelihood estimate. now, let's start with the idea of separating the words in the text data into two groups. one group would be explained by the background model. the other group would be explained by the unknown topic word distribution. after all, this is the basic idea of mixture model. but suppose we actually know which word is from which distribution? so that would mean, for example, these words the, is, and we are known to be from this background word distribution. on the other hand, the other words text, mining, clustering etc are known to be from the topic word distribution. if you can see the color, then these are shown in blue. these blue words are then assumed that to be from the topic word distribution. if we already know how to separate these words, then the problem of estimating the word distribution would be extremely simple. if you think about this for a moment, you'll realize that, well, we can simply take all these words that are known to be from this word distribution theta sub d and normalize them. so indeed this problem would be very easy to solve if we had known which words are from which a distribution precisely, and this is in fact making this model no longer a mixture model because we can already observe which distribution has been used to generate which part of the data. so we actually go back to the single word distribution problem. in this case let's call these words that are known to be from theta d, a pseudo document of d prime, and now all we need to do is just normalize these words counts for each word w_i. that's fairly straightforward. it's just dictated by the maximum likelihood estimator. now, this idea however doesn't work because we in practice don't really know which word is from which distribution, but this gives us the idea of perhaps we can guess which word is from which it is written. specifically given all the parameters, can we infer the distribution a word is from. so let's assume that we actually know tentative probabilities for these words in theta sub d. so now all the parameters are known for this mixture model, and now let's consider a word like a ""text"". so the question is, do you think ""text"" is more likely having been generated from theta sub d or from theta sub of b? so in other words, we want to infer which distribution has been used to generate this text. now, this inference process is a typical bayesian inference situation where we have some prior about these two distributions. so can you see what is our prior here? well, the prior here is the probability of each distribution. so the prior is given by these two probabilities. in this case, the prior is saying that each model is equally likely, but we can imagine perhaps a different prior is possible. so this is called a prior because this is our guess of which distribution has been used to generate a word before we even off reserve the word. so that's why we call it the prior. so if we don't observe the word, we don't know what word has been observed. our best guess is to say well, they're equally likely. all right. so it's just flipping a coin. now in bayesian inference we typically learn with update our belief after we have observed the evidence. so what is the evidence here? well, the evidence here is the word text. now that we know we're interested in the word text. so text that can be regarded as evidence, and if we use bayes rule to combine the prior and the data likelihood, what we will end up with is to combine the prior with the likelihood that you see here, which is basically the probability of the word text from each distribution. we see that in both cases the text is possible. note that even in the background it is still possible, it just has a very small probability. so intuitively what would be your guess in this case. now if you're like many others, you are guess text is probably from theta sub d. it's more likely from theta sub d. why? you will probably see that it's because text that has a much higher probability here by the theta sub d, then by the background model which has a very small probability. by this we're going to say, well, text is more likely from theta sub d. so you see our guess of which distribution has been used to generate the text would depend on how high the probability of the text is in each word distribution. we can do, tend to guess the distribution that gives us a word a higher probability, and this is likely to maximize the likelihood. so we're going to choose a word that has a higher likelihood. so in other words, we're going to compare these two probabilities of the word given by each distributions. but our guess must also be affected by the prior. so we also need to compare these two priors. why? because imagine if we adjust these probabilities, we're going to say the probability of choosing a background model is almost 100 percent. now, if you have that kind of strong prior, then that would affect your guess. you might think, well, wait a moment, maybe text could have been from the background as well. although the probability is very small here, the prior is very high. so in the end, we have to combine the two, and the base formula provides us a solid and principled way of making this kind of guess to quantify that. so more specifically, let's think about the probability that this word has been generated in fact from from theta sub d. well, in order for texts to be generated from theta sub d two things must happen. first, the theta sub d must have been selected, so we have the selection probability here. secondly, we also have to actually have observed text from the distribution. so when we multiply the two together, we get the probability that text has in fact been generated from theta sub d. similarly, for the background model, the probability of generating text is another product of a similar form. now, we also introduced the latent variable z here to denote whether the word is from the background or the topic. when z is zero, it means it's from the topic theta sub d. when it's one, it means it's from the background theta sub b. so now we have the probability that text is generated from each. then we can simply normalize them to have an estimate of the probability that the word text is from theta sub d or from theta sub b. then equivalently, the probability that z is equal to zero given that the observed evidence is text. so this is application of bayes rule. but this step is very crucial for understanding the em algorithm because if we can do this, then we would be able to first initialize the parameter values somewhat randomly, and then we're going to take a guess of these z values. which distributing has been used to generate which word, and the initialized the parameter values would allow us to have a complete specification of the mixture model which further allows us to apply bayes rule to infer which distribution is more likely to generate each word. this prediction essentially helped us to separate the words from the two distributions. although we can't separate them for sure, but we can separate them probabilistically as shown here",04_3-4-probabilistic-topic-models-expectation-maximization-algorithm-part-1
44,https://www.coursera.org/learn/text-mining,09_3-9-latent-dirichlet-allocation-lda-part-1.en.txt,text-mining/04_week-3/02_week-3-lessons/09_3-9-latent-dirichlet-allocation-lda-part-1.en.txt,"this lecture is about that latent dirichlet allocation or lda. in this lecture, we are going to continue talking about topic models. in particular, we are going to talk about some extension of plsa, and one of them is lda or latent dirichlet allocation. so the plan for this lecture is to cover two things. one is to extend the plsa with prior knowledge and that would allow us to have in some sense a user-controlled plsa, so it doesn't apply to they just listen to data, but also would listen to our needs. the second is to extend the plsa as a generative model, a fully generative model. this has led to the development of latent dirichlet allocation or lda. so first, let's talk about the plsa with prior knowledge. now in practice, when we apply plsa to analyze text data, we might have additional knowledge that we want to inject to guide the analysis. the standard plsa is going to blindly listen to the data by using maximum [inaudible]. we are going to just fit data as much as we can and get some insight about data. this is also very useful, but sometimes a user might have some expectations about which topics to analyze. for example, we might expect to see retrieval models as a topic in information retrieval or we also may be interesting in certain aspects, such as battery and memory, when looking at opinions about a laptop because the user is particularly interested in these aspects. a user may also have knowledge about topic coverage and we may know which topic is definitely not covering which document or is covering the document. for example, we might have seen those tags, topic tags assigned to documents. and those tags could be treated as topics. if we do that then a document account will be generated using topics corresponding to the tags already assigned to the document. if the document is not assigned a tag, we're going to say there is no way for using that topic to generate document. the document must be generated by using the topics corresponding to that assigned tags. so question is how can we incorporate such knowledge into plsa. it turns out that there is a very elegant way of doing that and that would incorporate such knowledge as priors on the models. and you may recall in bayesian inference, we use prior together with data to estimate parameters and this is precisely what would happen. so in this case, we can use maximum a posteriori estimate also called map estimate and the formula is given here. basically, this is to maximize the posteriori distribution probability. and this is a combination of the likelihood of data and the prior. so what would happen is that we are going to have an estimate that listens to the data and also listens to our prior preferences. we can use this prior which is denoted as p of lambda to encode all kinds of preferences and the constraints. so for example, we can use this to encode the need of having precise background of the topic. now this could be encoded as a prior because we can say the prior for the parameters is only a non-zero if the parameters contain one topic that is equivalent to the background language model. in other words, in other cases if it is not like that, we are going to say the prior says it is impossible. so the probability of that kind of models i think would be zero according to our prior. so now we can also for example use the prior to force particular choice of topic to have a probability of a certain number. for example, we can force document d to choose topic one with probability of one half or we can prevent topic from being used in generating document. so we can say the third topic should not be used in generating document d, we will set to the pi zero for that topic. we can also use the prior to favor a set of parameters with topics that assign high probability to some particular words. in this case, we are not going to say it is impossible but we can just strongly favor certain kind of distributions and you will see example later. the map can be computed using a similar em algorithm as we have used for the maximum likelihood estimate. with just some modifications, most of the parameters would reflect the prior preferences and in such an estimate if we use a special form of the prior code or conjugate the prior, then the functional form of the prior will be similar to the data. as a result, we can combine the two and the consequence is that you can basically convert the inference of the prior into the inference of having additional pseudo data because the two functional forms are the same and they can be combined. so the effect is as if we had more data and this is convenient for computation. it does not mean conjugate prior is the best way to define prior. so now let us look at the specific example. suppose the user is particularly interested in battery life of a laptop and we are analyzing reviews. so the prior says that the distribution should contain one distribution that would assign high probability to battery and life. so we could say well there is distribution that is kind of concentrated on battery life and prior says that one of distributions should be very similar to this. now if we use map estimate with conjugate prior, which is the original prior, the original distribution based on this preference, then the only difference in the em is that when we re-estimate words distributions, we are going to add additional counts to reflect our prior. so here you can see the pseudo counts are defined based on the probability of words in a prior. so battery obviously would have high pseudo counts and similarly life would have also high pseudo counts. all the other words would have zero pseudo counts because their probability is zero in the prior and we see this is also controlled by a parameter mu and we are going to add a mu much by the probability of w given prior distribution to the connected accounts when we re-estimate this word distribution. so this is the only step that is changed and the change is happening here. and before we just connect the counts of words that we believe have been generated from this topic but now we force this distribution to give more probabilities to these words by adding them to the pseudo counts. so in fact we artificially inflated their probabilities. to make this distribution, we also need to add this many pseudo counts to the denominator. this is total sum of all the pseudo counts we have added for all the words this would make this a gamma distribution. now this is intuitively very reasonable way of modifying em and theoretically speaking, this works and it computes the map estimate. it is useful to think about the two specific extreme cases of mu. now, [inaudible] the picture. think about what would happen if we set mu to zero. well that essentially to remove this prior. so mu in some sense indicates our strengths on prior. now what would happen if we set mu to positive infinity. well that is to say that prior is so strong that we are not going to listen to the data at all. so in the end, you see in this case we are going to make one of the distributions fixed to the prior. you see why? when mu is infinitive, we basically let this one dominate. in fact we are going to set this one to precise this distribution. so in this case, it is this distribution. and that is why we said the background language model is in fact a way to impose the prior because it would force one distribution to be exactly the same as what we give, that is background distribution. so in this case, we can even force the distribution to entirely focus on battery life. but of course this would not work well because it cannot attract other words. it would affect the accuracy of counting topics about battery life. so in practice, mu is set somewhere in between of course. so this is one way to impose a prior. we can also impose some other constraints. for example, we can set any parameters that will constantly include zero as needed. for example, we may want to set one of the pi's to zero and this would mean we do not allow that topic to participate in generating that document. and this is only reasonable of course when we have prior analogy that strongly suggests this",09_3-9-latent-dirichlet-allocation-lda-part-1
45,https://www.coursera.org/learn/text-mining,01_3-1-probabilistic-topic-models-mixture-of-unigram-language-models.en.txt,text-mining/04_week-3/02_week-3-lessons/01_3-1-probabilistic-topic-models-mixture-of-unigram-language-models.en.txt,"[music] this lecture is about the mixture of unigram language models. in this lecture we will continue discussing probabilistic topic models. in particular, what we introduce a mixture of unigram language models. this is a slide that you have seen earlier. where we talked about how to get rid of the background words that we have on top of for one document. so if you want to solve the problem, it would be useful to think about why we end up having this problem. well, this obviously because these words are very frequent in our data and we are using a maximum likelihood to estimate. then the estimate obviously would have to assign high probability for these words in order to maximize the likelihood. so, in order to get rid of them that would mean we'd have to do something differently here. in particular we'll have to say this distribution doesn't have to explain all the words in the tax data. what were going to say is that, these common words should not be explained by this distribution. so one natural way to solve the problem is to think about using another distribution to account for just these common words. this way, the two distributions can be mixed together to generate the text data. and we'll let the other model which we'll call background topic model to generate the common words. this way our target topic theta here will be only generating the common handle words that are characterised the content of the document. so, how does this work? well, it is just a small modification of the previous setup where we have just one distribution. since we now have two distributions, we have to decide which distribution to use when we generate the word. each word will still be a sample from one of the two distributions. text data is still generating the same way. namely, look at the generating of the one word at each time and eventually we generate a lot of words. when we generate the word, however, we're going to first decide which of the two distributions to use. and this is controlled by another probability, the probability of theta sub d and the probability of theta sub b here. so this is a probability of enacting the topic word of distribution. this is the probability of enacting the background word of distribution denoted by theta sub b. on this case i just give example where we can set both to 0.5. so you're going to basically flip a coin, a fair coin, to decide what you want to use. but in general these probabilities don't have to be equal. so you might bias toward using one topic more than the other. so now the process of generating a word would be to first we flip a coin. based on these probabilities choosing each model and if let's say the coin shows up as head, which means we're going to use the topic two word distribution. then we're going to use this word distribution to generate a word. otherwise we might be going slow this path. and we're going to use the background word distribution to generate a word. so in such a case, we have a model that has some uncertainty associated with the use of a word distribution. but we can still think of this as a model for generating text data. and such a model is called a mixture model. so now let's see. in this case, what's the probability of observing a word w? now here i showed some words. like ""the"" and ""text"". so as in all cases, once we setup a model we are interested in computing the likelihood function. the basic question is, so what's the probability of observing a specific word here? now we know that the word can be observed from each of the two distributions, so we have to consider two cases. therefore it's a sum over these two cases. the first case is to use the topic for the distribution to generate the word. and in such a case then the probably would be theta sub d, which is the probability of choosing the model multiplied by the probability of actually observing the word from that model. both events must happen in order to observe. we first must have choosing the topic theta sub d and then, we also have to actually have sampled the word the from the distribution. and similarly, the second part accounts for a different way of generally the word from the background. now obviously the probability of text the same is all similar, right? so we also can see the two ways of generating the text. and in each case, it's a product of the probability of choosing a particular word is multiplied by the probability of observing the word from that distribution. now whether you will see, this is actually a general form. so might want to make sure that you have really understood this expression here. and you should convince yourself that this is indeed the probability of obsolete text. so to summarize what we observed here. the probability of a word from a mixture model is a general sum of different ways of generating the word. in each case, it's a product of the probability of selecting that component model. multiplied by the probability of actually observing the data point from that component of the model. and this is something quite general and you will see this occurring often later. so the basic idea of a mixture model is just to retrieve thesetwo distributions together as one model. so i used a box to bring all these components together. so if you view this whole box as one model, it's just like any other generative model. it would just give us the probability of a word. but the way that determines this probability is quite the different from when we have just one distribution. and this is basically a more complicated mixture model. so the more complicated is more than just one distribution. and it's called a mixture model. so as i just said we can treat this as a generative model. and it's often useful to think of just as a likelihood function. the illustration that you have seen before, which is dimmer now, is just the illustration of this generated model. so mathematically, this model is nothing but to just define the following generative model. where the probability of a word is assumed to be a sum over two cases of generating the word. and the form you are seeing now is a more general form that what you have seen in the calculation earlier. well i just use the symbol w to denote any water but you can still see this is basically first a sum. right? and this sum is due to the fact that the water can be generated in much more ways, two ways in this case. and inside a sum, each term is a product of two terms. and the two terms are first the probability of selecting a component like of d second, the probability of actually observing the word from this component of the model. so this is a very general description of all the mixture models. i just want to make sure that you understand this because this is really the basis for understanding all kinds of on top models. so now once we setup model. we can write down that like functioning as we see here. the next question is, how can we estimate the parameter, or what to do with the parameters. given the data. well, in general, we can use some of the text data to estimate the model parameters. and this estimation would allow us to discover the interesting knowledge about the text. so you, in this case, what do we discover? well, these are presented by our parameters and we will have two kinds of parameters. one is the two worded distributions, that result in topics, and the other is the coverage of each topic in each. the coverage of each topic. and this is determined by probability of c less of d and probability of theta, so this is to one. now, what's interesting is also to think about special cases like when we send one of them to want what would happen? well with the other, with the zero right? and if you look at the likelihood function, it will then degenerate to the special case of just one distribution. okay so you can easily verify that by assuming one of these two is 1.0 and the other is zero. so in this sense, the mixture model is more general than the previous model where we have just one distribution. it can cover that as a special case. so to summarize, we talked about the mixture of two unigram language models and the data we're considering here is just one document. and the model is a mixture model with two components, two unigram lm models, specifically theta sub d, which is intended to denote the topic of document d, and theta sub b, which is representing a background topic that we can set to attract the common words because common words would be assigned a high probability in this model. so the parameters can be collectively called lambda which i show here you can again think about the question about how many parameters are we talking about exactly. this is usually a good exercise to do because it allows you to see the model in depth and to have a complete understanding of what's going on this model. and we have mixing weights, of course, also. so what does a likelihood function look like? well, it looks very similar to what we had before. so for the document, first it's a product over all the words in the document exactly the same as before. the only difference is that inside here now it's a sum instead of just one. so you might have recalled before we just had this one there. but now we have this sum because of the mixture model. and because of the mixture model we also have to introduce a probability of choosing that particular component of distribution. and so this is just another way of writing, and by using a product over all the unique words in our vocabulary instead of having that product over all the positions in the document. and this form where we look at the different and unique words is a commutative that formed for computing the maximum likelihood estimate later. and the maximum likelihood estimator is, as usual, just to find the parameters that would maximize the likelihood function. and the constraints here are of course two kinds. one is what are probabilities in each [inaudible] must sum to 1 the other is the choice of each [inaudible] must sum to 1. [music",01_3-1-probabilistic-topic-models-mixture-of-unigram-language-models
46,https://www.coursera.org/learn/text-mining,07_3-7-probabilistic-latent-semantic-analysis-plsa-part-1.en.txt,text-mining/04_week-3/02_week-3-lessons/07_3-7-probabilistic-latent-semantic-analysis-plsa-part-1.en.txt,"[sound] this lecture is about probabilistic and latent semantic analysis or plsa. in this lecture we're going to introduce probabilistic latent semantic analysis, often called plsa. this is the most basic topic model, also one of the most useful topic models. now this kind of models can in general be used to mine multiple topics from text documents. and prsa is one of the most basic topic models for doing this. so let's first examine this power in the e-mail for more detail. here i show a sample article which is a blog article about hurricane katrina. and i show some simple topics. for example government response, flood of the city of new orleans. donation and the background. you can see in the article we use words from all these distributions. so we first for example see there's a criticism of government response and this is followed by discussion of flooding of the city and donation et cetera. we also see background words mixed with them. so the overall of topic analysis here is to try to decode these topics behind the text, to segment the topics, to figure out which words are from which distribution and to figure out first, what are these topics? how do we know there's a topic about government response. there's a topic about a flood in the city. so these are the tasks at the top of the model. if we had discovered these topics can color these words, as you see here, to separate the different topics. then you can do a lot of things, such as summarization, or segmentation, of the topics, clustering of the sentences etc. so the formal definition of problem of mining multiple topics from text is shown here. and this is after a slide that you have seen in an earlier lecture. so the input is a collection, the number of topics, and a vocabulary set, and of course the text data. and then the output is of two kinds. one is the topic category, characterization. theta i's. each theta i is a word distribution. and second, it's the topic coverage for each document. these are pi sub i j's. and they tell us which document it covers. which topic to what extent. so we hope to generate these as output. because there are many useful applications if we can do that. so the idea of plsa is actually very similar to the two component mixture model that we have already introduced. the only difference is that we are going to have more than two topics. otherwise, it is essentially the same. so here i illustrate how we can generate the text that has multiple topics and naturally in all cases of probabilistic modelling would want to figure out the likelihood function. so we would also ask the question, what's the probability of observing a word from such a mixture model? now if you look at this picture and compare this with the picture that we have seen earlier, you will see the only difference is that we have added more topics here. so, before we have just one topic, besides the background topic. but now we have more topics. specifically, we have k topics now. all these are topics that we assume that exist in the text data. so the consequence is that our switch for choosing a topic is now a multiway switch. before it's just a two way switch. we can think of it as flipping a coin. but now we have multiple ways. first we can flip a coin to decide whether we're talk about the background. so it's the background lambda sub b versus non-background. 1 minus lambda sub b gives us the probability of actually choosing a non-background topic. after we have made this decision, we have to make another decision to choose one of these k distributions. so there are k way switch here. and this is characterized by pi, and this sum to one. this is just the difference of designs. which is a little bit more complicated. but once we decide which distribution to use the rest is the same we are going to just generate a word by using one of these distributions as shown here. so now lets look at the question about the likelihood. so what's the probability of observing a word from such a distribution? what do you think? now we've seen this problem many times now and if you can recall, it's generally a sum. of all the different possibilities of generating a word. so let's first look at how the word can be generated from the background mode. well, the probability that the word is generated from the background model is lambda multiplied by the probability of the word from the background mode. model, right. two things must happen. first, we have to have chosen the background model, and that's the probability of lambda, of sub b. then second, we must have actually obtained the word w from the background, and that's probability of w given theta sub b. okay, so similarly, we can figure out the probability of observing the word from another topic. like the topic theta sub k. now notice that here's the product of three terms. and that's because of the choice of topic theta sub k, only happens if two things happen. one is we decide not to talk about background. so, that's a probability of 1 minus lambda sub b. second, we also have to actually choose theta sub k among these k topics. so that's probability of theta sub k, or pi. and similarly, the probability of generating a word from the second. the topic and the first topic are like what you are seeing here. and so in the end the probability of observing the word is just a sum of all these cases. and i have to stress again this is a very important formula to know because this is really key to understanding all the topic models and indeed a lot of mixture models. so make sure that you really understand the probability of w is indeed the sum of these terms. so, next, once we have the likelihood function, we would be interested in knowing the parameters. all right, so to estimate the parameters. but firstly, let's put all these together to have the complete likelihood of function for plsa. the first line shows the probability of a word as illustrated on the previous slide. and this is an important formula as i said. so let's take a closer look at this. this actually commands all the important parameters. so first of all we see lambda sub b here. this represents a percentage of background words that we believe exist in the text data. and this can be a known value that we set empirically. second, we see the background language model, and typically we also assume this is known. we can use a large collection of text, or use all the text that we have available to estimate the world of distribution. now next in the next stop this formula. [cough] excuse me. you see two interesting kind of parameters, those are the most important parameters. that we are. so one is pi's. and these are the coverage of a topic in the document. and the other is word distributions that characterize all the topics. so the next line, then is simply to plug this in to calculate the probability of document. this is, again, of the familiar form where you have a sum and you have a count of a word in the document. and then log of a probability. now it's a little bit more complicated than the two component. because now we have more components, so the sum involves more terms. and then this line is just the likelihood for the whole collection. and it's very similar, just accounting for more documents in the collection. so what are the unknown parameters? i already said that there are two kinds. one is coverage, one is word distributions. again, it's a useful exercise for you to think about. exactly how many parameters there are here. how many unknown parameters are there? now, try and think out that question will help you understand the model in more detail. and will also allow you to understand what would be the output that we generate when use plsa to analyze text data? and these are precisely the unknown parameters. so after we have obtained the likelihood function shown here, the next is to worry about the parameter estimation. and we can do the usual think, maximum likelihood estimator. so again, it's a constrained optimization problem, like what we have seen before. only that we have a collection of text and we have more parameters to estimate. and we still have two constraints, two kinds of constraints. one is the word distributions. all the words must have probabilities that's sum to one for one distribution. the other is the topic coverage distribution and a document will have to cover precisely these k topics so the probability of covering each topic that would have to sum to 1. so at this point though it's basically a well defined applied math problem, you just need to figure out the solutions to optimization problem. there's a function with many variables. and we need to just figure out the patterns of these variables to make the function reach its maximum. >> [music",07_3-7-probabilistic-latent-semantic-analysis-plsa-part-1
47,https://www.coursera.org/learn/text-mining,02_3-2-probabilistic-topic-models-mixture-model-estimation-part-1.en.txt,text-mining/04_week-3/02_week-3-lessons/02_3-2-probabilistic-topic-models-mixture-model-estimation-part-1.en.txt,"this lecture is about the mixture model estimation. in this lecture, we're going to continue discussing probabilistic topic models. in particular, we're going to talk about the how to estimate the parameters of a mixture model. so let's first look at our motivation for using a mixture model, and we hope to effect out the background words from the topic word distribution. so the idea is to assume that the text data actually contain two kinds of words. one kind is from the background here, so the ""is"", ""we"" etc. the other kind is from our topic word distribution that we're interested in. so in order to solve this problem of factoring out background words, we can set up our mixture model as follows. we are going to assume that we already know the parameters of all the values for all the parameters in the mixture model except for the word distribution of theta sub d which is our target. so this is a case of customizing probably some model so that we embedded the unknown variables that we are interested in, but we're going to simplify other things. we're going to assume we have knowledge about others and this is a powerful way of customizing a model for a particular need. now you can imagine, we could have assumed that we also don't know the background word distribution, but in this case, our goal is to affect out precisely those high probability in the background words. so we assume the background model is already fixed. the problem here is, how can we adjust the theta sub d in order to maximize the probability of the observed document here and we assume all the other parameters are known? now, although we designed the modal heuristically to try to factor out these background words, it's unclear whether if we use maximum likelihood estimator, we will actually end up having a word distribution where the common words like ""the"" will be indeed having smaller probabilities than before. so now, in this case, it turns out that the answer is yes. when we set up the probabilistic modeling this way, when we use maximum likelihood estimator, we will end up having a word distribution where the common words would be factored out by the use of the background distribution. so to understand why this is so, it's useful to examine the behavior of a mixture model. so we're going to look at a very simple case. in order to understand some interesting behaviors of a mixture model, the observed patterns here actually are generalizable to mixture model in general, but it's much easier to understand this behavior when we use a very simple case like what we're seeing here. so specifically in this case, let's assume that the probability of choosing each of the two models is exactly the same. so we're going to flip a fair coin to decide which model to use. furthermore, we are going to assume there are precisely to words, ""the"" and ""text."" obviously, this is a very naive oversimplification of the actual text, but again, it is useful to examine the behavior in such a special case. so we further assume that, the background model gives probability of 0.9 to the word ""the"" and ""text"" 0.1. now, let's also assume that our data is extremely simple. the document has just two words ""text"" and then ""the."" so now, let's write down the likelihood function in such a case. first, what's the probability of ""text"" and what's the probability of ""the""? i hope by this point, you will be able to write it down. so the probability of ""text"" is basically a sum of two cases where each case corresponds to each of the water distribution and it accounts for the two ways of generating text. inside each case, we have the probability of choosing the model which is 0.5 multiplied by the probability of observing ""text"" from that model. similarly, ""the"" would have a probability of the same form just as it was different exactly probabilities. so naturally, our likelihood function is just the product of the two. so it's very easy to see that, once you understand what's the probability of each word and which is also why it's so important to understand what's exactly the probability of observing each word from such a mixture model. now, the interesting question now is, how can we then optimize this likelihood? well, you will notice that, there are only two variables. they are precisely the two probabilities of the two words ""text"" and ""the"" given by theta sub d. this is because we have assumed that, all the other parameters are known. so now, the question is a very simple algebra question. so we have a simple expression with two variables and we hope to choose the values of these two variables to maximize this function. it's exercises that we have seen some simple algebra problems, and note that the two probabilities must sum to one. so there's some constraint. if there were no constraint of course, we will set both probabilities to their maximum value which would be one to maximize this, but we can't do that because ""text"" and ""the"" must sum to one. we can't give those a probability of one. so now the question is, how should we allocate the probability in the mass between the two words? what do you think? now, it will be useful to look at this formula for moment and to see intuitively what we do in order to set these probabilities to maximize the value of this function. if we look into this further, then we'll see some interesting behavior of the two component models in that, they will be collaborating to maximize the probability of the observed data which is dictated by the maximum likelihood estimator, but they're also competing in some way. in particular, they would be competing on the words and they will tend to bet high probabilities on different words to avoid this competition in some sense or to gain advantage in this competition. so again, looking at this objective function and we have a constraint on the two probabilities, now if you look at the formula intuitively, you might feel that you want to set the probability of ""text"" to be somewhat larger than ""the"". this intuition can be well-supported by mathematical fact which is, when the sum of two variables is a constant then the product of them which is maximum then they are equal, and this is a fact that we know from algebra. now, if we plug that in, we will would mean that we have to make the two probabilities equal. when we make them equal and then if we consider the constraint that we can easily solve this problem, and the solution is the probability of ""text"" would be 0.9 and probability of ""the"" is 0.1. as you can see indeed, the probability of text is not much larger than probability of ""the"" and this is not the case when we have just one distribution. this is clearly because of the use of the background model which assign a very high probability to ""the"" low probability to ""text"". if you look at the equation, you will see obviously some interaction of the two distributions here. in particular, you will see in order to make them equal and then the probability assigned by theta sub d must be higher for a word that has a smaller probability given by the background. this is obvious from examining this equation because ""the"" background part is weak for ""text"" it's a small. so in order to compensate for that, we must make the probability of ""text"" that's given by theta sub d somewhat larger so that the two sides can be balanced. so this is in fact a very general behavior of this mixture model. that is, if one distribution assigns a high probability to one word than another, then the other distribution would tend to do the opposite. basically, it would discourage other distributions to do the same and this is to balance them out so that, we can account for all words. this also means that, by using a background model that is fixed to assign high probabilities to background words, we can indeed encourage the unknown topic word distribution to assign smaller probabilities for such common words. instead, put more probability mass on the content words that cannot be explained well by the background model meaning that, they have a very small probability from the background model like ""text"" here",02_3-2-probabilistic-topic-models-mixture-model-estimation-part-1
48,https://www.coursera.org/learn/text-mining,03_3-3-probabilistic-topic-models-mixture-model-estimation-part-2.en.txt,text-mining/04_week-3/02_week-3-lessons/03_3-3-probabilistic-topic-models-mixture-model-estimation-part-2.en.txt,"[sound] now lets look at another behaviour of the mixed model and in this case lets look at the response to data frequencies. so what you are seeing now is basically the likelihood of function for the two word document and we now in this case the solution is text. a probability of 0.9 and the a probability of 0.1. now it's interesting to think about a scenario where we start adding more words to the document. so what would happen if we add many the's to the document? now this would change the game, right? so, how? well, picture, what would the likelihood function look like now? well, it start with the likelihood function for the two words, right? as we add more words, we know that. but we have to just multiply the likelihood function by additional terms to account for the additional. occurrences of that. since in this case, all the additional terms are the, we're going to just multiply by this term. right? for the probability of the. and if we have another occurrence of the, we'd multiply again by the same term, and so on and forth. add as many terms as the number of the's that we add to the document, d'. now this obviously changes the likelihood function. so what's interesting is now to think about how would that change our solution? so what's the optimal solution now? now, intuitively you'd know the original solution, pulling the 9 versus pulling the ,will no longer be optimal for this new function. right? but, the question is how should we change it. what general is to sum to one. so he know we must take away some probability the mass from one word and add the probability mass to the other word. the question is which word to have reduce the probability and which word to have a larger probability. and in particular, let's think about the probability of the. should it be increased to be more than 0.1? or should we decrease it to less than 0.1? what do you think? now you might want to pause the video a moment to think more about. this question. because this has to do with understanding of important behavior of a mixture model. and indeed, other maximum likelihood estimator. now if you look at the formula for a moment, then you will see it seems like another object function is more influenced by the than text. before, each computer. so now as you can imagine, it would make sense to actually assign a smaller probability for text and lock it. to make room for a larger probability for the. why? because the is repeated many times. if we increase it a little bit, it will have more positive impact. whereas a slight decrease of text will have relatively small impact because it occurred just one, right? so this means there is another behavior that we observe here. that is high frequency words generated with high probabilities from all the distributions. and, this is no surprise at all, because after all, we are maximizing the likelihood of the data. so the more a word occurs, then it makes more sense to give such a word a higher probability because the impact would be more on the likelihood function. this is in fact a very general phenomenon of all the maximum likelihood estimator. but in this case, we can see as we see more occurrences of a term, it also encourages the unknown distribution theta sub d to assign a somewhat higher probability to this word. now it's also interesting to think about the impact of probability of theta sub b. the probability of choosing one of the two component models. now we've been so far assuming that each model is equally likely. and that gives us 0.5. but you can again look at this likelihood function and try to picture what would happen if we increase the probability of choosing a background model. now you will see these terms for the, we have a different form where the probability that would be even larger because the background has a high probability for the word and the coefficient in front of 0.9 which is now 0.5 would be even larger. when this is larger, the overall result would be larger. and that also makes this the less important for theta sub d to increase the probability before the. because it's already very large. so the impact here of increasing the probability of the is somewhat regulated by this coefficient, the point of i. if it's larger on the background, then it becomes less important to increase the value. so this means the behavior here, which is high frequency words tend to get the high probabilities, are effected or regularized somewhat by the probability of choosing each component. the more likely a component is being chosen. it's more important that to have higher values for these frequent words. if you have a various small probability of being chosen, then the incentive is less. so to summarize, we have just discussed the mixture model. and we discussed that the estimation problem of the mixture model and particular with this discussed some general behavior of the estimator and that means we can expect our estimator to capture these infusions. first every component model attempts to assign high probabilities to high frequent their words in the data. and this is to collaboratively maximize likelihood. second, different component models tend to bet high probabilities on different words. and this is to avoid a competition or waste of probability. and this would allow them to collaborate more efficiently to maximize the likelihood. so, the probability of choosing each component regulates the collaboration and the competition between component models. it would allow some component models to respond more to the change, for example, of frequency of the theta point in the data. we also talked about the special case of fixing one component to a background word distribution, right? and this distribution can be estimated by using a collection of documents, a large collection of english documents, by using just one distribution and then we'll just have normalized frequencies of terms to give us the probabilities of all these words. now when we use such a specialized mixture model, we show that we can effectively get rid of that one word in the other component. and that would make this cover topic more discriminative. this is also an example of imposing a prior on the model parameter and the prior here basically means one model must be exactly the same as the background language model and if you recall what we talked about in bayesian estimation, and this prior will allow us to favor a model that is consistent with our prior. in fact, if it's not consistent we're going to say the model is impossible. so it has a zero prior probability. that effectively excludes such a scenario. this is also issue that we'll talk more later. [music",03_3-3-probabilistic-topic-models-mixture-model-estimation-part-2
49,https://www.coursera.org/learn/text-mining,05_3-5-probabilistic-topic-models-expectation-maximization-algorithm-part-2.en.txt,text-mining/04_week-3/02_week-3-lessons/05_3-5-probabilistic-topic-models-expectation-maximization-algorithm-part-2.en.txt,"[sound] so this is indeed a general idea of the expectation-maximization, or em, algorithm. so in all the em algorithms we introduce a hidden variable to help us solve the problem more easily. in our case the hidden variable is a binary variable for each occurrence of a word. and this binary variable would indicate whether the word has been generated from 0 sub d or 0 sub p. and here we show some possible values of these variables. for example, for the it's from background, the z value is one. and text on the other hand. is from the topic then it's zero for z, etc. now, of course, we don't observe these z values, we just imagine they're all such. values of z attaching to other words. and that's why we call these hidden variables. now, the idea that we talked about before for predicting the word distribution that has been used when we generate the word is it a predictor, the value of this hidden variable? and, so, the em algorithm then, would work as follows. first, we'll initialize all the parameters with random values. in our case, the parameters are mainly the probability. of a word, given by theta sub d. so this is an initial addition stage. these initialized values would allow us to use base roll to take a guess of these z values, so we'd guess these values. we can't say for sure whether textt is from background or not. but we can have our guess. this is given by this formula. it's called an e-step. and so the algorithm would then try to use the e-step to guess these z values. after that, it would then invoke another that's called m-step. in this step we simply take advantage of the inferred z values and then just group words that are in the same distribution like these from that ground including this as well. we can then normalize the count to estimate the probabilities or to revise our estimate of the parameters. so let me also illustrate that we can group the words that are believed to have come from zero sub d, and that's text, mining algorithm, for example, and clustering. and we group them together to help us re-estimate the parameters that we're interested in. so these will help us estimate these parameters. note that before we just set these parameter values randomly. but with this guess, we will have somewhat improved estimate of this. of course, we don't know exactly whether it's zero or one. so we're not going to really do the split in a hard way. but rather we're going to do a softer split. and this is what happened here. so we're going to adjust the count by the probability that would believe this word has been generated by using the theta sub d. and you can see this, where does this come from? well, this has come from here, right? from the e-step. so the em algorithm would iteratively improve uur initial estimate of parameters by using e-step first and then m-step. the e-step is to augment the data with additional information, like z. and the m-step is to take advantage of the additional information to separate the data. to split the data accounts and then collect the right data accounts to re-estimate our parameter. and then once we have a new generation of parameter, we're going to repeat this. we are going the e-step again. to improve our estimate of the hidden variables. and then that would lead to another generation of re-estimated parameters. for the word distribution that we are interested in. okay, so, as i said, the bridge between the two is really the variable z, hidden variable, which indicates how likely this water is from the top water distribution, theta sub p. so, this slide has a lot of content and you may need to. pause the reader to digest it. but this basically captures the essence of em algorithm. start with initial values that are often random themself. and then we invoke e-step followed by m-step to get an improved setting of parameters. and then we repeated this, so this a hill-climbing algorithm that would gradually improve the estimate of parameters. as i will explain later there is some guarantee for reaching a local maximum of the log-likelihood function. so lets take a look at the computation for a specific case, so these formulas are the em. formulas that you see before, and you can also see there are superscripts, here, like here, n, to indicate the generation of parameters. like here for example we have n plus one. that means we have improved. from here to here we have an improvement. so in this setting we have assumed the two numerals have equal probabilities and the background model is null. so what are the relevance of the statistics? well these are the word counts. so assume we have just four words, and their counts are like this. and this is our background model that assigns high probabilities to common words like the. and in the first iteration, you can picture what will happen. well first we initialize all the values. so here, this probability that we're interested in is normalized into a uniform distribution of all the words. and then the e-step would give us a guess of the distribution that has been used. that will generate each word. we can see we have different probabilities for different words. why? well, that's because these words have different probabilities in the background. so even though the two distributions are equally likely. and then our initial audition say uniform distribution because of the difference in the background of the distribution, we have different guess the probability. so these words are believed to be more likely from the topic. these on the other hand are less likely. probably from background. so once we have these z values, we know in the m-step these probabilities will be used to adjust the counts. so four must be multiplied by this 0.33 in order to get the allocated accounts toward the topic. and this is done by this multiplication. note that if our guess says this is 100% if this is one point zero, then we just get the full count of this word for this topic. in general it's not going to be one point zero. so we're just going to get some percentage of this counts toward this topic. then we simply normalize these counts to have a new generation of parameters estimate. so you can see, compare this with the older one, which is here. so compare this with this one and we'll see the probability is different. not only that, we also see some words that are believed to have come from the topic will have a higher probability. like this one, text. and of course, this new generation of parameters would allow us to further adjust the inferred latent variable or hidden variable values. so we have a new generation of values, because of the e-step based on the new generation of parameters. and these new inferred values of zs will give us then another generation of the estimate of probabilities of the word. and so on and so forth so this is what would actually happen when we compute these probabilities using the em algorithm. as you can see in the last row where we show the log-likelihood, and the likelihood is increasing as we do the iteration. and note that these log-likelihood is negative because the probability is between 0 and 1 when you take a logarithm, it becomes a negative value. now what's also interesting is, you'll note the last column. and these are the inverted word split. and these are the probabilities that a word is believed to have come from one distribution, in this case the topical distribution, all right. and you might wonder whether this would be also useful. because our main goal is to estimate these word distributions. so this is our primary goal. we hope to have a more discriminative order of distribution. but the last column is also bi-product. this also can actually be very useful. you can think about that. we want to use, is to for example is to estimate to what extent this document has covered background words. and this, when we add this up or take the average we will kind of know to what extent it has covered background versus content was that are not explained well by the background. [music",05_3-5-probabilistic-topic-models-expectation-maximization-algorithm-part-2
50,https://www.coursera.org/learn/text-mining,10_3-10-latent-dirichlet-allocation-lda-part-2.en.txt,text-mining/04_week-3/02_week-3-lessons/10_3-10-latent-dirichlet-allocation-lda-part-2.en.txt,"[sound] so now let's talk about the exchanging of plsa to of lda and to motivate that, we need to talk about some deficiencies of plsa. first, it's not really a generative model because we can compute the probability of a new document. you can see why, and that's because the pis are needed to generate the document, but the pis are tied to the document that we have in the training data. so we can't compute the pis for future document. and there's some heuristic workaround, though. secondly, it has many parameters, and i've asked you to compute how many parameters exactly there are in plsa, and you will see there are many parameters. that means that model is very complex. and this also means that there are many local maxima and it's prone to overfitting. and that means it's very hard to also find a good local maximum. and that we are representing global maximum. and in terms of explaining future data, we might find that it will overfit the training data because of the complexity of the model. the model is so flexible to fit precisely what the training data looks like. and then it doesn't allow us to generalize the model for using other data. this however is not a necessary problem for text mining because here we're often only interested in hitting the training documents that we have. we are not always interested in modern future data, but in other cases, or if we would care about the generality, we would worry about this overfitting. so lda is proposing to improve that, and basically to make plsa a generative model by imposing a dirichlet prior on the model parameters. dirichlet is just a special distribution that we can use to specify product. so in this sense, lda is just a bayesian version of plsa, and the parameters are now much more regularized. you will see there are many few parameters and you can achieve the same goal as plsa for text mining. it means it can compute the top coverage and topic word distributions as in plsa. however, there's no. why are the parameters for plsa here are much fewer, there are fewer parameters and in order to compute a topic coverage and word distributions, we again face a problem of influence of these variables because they are not parameters of the model. so the influence part again face the local maximum problem. so essentially they are doing something very similar, but theoretically, lda is a more elegant way of looking at the top and bottom problem. so let's see how we can generalize the plsa to lda or a standard plsa to have lda. now a full treatment of lda is beyond the scope of this course and we just don't have time to go in depth on that talking about that. but here, i just want to give you a brief idea about what's extending and what it enables, all right. so this is the picture of lda. now, i remove the background of model just for simplicity. now, in this model, all these parameters are free to change and we do not impose any prior. so these word distributions are now represented as theta vectors. so these are word distributions, so here. and the other set of parameters are pis. and we would present it as a vector also. and this is more convenient to introduce lda. and we have one vector for each document. and in this case, in theta, we have one vector for each topic. now, the difference between lda and plsa is that in lda, we're not going to allow them to free the chain. instead, we're going to force them to be drawn from another distribution. so more specifically, they will be drawn from two dirichlet distributions respectively, but the dirichlet distribution is a distribution over vectors. so it gives us a probability of four particular choice of a vector. take, for example, pis, right. so this dirichlet distribution tells us which vectors of pi is more likely. and this distribution in itself is controlled by another vector of parameters of alphas. depending on the alphas, we can characterize the distribution in different ways but with full certain choices of pis to be more likely than others. for example, you might favor the choice of a relatively uniform distribution of all the topics. or you might favor generating a skewed coverage of topics, and this is controlled by alpha. and similarly here, the topic or word distributions are drawn from another dirichlet distribution with beta parameters. and note that here, alpha has k parameters, corresponding to our inference on the k values of pis for our document. whereas here, beta has n values corresponding to controlling the m words in our vocabulary. now once we impose this price, then the generation process will be different. and we start with joined pis from the dirichlet distribution and this pi will tell us these probabilities. and then, we're going to use the pi to further choose which topic to use, and this is of course very similar to the plsa model. and similar here, we're not going to have these distributions free. instead, we're going to draw one from the dirichlet distribution. and then from this, then we're going to further sample a word. and the rest is very similar to the. the likelihood function now is more complicated for lda. but there's a close connection between the likelihood function of lda and the plsa. so i'm going to illustrate the difference here. so in the top, you see plsa likelihood function that you have already seen before. it's copied from previous slide. only that i dropped the background for simplicity. so in the lda formulas you see very similar things. you see the first equation is essentially the same. and this is the probability of generating a word from multiple word distributions. and this formula is a sum of all the possibilities of generating a word. inside a sum is a product of the probability of choosing a topic multiplied by the probability of observing the word from that topic. so this is a very important formula, as i've stressed multiple times. and this is actually the core assumption in all the topic models. and you might see other topic models that are extensions of lda or plsa. and they all rely on this. so it's very important to understand this. and this gives us a probability of getting a word from a mixture model. now, next in the probability of a document, we see there is a plsa component in the lda formula, but the lda formula will add a sum integral here. and that's to account for the fact that the pis are not fixed. so they are drawn from the original distribution, and that's shown here. that's why we have to take an integral, to consider all the possible pis that we could possibly draw from this dirichlet distribution. and similarly in the likelihood for the whole collection, we also see further components added, another integral here. right? so basically in the area we're just adding this integrals to account for the uncertainties and we added of course the dirichlet distributions to cover the choice of this parameters, pis, and theta. so this is a likelihood function for lda. now, next to this, let's talk about the parameter as estimation and inferences. now the parameters can be now estimated using exactly the same approach maximum likelihood estimate for lda. now you might think about how many parameters are there in lda versus plsa. you'll see there're a fewer parameters in lda because in this case the only parameters are alphas and the betas. so we can use the maximum likelihood estimator to compute that. of course, it's more complicated because the form of likelihood function is more complicated. but what's also important is notice that now these parameters that we are interested in name and topics, and the coverage are no longer parameters in lda. in this case we have to use basic inference or posterior inference to compute them based on the parameters of alpha and the beta. unfortunately, this computation is intractable. so we generally have to resort to approximate inference. and there are many methods available for that and i'm sure you will see them when you use different tool kits for lda, or when you read papers about these different extensions of lda. now here we, of course, can't give in-depth instruction to that, but just know that they are computed based in inference by using the parameters alphas and betas. but our math [inaudible], actually, in the end, in some of our math list, it's very similar to plsa. and, especially when we use algorithm called class assembly, then the algorithm looks very similar to the algorithm. so in the end, they are doing something very similar. so to summarize our discussion of properties of topic models, these models provide a general principle or way of mining and analyzing topics in text with many applications. the best basic task setup is to take test data as input and we're going to output the k topics. each topic is characterized by word distribution. and we're going to also output proportions of these topics covered in each document. and plsa is the basic topic model, and in fact the most basic of the topic model. and this is often adequate for most applications. that's why we spend a lot of time to explain plsa in detail. now lda improves over plsa by imposing priors. this has led to theoretically more appealing models. however, in practice, lda and plsa tend to give similar performance, so in practice plsa and lda would work equally well for most of the tasks. now here are some suggested readings if you want to know more about the topic. first is a nice review of probabilistic topic models. the second has a discussion about how to automatically label a topic model. now i've shown you some distributions and they intuitively suggest a topic. but what exactly is a topic? can we use phrases to label the topic? to make it the more easy to understand and this paper is about the techniques for doing that. the third one is empirical comparison of lda and the plsa for various tasks. the conclusion is that they tend to perform similarly. [music",10_3-10-latent-dirichlet-allocation-lda-part-2
51,https://www.coursera.org/learn/text-mining,08_3-8-probabilistic-latent-semantic-analysis-plsa-part-2.en.txt,text-mining/04_week-3/02_week-3-lessons/08_3-8-probabilistic-latent-semantic-analysis-plsa-part-2.en.txt,"[sound] we can compute this maximum estimate by using the em algorithm. so in the e step, we now have to introduce more hidden variables because we have more topics, so our hidden variable z now, which is a topic indicator can take more than two values. so specifically will take a k plus one values, with b in the noting the background. and once locate, to denote other k topics, right. so, now the e step, as you can recall is your augmented data, and by predicting the values of the hidden variable. so we're going to predict for a word, whether the word has come from one of these k plus one distributions. this equation allows us to predict the probability that the word w in document d is generated from topic zero sub j. and the bottom one is the predicted probability that this word has been generated from the background. note that we use document d here to index the word. why? because whether a word is from a particular topic actually depends on the document. can you see why? well, it's through the pi's. the pi's are tied to each document. each document can have potentially different pi's, right. the pi's will then affect our prediction. so, the pi's are here. and this depends on the document. and that might give a different guess for a word in different documents, and that's desirable. in both cases we are using the baye's rule, as i explained, basically assessing the likelihood of generating word from each of this division and there's normalize. what about the m step? well, we may recall the m step is we take advantage of the inferred z values. to split the counts. and then collected the right counts to re-estimate the parameters. so in this case, we can re-estimate our coverage of probability. and this is re-estimated based on collecting all the words in the document. and that's why we have the count of the word in document. and sum over all the words. and then we're going to look at to what extent this word belongs to the topic theta sub j. and this part is our guess from each step. this tells us how likely this word is actually from theta sub j. and when we multiply them together, we get the discounted count that's located for topic theta sub j. and when we normalize this over all the topics, we get the distribution of all the topics to indicate the coverage. and similarly, the bottom one is the estimated probability of word for a topic. and in this case we are using exact the same count, you can see this is the same discounted account, ] it tells us to what extend we should allocate this word [inaudible] but then normalization is different. because in this case we are interested in the word distribution, so we simply normalize this over all the words. this is different, in contrast here we normalize the amount all the topics. it would be useful to take a comparison between the two. this give us different distributions. and these tells us how to improve the parameters. and as i just explained, in both the formula is we have a maximum estimate based on allocated word counts [inaudible]. now this phenomena is actually general phenomena in all the em algorithms. in the m-step, you general with the computer expect an account of the event based on the e-step result, and then you just and then count to four, particular normalize it, typically. so, in terms of computation of this em algorithm, we can actually just keep accounting various events and then normalize them. and when we thinking this way, we also have a more concise way of presenting the em algorithm. it actually helps us better understand the formulas. so i'm going to go over this in some detail. so as a algorithm we first initialize all the unknown perimeters randomly, all right. so, in our case, we are interested in all of those coverage perimeters, pi's and awarded distributions [inaudible], and we just randomly normalize them. this is the initialization step and then we will repeat until likelihood converges. now how do we know whether likelihood converges? we can do compute likelihood at each step and compare the current likelihood with the previous likelihood. if it doesn't change much and we're going to say it stopped, right. so, in each step we're going to do e-step and m-step. in the e-step we're going to do augment the data by predicting the hidden variables. in this case, the hidden variable, z sub d, w, indicates whether the word w in d is from a topic or background. and if it's from a topic, which topic. so if you look at the e-step formulas, essentially we're actually normalizing these counts, sorry, these probabilities of observing the word from each distribution. so you can see, basically the prediction of word from topic zero sub j is based on the probability of selecting that theta sub j as a word distribution to generate the word. multiply by the probability of observing the word from that distribution. and i said it's proportional to this because in the implementation of em algorithm you can keep counter for this quantity, and in the end it just normalizes it. so the normalization here is over all the topics and then you would get a probability. now, in the m-step, we do the same, and we are going to collect these. allocated account for each topic. and we split words among the topics. and then we're going to normalize them in different ways to obtain the real estimate. so for example, we can normalize among all the topics to get the re-estimate of pi, the coverage. or we can re-normalize based on all the words. and that would give us a word distribution. so it's useful to think algorithm in this way because when implemented, you can just use variables, but keep track of these quantities in each case. and then you just normalize these variables to make them distribution. now i did not put the constraint for this one. and i intentionally leave this as an exercise for you. and you can see, what's the normalizer for this one? it's of a slightly different form but it's essentially the same as the one that you have seen here in this one. so in general in the envisioning of em algorithms you will see you accumulate the counts, various counts and then you normalize them. so to summarize, we introduced the plsa model. which is a mixture model with k unigram language models representing k topics. and we also added a pre-determined background language model to help discover discriminative topics, because this background language model can help attract the common terms. and we select the maximum estimate that we cant discover topical knowledge from text data. in this case plsa allows us to discover two things, one is k worded distributions, each one representing a topic and the other is the proportion of each topic in each document. and such detailed characterization of coverage of topics in documents can enable a lot of photo analysis. for example, we can aggregate the documents in the particular pan period to assess the coverage of a particular topic in a time period. that would allow us to generate the temporal chains of topics. we can also aggregate topics covered in documents associated with a particular author and then we can categorize the topics written by this author, etc. and in addition to this, we can also cluster terms and cluster documents. in fact, each topic can be regarded as a cluster. so we already have the term clusters. in the higher probability, the words can be regarded as belonging to one cluster represented by the topic. similarly, documents can be clustered in the same way. we can assign a document to the topic cluster that's covered most in the document. so remember, pi's indicate to what extent each topic is covered in the document, we can assign the document to the topical cluster that has the highest pi. and in general there are many useful applications of this technique. [music",08_3-8-probabilistic-latent-semantic-analysis-plsa-part-2
52,https://www.coursera.org/learn/text-mining,06_3-6-probabilistic-topic-models-expectation-maximization-algorithm-part-3.en.txt,text-mining/04_week-3/02_week-3-lessons/06_3-6-probabilistic-topic-models-expectation-maximization-algorithm-part-3.en.txt,"so, i just showed you that empirically the likelihood will converge, but theoretically it can also be proved that em algorithm will converge to a local maximum. so here's just an illustration of what happened and a detailed explanation. this required more knowledge about that, some of that inequalities, that we haven't really covered yet. so here what you see is on the x dimension, we have a c0 value. this is a parameter that we have. on the y axis we see the likelihood function. so this curve is the original likelihood function, and this is the one that we hope to maximize. and we hope to find a c0 value at this point to maximize this. but in the case of mitsumoto we can not easily find an analytic solution to the problem. so, we have to resolve the numerical errors, and the em algorithm is such an algorithm. it's a hill-climb algorithm. that would mean you start with some random guess. let's say you start from here, that's your starting point. and then you try to improve this by moving this to another point where you can have a higher likelihood. so that's the ideal hill climbing. and in the em algorithm, the way we achieve this is to do two things. first, we'll fix a lower bound of likelihood function. so this is the lower bound. see here. and once we fit the lower bound, we can then maximize the lower bound. and of course, the reason why this works, is because the lower bound is much easier to optimize. so we know our current guess is here. and by maximizing the lower bound, we'll move this point to the top. to here. right? and we can then map to the original likelihood function, we find this point. because it's a lower bound, we are guaranteed to improve this guess, right? because we improve our lower bound and then the original likelihood curve which is above this lower bound will definitely be improved as well. so we already know it's improving the lower bound. so we definitely improve this original likelihood function, which is above this lower bound. so, in our example, the current guess is parameter value given by the current generation. and then the next guess is the re-estimated parameter values. from this illustration you can see the next guess is always better than the current guess. unless it has reached the maximum, where it will be stuck there. so the two would be equal. so, the e-step is basically to compute this lower bound. we don't directly just compute this likelihood function but we compute the length of the variable values and these are basically a part of this lower bound. this helps determine the lower bound. the m-step on the other hand is to maximize the lower bound. it allows us to move parameters to a new point. and that's why em algorithm is guaranteed to converge to a local maximum. now, as you can imagine, when we have many local maxima, we also have to repeat the em algorithm multiple times. in order to figure out which one is the actual global maximum. and this actually in general is a difficult problem in numeral optimization. so here for example had we started from here, then we gradually just climb up to this top. so, that's not optimal, and we'd like to climb up all the way to here, so the only way to climb up to this gear is to start from somewhere here or here. so, in the em algorithm, we generally would have to start from different points or have some other way to determine a good initial starting point. to summarize in this lecture we introduced the em algorithm. this is a general algorithm for computing maximum maximum likelihood estimate of all kinds of models, so not just for our simple model. and it's a hill-climbing algorithm, so it can only converge to a local maximum and it will depend on initial points. the general idea is that we will have two steps to improve the estimate of. in the e-step we roughly [inaudible] how many there are by predicting values of useful hidden variables that we would use to simplify the estimation. in our case, this is the distribution that has been used to generate the word. in the m-step then we would exploit such augmented data which would make it easier to estimate the distribution, to improve the estimate of parameters. here improve is guaranteed in terms of the likelihood function. note that it's not necessary that we will have a stable convergence of parameter value even though the likelihood function is ensured to increase. there are some properties that have to be satisfied in order for the parameters also to convert into some stable value. now here data augmentation is done probabilistically. that means, we're not going to just say exactly what's the value of a hidden variable. but we're going to have a probability distribution over the possible values of these hidden variables. so this causes a split of counts of events probabilistically. and in our case we'll split the word counts between the two distributions. [music",06_3-6-probabilistic-topic-models-expectation-maximization-algorithm-part-3
53,https://www.coursera.org/learn/text-mining,02_5-2-text-categorization-discriminative-classifier-part-2.en.txt,text-mining/06_week-5/02_week-5-lessons/02_5-2-text-categorization-discriminative-classifier-part-2.en.txt,"[sound] this lecture is a continued discussion of discriminative classifiers for text categorization. so, in this lecture, we're going to introduce, yet another discriminative classifier called the support vector machine or svm. which is a very popular classification method and it has been also shown to be effective for text categorization. so to introduce this classifier, let's also think about the simple case of two categories. we have two topic categories, 01 and 02 here. and we want to classify documents into these two categories and we're going to represent again a document by a feature factor x here. now, the idea of this classifier is to design also a linear separator here that you'll see and it's very similar to what you have seen not just for regression, right? and we're going to do also say that if the sign of this function value is positive then we're going to say the objective is in category one. otherwise, we're going to say it's in category 2. so that makes 0 that is the decision boundary between the few categories. so, in generally hiding marginal space such as, 0. corresponds to a hyper plain. now i've shown you a simple case of two dimensional space it was just x1 and x2 and this case this corresponds to a line that you can see here. so, this is a line defined by just three parameters here, beta zero, beta one, and beta two. now, this line is heading in this direction so it shows that as we increase x1, x2 will also increase. so we know that beta one and beta two have different assigns, one is negative and the other is positive. so let's just assume that beta one is negative and beta two is positive. now, it's interesting to examine, then, the data instances on the two sides of the slide. so, here, the data instance are visualized as circles for one class and diamonds for the other class. now, one question is to take a point like this one and to ask the question what's the value of this expression, or this classifier, for this data point? so what do you think? basically, we're going to evaluate its value by using this function. and as we said, if this value's positive we're going to say this is in category one, and if it's negative, it's going to be in category two. intuitively, this line separates these two categories, so we expect the points on one side would be positive and the points on the other side would be negative. our question is under the assumption that i just mentioned, let's examine a particular point like this one. so what do you think is the sine of this expression? well, to examine the sine we can simply look at this expression here. and we can compare this with let's say, value on the line, let's see, compare this with this point. while they have identical x1, but then one has a higher value for x2. now, let's look at the sin of the coefficient for x2. well, we know this is a positive. so, what that means is that the f value for this point should be higher than the f value for this point on the line that means this will be positive, right? so we know in general of all points on this side, the function's value will be positive and you can also verify all the points on this side will be negative. and so this is how this kind of linear classifier or linear separator can then separate the points in the two categories. so, now the natural question is, which linear separator is the best? now, i've get you one line here that can separate the two classes. and this line, of course, is determined by the vector beta, the coefficients. different coefficients will give us different lines. so, we could imagine there are other lines that can do the same job. gamma, for example, could give us another line that counts a separator to these instances. of course, there are also lines that won't separate to them and those are bad lines. but, the question is, when we have multiple lines that can separate both clauses, which align the best? in fact, you can imagine, there are many different ways of choosing the line. so, the logistical regression classifier that you have seen earlier actually uses some criteria to determine where this line should be and so linear separate as well. and uses a conditional likelihood on the training that it determines which line is the best. but in svm we're going to look at another criteria for determining which line is the best. and this time, the criteria is more tied to the classification arrow as you will see. so, the basic idea is to choose the separator to maximize the margin. so what is a margin? so, i choose some dotted lines here to indicate the boundaries of those data points in each class. and the margin is simply the distance between the line, the separator, and the closest point from each class. so you can see the margin of this side is as i've shown here and you can also define the margin on the other side. in order for the separator to maximize the margin, it has to be kind of in the middle of the two boundaries and you don't want this separator to be very close to one side, and that in intuition makes a lot of sense. so this is basic idea of svm. we're going to choose a linear separator to maximize the margin. now on this slide, i've also changed the notation so that i'm not going to use beta to denote the parameters. but instead, i'm going to use w although w was used to denote the words before so don't be confused here. w here is actually a width, a certain width. so i'm also using lowercase b to denote the beta 0, a biased constant. and there are instances do represent that as x and i also use the vector form of multiplication here. so we see a transpose of w vector multiply by the future vector. so b is a bias constant and w is a set of weights with one way for each feature. we have m features and so we have m weights and that will represent as a vector. and similarly, the data instance here, the text object, is represented by also a feature vector of the same number of elements. xi is a feature value. for example, word count and you can verify, when we. multiply these two vectors together, take the dot product, we get the same form of the linear separator as you have seen before. it's just a different way of representing this. now i use this way so that it's more consistent with what notations people usually use when they talk about svm. this way you can better connect the slides with some other readings you might do. okay, so when we maximize the margins of a separator, it just means the boundary of the separator is only determined by a few data points, and these are the data points that we call support vectors. so here illustrated are two support vectors for one class and two for the other class. and these quotas define the margin basically, and you can imagine once we know which are supportive vectors then this center separator line will be determined by them. so the other data points actually don't really matter that much. and you can see if you change the other data points it won't really affect the margin, so the separator will stay the same. mainly affected by the the support vector machines. sorry, it's mainly affected by the support vectors and that's why it's called a support vector machine. okay, so now the next question is, of course, how can we set it up to optimize the line? how can we actually find the line or the separator? now this is equivalent to finding values for w and b, because they will determine where exactly the separator is. so in the simplest case, the linear svm is just a simple optimization problem. so again, let's recall that our classifier is such a linear separator, where we have weights for all the features, and the main goal is remove these weights w and b. and the classifier will say x is in category theta 1 if it's positive. otherwise, it's going to say it's in the other category. so this is our assumption, our setup. so in the linear svm, we are going to then seek these parameter values to optimize the margins and then the training error. the training data would be basically like in other classifiers. we have a set of training points where we know the x vector, and then we also know the corresponding label, y i. and here we define y i as two values, but these values are not 0, 1 as you have seen before, but rather -1 and positive 1, and they're corresponding to these two categories, as i've shown here. now you might wonder why we don't define them as 0 and 1 instead of having -1, 1. and this is purely for mathematical convenience, as you will see in a moment. so the goal of optimization first is to make sure the labeling of training data is all correct. so that just means if y i, the norm label for instance x i, is 1, we would like this classified value to be large. and here we just choose a threshold of 1 here. but if you use another threshold, you can easily fit that constant into the parameter values b and w to make the right-hand side just 1. now if, on the other hand, y i is -1, that means it's in a different class, then we want this classifier to give us a very small value, in fact a negative value, and we want this value to be less than or equal to -1. now these are the two different instances, different kinds of cases. how can we combine them together? now this is where it's convenient when we have chosen y i as -1 for the other category, because it turns out that we can either combine the two into one constraint. y i multiplied by the classifier value must be larger than or equal to 1. and obviously when y i is just 1, you see this is the same as the constraint on the left-hand side. but when y i is -1, you also see that this is equivalent to the other inequality. so this one actually captures both constraints in a unified way, and that's a convenient way of capturing these constraints. what's our second goal? well, that's to maximize margin, so we want to ensure that separator can do well on the training data. but then, among all the cases where we can separate the data, we also would like to choose the separator that has the largest margin. now the margin can be assumed to be related to the magnitude of the weight. and so w transform multiplied by w would give us basically the sum of squares of all those weights. so to have a small value for this expression, it means all the w i's must be small. so we've just assumed that we have a constraint for getting the data on the training set to be classified correctly. now we also have the objective that's tied into a maximization of margin, and this is simply to minimize w transpose multiplied by w, and we often denote this by phi of w. so now you can see this is basically a optimization problem. we have some variables to optimize, and these are the weights and b and we have some constraints. these are linear constraints and the objective function is a quadratic function of the weights. so this a quadratic program with linear constraints, and there are standard algorithm that are variable for solving this problem. and once we solve the problem we obtain the weights w and b. and then this would give us a well-defined classifier. so we can then use this classifier to classify any new text objects. now the previous formulation did not allow any error in the classification, but sometimes the data may not be linear to the separator. that means that they may not look as nice as you have seen on the previous slide where a line can separate all of them. and what would happen if we allowed some errors? well, the principle can stay. we want to minimize the training error but try to also maximize the margin. but in this case we have a soft margin, because the data points may not be completely separable. so it turns out that we can easily modify svm to accommodate this. so what you see here is very similar to what you have seen before, but we have introduced the extra variable xi i. and we in fact will have one for each data instance, and this is going to model the error that we allow for each instance. but the optimization problem would be very similar. so specifically, you will see we have added something to the optimization problem. first we have added some error to the constraint so that now we allow a allow the classifier to make some mistakes here. so, this xi i is allowed an error. if we set xi i to 0, then we go back to the original constraint. we want every instance to be classified accurately. but, if we allow this to be non-zero, then we allow some errors here. in fact, if the length of the xi i is very large, the error can be very, very large. so naturally, we don't want this to happen. so we want to then also minimize this xi i. so, because xi i needs to be minimized in order to control the error. and so, as a result, in the objective function, we also add more to the original one, which is only w, by basically ensuring that we not only minimize the weights, but also minimize the errors, as you see here. here we simply take a sum over all the instances. each one has a xi i to model the error allowed for that instance. and when we combine them together, we basically want to minimize the errors on all of them. now you see there's a parameter c here, and that's a constant to control the trade-off between minimizing the errors and maximizing the margin. if c is set to zero, you can see, we go back to the original object function where we only maximize the margin. we don't really optimize the training errors and then xi i can be set to a very large value to make the constraints easy to satisfy. that's not very good of course, so c should be set to a non-zero value, a positive value. but when c is set to a very, very large value, we'll see the object of the function will be dominated mostly by the training errors and so the optimization of margin will then play a secondary role. so if that happens, what would happen is then we will try to do our best to minimize the training errors, but then we're not going to take care of the margin and that affects the generalization factors of the classify for future data. so it's also not good. so in particular, this parameter c has to be actually set carefully. and this is just like in the case of k-nearest neighbor where you need to optimize a number of neighbors. here you need to optimize the c. and this is, in general, also achievable by doing cross-validation. basically, you look at the empirical data and see what value c should be set to in order to optimize the performance. now with this modification, the problem is still quadratic programming with linear constraints so the optimizing algorithm can be actually applied to solve this different version of the program. again, once we have obtained the weights and the bias, then we can have classifier that's ready for classifying new objects. so that's the basic idea of svm. so to summarize the text categorization methods, where we introduce the many methods, and some are generative models. some are discriminative methods. and these tend to perform similarly when optimized. so there's still no clear winner, although each one has its pros and cons. and the performance might also vary on different data sets for different problems. and one reason is also because the feature representation is very critical and these methods all require effective feature representation. and to design an effective feature set, we need domain knowledge and humans definitely play an important role here, although there are new machine learning methods and algorithm representation learning that can help with learning features. and another common thing is that they might be performing similarly on the data set, but with different mistakes. and so, their performance might be similar, but then the mistakes they make might be different. so that means it's useful to compare different methods for a particular problem and then maybe combine multiple methods because this can improve the robustness and they won't make the same mistakes. so assemble approaches that would combine different methods tend to be more robust and can be useful in practice. most techniques that we introduce use the supervised machine learning, which is a very general method. so that means that these methods can be actually applied to any text or categorization problem. as long as we have humans to help annotate some training data sets and design features, then supervising machine learning and all these classifiers can be easily applied to those problems to solve the categorization problem to allow us to characterize content of text concisely with categories. or to predict the sum properties of real world variables that are associated with text data. the computers, of course, here are trying to optimize the combinations of the features provided by human. and as i said, there are many different ways of combining them and they also optimize different object or functions. but in order to achieve good performance, they all require effective features and also plenty of training data. so as a general rule, and if you can improve the feature representation, and then provide more training data, then you can generally do better. performance is often much more affected by the effectiveness of features than by the choice of specific classifiers. so feature design tends to be more important than the choice of specific classifier. so, how do we design effective features? well, unfortunately, this is very application-specific. so there's no really much general thing to say here. but we can do some analysis of the categorization problem and try to understand what kind of features might help us distinguish categories. and in general, we can use a lot of domain knowledge to help us design features. and another way to figure out the effective features is to do error analysis on the categorization results. you could, for example, look at which category tends to be confused with which other categories. and you can use a confusion matrix to examine the errors systematically across categories. and then, you can look into specific instances to see why the mistake has been made and what features can prevent the mistake. and this can allow you to obtain insights for design new features. so error analysis is very important in general, and that's where you can get the insights about your specific problem. and finally, we can leverage this on machine learning techniques. so, for example, feature selection is a technique that we haven't really talked about, but is very important. and it has to do with trying to select the most useful features before you actually train a full classifier. sometimes training a classifier will also help you identify which features have high values. there are also other ways to ensure this sparsity. of the model, meaning to recognize the widths. for example, the svm actually tries to minimize the weights on features. but you can further force some features, force to use only a small number of features. there are also techniques for dimension reduction. and that's to reduce a high dimensional feature space into a low dimensional space typically by clustering of features in various ways. so metrics factorization has been used to do such a job, and this is some of the techniques are actually very similar to the talking models that we'll discuss. so talking morals like psa or lda can actually help us reduce the dimension of features. like imagine the words our original feature. but the can be matched to the topic space .let's say we have k topics. so a document can now be represented as a vector of just k values corresponding to the topics. so we can let each topic define one dimension, so we have a k dimensional space instead of the original high dimensional space corresponding to words. and this is often another way to learn effective features. especially, we could also use the categories to supervise the learning of such low dimensional structures. and so, the original worth features can be also combined with such amazing dimension features or lower dimensional space features to provide a multi resolution which is often very useful. deep learning is a new technique that has been developed the machine learning. it's particularly useful for learning representations. so deep learning refers to deep neural network, it's another kind of classifier, where you can have intermediate features embedded in the models. that it's highly non-linear transpire, and some recent events that's allowed us to train such a complex network effectively. and the technique has been shown to be quite effective for speech recognition, computer reasoning, and recently has been applied to text as well. it has shown some promise. and one important advantage of this approach in relationship with the featured design, is that they can learn intermediate replantations or compound the features automatically. and this is very valuable for learning effective replantation, for text recalibration. although in text domain, because words are exemplary representation of text content, because these are human's imaging for communication. and they are generally sufficient for for representing content for many tasks. if there's a need for some new representation, people would have invented a new word. so because of this we think of value of deep learning for text processing tends to be lower than for [inaudible]. and the speech revenue where they are anchored corresponding where the design that worked as features. but people only still very promising for learning effective features especially for complicated tasks. like a analysis it has been shown to be effective because it can provide that goes beyond that of words. now regarding the training examples. it's generally hard to get a lot of training examples because it involves human labor. but there are also some ways to help with this. so one is to assume in some low quality training examples can also be used. so, those can be called pseudo training examples. for example, if you take reviews from the internet, they might have overall ratings. so, to train a of categorizer, meaning we want to positive or negative. and categorize these reviews into these two categories. then we could assume five star reviews are all positive training samples. one star are negative. but of course, sometimes even five star reviews will also mention negative opinions so the training sample is not all of that high quality, but they can still be useful. another idea is to exploit the unlabeled data and there are techniques called the semi-supervised machine learning techniques that can allow you to combine labeled data with unlabeled data. so, in other case it's easy to see the next model can be used for both text plus read and the categorization. so you can imagine, if you have a lot of unlabeled text data for categorization, then you can actually do clustering on these text data, learn categories. and then try to somehow align these categories. with the categories defined by the training data, where we already know which documents are in which category. so you can in fact use the algorithm to actually combine both. that would allow you essentially also pick up useful words and label the data. you can think of this in another way. basically, we can use let's say a to classify all of the unlabeled text documents, and then we're going to assume the high confidence classification results are actually liable. then you suddenly have more training data because from the enabler that we now know some are labeled as category one, some are labeled as category two. all though the label is not completely reliable but then they can still be useful. so let's assume they are actually training label examples, and then we combine them with true training examples through improved categorization method. and so this idea is very powerful. when the enabled data and the training data are very different, and we might need to use other advanced machine learning techniques called domain adaptation or transfer learning. this is when we can borrow some training examples from a related problem that may be different. or, from a categorization password that follow very different distribution from what we are working on. but basically, when the two domains are very different, then we need to be careful and not overfit the training domain. but yet, we can still want to use some signals from the related training data. so for example, training categorization on news might not give you effective plus y for class vine topics and tweets. but you can still learn something from news to help look at writing tweets. so there are mission learning techniques that can help you do that effectively. here's a suggested reading where you can find more details about some more of the methods is that we have covered. [music",02_5-2-text-categorization-discriminative-classifier-part-2
54,https://www.coursera.org/learn/text-mining,06_5-6-opinion-mining-and-sentiment-analysis-sentiment-classification.en.txt,text-mining/06_week-5/02_week-5-lessons/06_5-6-opinion-mining-and-sentiment-analysis-sentiment-classification.en.txt,"[noise] this lecture is about the sentiment classification. if we assume that most of the elements in the opinion representation are all ready known, then our only task may be just a sentiment classification, as shown in this case. so suppose we know who's the opinion holder and what's the opinion target, and also know the content and the context of the opinion, then we mainly need to decide the opinion sentiment of the review. so this is a case of just using sentiment classification for understanding opinion. sentiment classification can be defined more specifically as follows. the input is opinionated text object, the output is typically a sentiment label, or a sentiment tag, and that can be designed in two ways. one is polarity analysis, where we have categories such as positive, negative, or neutral. the other is emotion analysis that can go beyond a polarity to characterize the feeling of the opinion holder. in the case of polarity analysis, we sometimes also have numerical ratings as you often see in some reviews on the web. five might denote the most positive, and one maybe the most negative, for example. in general, you have just disk holder categories to characterize the sentiment. in emotion analysis, of course, there are also different ways for design the categories. the six most frequently used categories are happy, sad, fearful, angry, surprised, and disgusted. so as you can see, the task is essentially a classification task, or categorization task, as we've seen before, so it's a special case of text categorization. this also means any textual categorization method can be used to do sentiment classification. now of course if you just do that, the accuracy may not be good because sentiment classification does requires some improvement over regular text categorization technique, or simple text categorization technique. in particular, it needs two kind of improvements. one is to use more sophisticated features that may be more appropriate for sentiment tagging as i will discuss in a moment. the other is to consider the order of these categories, and especially in polarity analysis, it's very clear there's an order here, and so these categories are not all that independent. there's order among them, and so it's useful to consider the order. for example, we could use ordinal regression to do that, and that's something that we'll talk more about later. so now, let's talk about some features that are often very useful for text categorization and text mining in general, but some of them are especially also needed for sentiment analysis. so let's start from the simplest one, which is character n-grams. you can just have a sequence of characters as a unit, and they can be mixed with different n's, different lengths. all right, and this is a very general way and very robust way to represent the text data. and you could do that for any language, pretty much. and this is also robust to spelling errors or recognition errors, right? so if you misspell a word by one character and this representation actually would allow you to match this word when it occurs in the text correctly. right, so misspell the word and the correct form can be matched because they contain some common n-grams of characters. but of course such a recommendation would not be as discriminating as words. so next, we have word n-grams, a sequence of words and again, we can mix them with different n's. unigram's are actually often very effective for a lot of text processing tasks, and it's mostly because words are word designed features by humans for communication, and so they are often good enough for many tasks. but it's not good, or not sufficient for sentiment analysis clearly. for example, we might see a sentence like, it's not good or it's not as good as something else, right? so in such a case if you just take a good and that would suggest positive that's not good, all right so it's not accurate. but if you take a bigram, not good together, and then it's more accurate. so longer n-grams are generally more discriminative, and they're more specific. if you match it, and it says a lot, and it's accurate it's unlikely, very ambiguous. but it may cause overfitting because with such very unique features that machine oriented program can easily pick up such features from the training set and to rely on such unique features to distinguish the categories. and obviously, that kind of classify, one would generalize word to future there when such discriminative features will not necessarily occur. so that's a problem of overfitting that's not desirable. we can also consider part of speech tag, n-grams if we can do part of speech tagging an, for example, adjective noun could form a pair. we can also mix n-grams of words and n-grams of part of speech tags. for example, the word great might be followed by a noun, and this could become a feature, a hybrid feature, that could be useful for sentiment analysis. so next we can also have word classes. so these classes can be syntactic like a part of speech tags, or could be semantic, and they might represent concepts in the thesaurus or ontology, like wordnet. or they can be recognized the name entities, like people or place, and these categories can be used to enrich the presentation as additional features. we can also learn word clusters and parodically, for example, we've talked about the mining associations of words. and so we can have cluster of paradigmatically related words or syntaxmatically related words, and these clusters can be features to supplement the word base representation. furthermore, we can also have frequent pattern syntax, and these could be frequent word set, the words that form the pattern do not necessarily occur together or next to each other. but we'll also have locations where the words my occur more closely together, and such patterns provide a more discriminative features than words obviously. and they may also generalize better than just regular n-grams because they are frequent. so you expected them to occur also in tested data. so they have a lot of advantages, but they might still face the problem of overfeeding as the features become more complex. this is a problem in general, and the same is true for parse tree-based features, when you can use a parse tree to derive features such as frequent subtrees, or paths, and those are even more discriminating, but they're also are more likely to cause over fitting. and in general, pattern discovery algorithm's are very useful for feature construction because they allow us to search in a large space of possible features that are more complex than words that are sometimes useful. so in general, natural language processing is very important that they derive complex features, and they can enrich text representation. so for example, this is a simple sentence that i showed you a long time ago in another lecture. so from these words we can only derive simple word n-grams, representations or character n-grams. but with nlp, we can enrich the representation with a lot of other information such as part of speech tags, parse trees or entities, or even speech act. now with such enriching information of course, then we can generate a lot of other features, more complex features like a mixed grams of a word and the part of speech tags, or even a part of a parse tree. so in general, feature design actually affects categorization accuracy significantly, and it's a very important part of any machine learning application. in general, i think it would be most effective if you can combine machine learning, error analysis, and domain knowledge in design features. so first you want to use the main knowledge, your understanding of the problem, the design seed features, and you can also define a basic feature space with a lot of possible features for the machine learning program to work on, and machine can be applied to select the most effective features or construct the new features. that's feature learning, and these features can then be further analyzed by humans through error analysis. and you can look at the categorization errors, and then further analyze what features can help you recover from those errors, or what features cause overfitting and cause those errors. and so this can lead into feature validation that will revised the feature set, and then you can iterate. and we might consider using a different features space. so nlp enriches text recognition as i just said, and because it enriches the feature space, it allows much larger such a space of features and there are also many, many more features that can be very useful for a lot of tasks. but be careful not to use a lot of category features because it can cause overfitting, or otherwise you would have to training careful not to let overflow happen. so a main challenge in design features, a common challenge is to optimize a trade off between exhaustivity and the specificity, and this trade off turns out to be very difficult. now exhaustivity means we want the features to actually have high coverage of a lot of documents. and so in that sense, you want the features to be frequent. specifity requires the feature to be discriminative, so naturally infrequent the features tend to be more discriminative. so this really cause a trade off between frequent versus infrequent features. and that's why a featured design is usually odd. and that's probably the most important part in machine learning any problem in particularly in our case, for text categoration or more specifically the senitment classification. [music",06_5-6-opinion-mining-and-sentiment-analysis-sentiment-classification
55,https://www.coursera.org/learn/text-mining,04_5-4-text-categorization-evaluation-part-2.en.txt,text-mining/06_week-5/02_week-5-lessons/04_5-4-text-categorization-evaluation-part-2.en.txt,"[sound] this lecture is a continued discussion of evaluation of text categorization. earlier we have introduced measures that can be used with computer provision and recall. for each category and each document now in this lecture we're going to further examine how to combine the performance of the different categories of different documents how to aggregate them, how do we take average? you see on the title here i indicated it's called a macro average and this is in contrast to micro average that we'll talk more about later. so, again, for each category we're going to compute the precision require an f1 so for example category c1 we have precision p1, recall r1 and f value f1. and similarly we can do that for category 2 and and all the other categories. now once we compute that and we can aggregate them, so for example we can aggregate all the precision values. for all the categories, for computing overall precision. and this is often very useful to summarize what we have seen in the whole data set. and aggregation can be done many different ways. again as i said, in a case when you need to aggregate different values, it's always good to think about what's the best way of doing the aggregation. for example, we can consider arithmetic mean, which is very commonly used, or you can use geometric mean, which would have different behavior. depending on the way you aggregate, you might have got different conclusions. in terms of which method works better, so it's important to consider these differences and choosing the right one or a more suitable one for your task. so the difference fore example between arithmetically and geometrically is that the arithmetically would be dominated by high values whereas geometrically would be more affected by low values. base and so whether you are want to emphasis low values or high values would be a question relate with all you and similar we can do that for recal and f score. so that's how we can generate the overall precision, recall and f score. now we can do the same for aggregation of other all the document all right. so it's exactly the same situation for each document on our computer. precision, recall, and f. and then after we have completed the computation for all these documents, we're going to aggregate them to generate the overall precision, overall recall, and overall f score. these are, again, examining the results from different angles. which one's more useful will depend on your application. in general, it's beneficial to look at the results from all these perspectives. and especially if you compare different methods in different dimensions, it might reveal which method is better in which measure or in what situations and this provides insightful. understanding the strands of a method or a weakness and this provides further insight for improving them. so as i mentioned, there is also micro-average in contrast to the macro average that we talked about earlier. in this case, what we do is you pool together all the decisions, and then compute the precision and recall. so we can compute the overall precision and recall by just counting how many cases are in true positive, how many cases in false positive, etc, it's computing the values in the contingency table, and then we can compute the precision and recall just once. in contrast, in macro-averaging, we're going to do that for each category first. and then aggregate over these categories or we do that for each document and then aggregate all the documents but here we pooled them together. now this would be very similar to the classification accuracy that we used earlier, and one problem here of course to treat all the instances, all the decisions equally. and this may not be desirable. but it may be a property for some applications, especially if we associate the, for example, the cost for each combination. then we can actually compute for example, weighted classification accuracy. where you associate the different cost or utility for each specific decision, so there could be variations of these methods that would be more useful. but in general macro average tends to be more information than micro average, just because it might reflect the need for understanding performance on each category or performance on each document which are needed in applications. but macro averaging and micro averaging, they are both very common, and you might see both reported in research papers on categorization. also sometimes categorization results might actually be evaluated from ranking prospective. and this is because categorization results are sometimes or often indeed passed it to a human for various purposes. for example, it might be passed to humans for further editing. for example, news articles can be tempted to be categorized by using a system and then human editors would then correct them. and all the email messages might be throughout to the right person for handling in the help desk. and in such a case the categorizations will help prioritizing the task for particular customer service person. so, in this case the results have to be prioritized and if the system can't give a score to the categorization decision for confidence then we can use the scores to rank these decisions and then evaluate the results as a rank list, just as in a search engine. evaluation where you rank the documents in responsible query. so for example a discovery of spam emails can be evaluated based on ranking emails for the spam category. and this is useful if you want people to to verify whether this is really spam, right? the person would then take the rank to check one by one and then verify whether this is indeed a spam. so to reflect the utility for humans in such a task, it's better to evaluate ranking chris and this is basically similar to a search again. and in such a case often the problem can be better formulated as a ranking problem instead of a categorization problem. so for example, ranking documents in a search engine can also be framed as a binary categorization problem, distinguish the relevant documents that are useful to users from those that are not useful, but typically we frame this as a ranking problem, and we evaluate it as a rank list. that's because people tend to examine the results so ranking evaluation more reflects utility from user's perspective. so to summarize categorization evaluation, first evaluation is always very important for all these tasks. so get it right. if you don't get it right, you might get misleading results. and you might be misled to believe one method is better than the other, which is in fact not true. so it's very important to get it right. measures must also reflect the intended use of the results for a particular application. for example, in spam filtering and news categorization the results are used in maybe different ways. so then we would need to consider the difference and design measures appropriately. we generally need to consider how will the results be further processed by the user and think from a user's perspective. what quality is important? what aspect of quality is important? sometimes there are trade offs between multiple aspects like precision and recall and so we need to know for this application is high recall more important, or high precision is more important. ideally we associate the different cost with each different decision arrow. and this of course has to be designed in an application specific way. some commonly used measures for relative comparison methods are the following. classification accuracy, it's very commonly used for especially balance. [inaudible] preceding [inaudible] scores are common and report characterizing performances, given angles and give us some [inaudible] like a [inaudible] per document basis [inaudible] and then take a average of all of them, different ways micro versus macro [inaudible]. in general, you want to look at the results from multiple perspectives and for particular applications some perspectives would be more important than others but diagnoses and analysis of categorization methods. it's generally useful to look at as many perspectives as possible to see subtle differences between methods or tow see where a method might be weak from which you can obtain sight for improving a method. finally sometimes ranking may be more appropriate so be careful sometimes categorization has got may be better frame as a ranking tasks and there're machine running methods for optimizing ranking measures as well. so here are two suggested readings. one is some chapters of this book where you can find more discussion about evaluation measures. the second is a paper about comparison of different approaches to text categorization and it also has an excellent discussion of how to evaluate textual categorization. [music",04_5-4-text-categorization-evaluation-part-2
56,https://www.coursera.org/learn/text-mining,07_5-7-opinion-mining-and-sentiment-analysis-ordinal-logistic-regression.en.txt,text-mining/06_week-5/02_week-5-lessons/07_5-7-opinion-mining-and-sentiment-analysis-ordinal-logistic-regression.en.txt,"[noise] this lecture is about the ordinal logistic regression for sentiment analysis. so, this is our problem set up for a typical sentiment classification problem. or more specifically a rating prediction. we have an opinionated text document d as input, and we want to generate as output, a rating in the range of 1 through k so it's a discrete rating, and this is a categorization problem. we have k categories here. now we could use a regular text for categorization technique to solve this problem. but such a solution would not consider the order and dependency of the categories. intuitively, the features that can distinguish category 2 from 1, or rather rating 2 from 1, may be similar to those that can distinguish k from k-1. for example, positive words generally suggest a higher rating. when we train categorization problem by treating these categories as independent we would not capture this. so what's the solution? well in general we can order to classify and there are many different approaches. and here we're going to talk about one of them that called ordinal logistic regression. now, let's first think about how we use logistical regression for a binary sentiment. a categorization problem. so suppose we just wanted to distinguish a positive from a negative and that is just a two category categorization problem. so the predictors are represented as x and these are the features. and there are m features all together. the feature value is a real number. and this can be representation of a text document. and why it has two values, binary response variable 0 or 1. 1 means x is positive, 0 means x is negative. and then of course this is a standard two category categorization problem. we can apply logistical regression. you may recall that in logistical regression, we assume the log of probability that the y is equal to one, is assumed to be a linear function of these features, as shown here. so this would allow us to also write the probability of y equals one, given x in this equation that you are seeing on the bottom. so that's a logistical function and you can see it relates this probability to, probability that y=1 to the feature values. and of course beta i's are parameters here, so this is just a direct application of logistical regression for binary categorization. what if we have multiple categories, multiple levels? well we have to use such a binary logistical regression problem to solve this multi level rating prediction. and the idea is we can introduce multiple binary class files. in each case we asked the class file to predict the, whether the rating is j or above, or the rating's lower than j. so when yj is equal to 1, it means rating is j or above. when it's 0, that means the rating is lower than j. so basically if we want to predict a rating in the range of 1-k, we first have one classifier to distinguish a k versus others. and that's our classifier one. and then we're going to have another classifier to distinguish it. at k-1 from the rest. that's classifier 2. and in the end, we need a classifier to distinguish between 2 and 1. so altogether we'll have k-1 classifiers. now if we do that of course then we can also solve this problem and the logistical regression program will be also very straight forward as you have just seen on the previous slide. only that here we have more parameters. because for each classifier, we need a different set of parameters. so now the logistical regression classifies index by j, which corresponds to a rating level. and i have also used of j to replace beta 0. and this is to. make the notation more consistent, than was what we can show in the ordinal logistical regression. so here we now have basically k minus one regular logistic regression classifiers. each has it's own set of parameters. so now with this approach, we can now do ratings as follows. after we have trained these k-1 logistic regression classifiers, separately of course, then we can take a new instance and then invoke a classifier sequentially to make the decision. so first let look at the classifier that corresponds to level of rating k. so this classifier will tell us whether this object should have a rating of k or about. if probability according to this logistical regression classifier is larger than point five, we're going to say yes. the rating is k. now, what if it's not as large as twenty-five? well, that means the rating's below k, right? so now, we need to invoke the next classifier, which tells us whether it's above k minus one. it's at least k minus one. and if the probability is larger than twenty-five, then we'll say, well, then it's k-1. what if it says no? well, that means the rating would be even below k-1. and so we're going to just keep invoking these classifiers. and here we hit the end when we need to decide whether it's two or one. so this would help us solve the problem. right? so we can have a classifier that would actually give us a prediction of a rating in the range of 1 through k. now unfortunately such a strategy is not an optimal way of solving this problem. and specifically there are two problems with this approach. so these equations are the same as. you have seen before. now the first problem is that there are just too many parameters. there are many parameters. now, can you count how many parameters do we have exactly here? now this may be a interesting exercise. to do. so you might want to just pause the video and try to figure out the solution. how many parameters do i have for each classifier? and how many classifiers do we have? well you can see the, and so it is that for each classifier we have n plus one parameters, and we have k minus one classifiers all together, so the total number of parameters is k minus one multiplied by n plus one. that's a lot. a lot of parameters, so when the classifier has a lot of parameters, we would in general need a lot of data out to actually help us, training data, to help us decide the optimal parameters of such a complex model. so that's not ideal. now the second problems is that these problems, these k minus 1 plus fives, are not really independent. these problems are actually dependent. in general, words that are positive would make the rating higher for any of these classifiers. for all these classifiers. so we should be able to take advantage of this fact. now the idea of ordinal logistical regression is precisely that. the key idea is just the improvement over the k-1 independent logistical regression classifiers. and that idea is to tie these beta parameters. and that means we are going to assume the beta parameters. these are the parameters that indicated the inference of those weights. and we're going to assume these beta values are the same for all the k- 1 parameters. and this just encodes our intuition that, positive words in general would make a higher rating more likely. so this is intuitively assumptions, so reasonable for our problem setup. and we have this order in these categories. now in fact, this would allow us to have two positive benefits. one is it's going to reduce the number of families significantly. and the other is to allow us to share the training data. because all these parameters are similar to be equal. so these training data, for different classifiers can then be shared to help us set the optimal value for beta. so we have more data to help us choose a good beta value. so what's the consequence, well the formula would look very similar to what you have seen before only that, now the beta parameter has just one index that corresponds to the feature. it no longer has the other index that corresponds to the level of rating. so that means we tie them together. and there's only one set of better values for all the classifiers. however, each classifier still has the distinct r for value. the r for parameter. except it's different. and this is of course needed to predict the different levels of ratings. so r for sub j is different it depends on j, different than j, has a different r value. but the rest of the parameters, the beta i's are the same. so now you can also ask the question, how many parameters do we have now? again, that's an interesting question to think about. so if you think about it for a moment, and you will see now, the param, we have far fewer parameters. specifically we have m plus k minus one. because we have m, beta values, and plus k minus one of our values. so let's just look basically, that's basically the main idea of ordinal logistical regression. so, now, let's see how we can use such a method to actually assign ratings. it turns out that with this, this idea of tying all the parameters, the beta values. we also end up by having a similar way to make decisions. and more specifically now, the criteria whether the predictor probabilities are at least 0.5 above, and now is equivalent to whether the score of the object is larger than or equal to negative authors of j, as shown here. now, the scoring function is just taking the linear combination of all the features with the divided beta values. so, this means now we can simply make a decision of rating, by looking at the value of this scoring function, and see which bracket it falls into. now you can see the general decision rule is thus, when the score is in the particular range of all of our values, then we will assign the corresponding rating to that text object. so in this approach, we're going to score the object by using the features and trained parameter values. this score will then be compared with a set of trained alpha values to see which range the score is in. and then, using the range, we can then decide which rating the object should be getting. because, these ranges of alpha values correspond to the different levels of ratings, and that's from the way we train these alpha values. each is tied to some level of rating. [music",07_5-7-opinion-mining-and-sentiment-analysis-ordinal-logistic-regression
57,https://www.coursera.org/learn/text-mining,05_5-5-opinion-mining-and-sentiment-analysis-motivation.en.txt,text-mining/06_week-5/02_week-5-lessons/05_5-5-opinion-mining-and-sentiment-analysis-motivation.en.txt,"[sound] this lecture is about, opinion mining and sentiment analysis, covering, motivation. in this lecture, we're going to start, talking about, mining a different kind of knowledge. namely, knowledge about the observer or humans that have generated the text data. in particular, we're going to talk about the opinion mining and sentiment analysis. as we discussed earlier, text data can be regarded as data generated from humans as subjective sensors. in contrast, we have other devices such as video recorder that can report what's happening in the real world objective to generate the viewer data for example. now the main difference between test data and other data, like video data, is that it has rich opinions, and the content tends to be subjective because it's generated from humans. now, this is actually a unique advantaged of text data, as compared with other data, because the office is a great opportunity to understand the observers. we can mine text data to understand their opinions. understand people's preferences, how people think about something. so this lecture and the following lectures will be mainly about how we can mine and analyze opinions buried in a lot of text data. so let's start with the concept of opinion. it's not that easy to formally define opinion, but mostly we would define opinion as a subjective statement describing what a person believes or thinks about something. now, i highlighted quite a few words here. and that's because it's worth thinking a little bit more about these words. and that will help us better understand what's in an opinion. and this further helps us to define opinion more formally. which is always needed to computation to resolve the problem of opinion mining. so let's first look at the key word of subjective here. this is in contrast with objective statement or factual statement. those statements can be proved right or wrong. and this is a key differentiating factor from opinions which tends to be not easy to prove wrong or right, because it reflects what the person thinks about something. so in contrast, objective statement can usually be proved wrong or correct. for example, you might say this computer has a screen and a battery. now that's something you can check. it's either having a battery or not. but in contrast with this, think about the sentence such as, this laptop has the best battery or this laptop has a nice screen. now these statements are more subjective and it's very hard to prove whether it's wrong or correct. so opinion, is a subjective statement. and next lets look at the keyword person here. and that indicates that is an opinion holder. because when we talk about opinion, it's about an opinion held by someone. and then we notice that there is something here. so that is the target of the opinion. the opinion is expressed on this something. and now, of course, believes or thinks implies that an opinion will depend on the culture or background and the context in general. because a person might think different in a different context. people from different background may also think in different ways. so this analysis shows that there are multiple elements that we need to include in order to characterize opinion. so, what's a basic opinion representation like? well, it should include at least three elements, right? firstly, it has to specify what's the opinion holder. so whose opinion is this? second, it must also specify the target, what's this opinion about? and third, of course, we want opinion content. and so what exactly is opinion? if you can identify these, we get a basic understanding of opinion and can already be useful sometimes. you want to understand further, we want enriched opinion representation. and that means we also want to understand that, for example, the context of the opinion and what situation was the opinion expressed. for example, what time was it expressed? we, also, would like to, people understand the opinion sentiment, and this is to understand that what the opinion tells us about the opinion holder's feeling. for example, is this opinion positive, or negative? or perhaps the opinion holder was happy or was sad, and so such understanding obvious to those beyond just extracting the opinion content, it needs some analysis. so let's take a simple example of a product review. in this case, this actually expressed the opinion holder, and expressed the target. so its obviously whats opinion holder and that's just reviewer and its also often very clear whats the opinion target and that's the product review for example iphone 6. when the review is posted usually you can't such information easier. now the content, of course, is a review text that's, in general, also easy to obtain. so you can see product reviews are fairly easy to analyze in terms of obtaining a basic opinion of representation. but of course, if you want to get more information, you might know the context, for example. the review was written in 2015. or, we want to know that the sentiment of this review is positive. so, this additional understanding of course adds value to mining the opinions. now, you can see in this case the task is relatively easy and that's because the opinion holder and the opinion target have already been identified. now let's take a look at the sentence in the news. in this case, we have a implicit holder and a implicit target. and the tasker is in general harder. so, we can identify opinion holder here, and that's the governor of connecticut. we can also identify the target. so one target is hurricane sandy, but there is also another target mentioned which is hurricane of 1938. so what's the opinion? well, there's a negative sentiment here that's indicated by words like bad and worst. and we can also, then, identify context, new england in this case. now, unlike in the playoff review, all these elements must be extracted by using natural ram processing techniques. so, the task is much harder. and we need a deeper natural language processing. and these examples also suggest that a lot of work can be easy to done for product reviews. that's indeed what has happened. analyzing and assembling news is still quite difficult, it's more difficult than the analysis of opinions in product reviews. now there are also some other interesting variations. in fact, here we're going to examine the variations of opinions, more systematically. first, let's think about the opinion holder. the holder could be an individual or it could be group of people. sometimes, the opinion was from a committee. or from a whole country of people. opinion target accounts will vary a lot. it can be about one entity, a particular person, a particular product, a particular policy, ect. but it could be about a group of products. could be about the products from a company in general. could also be very specific about one attribute, though. an attribute of the entity. for example, it's just about the battery of iphone. it could be someone else's opinion. and one person might comment on another person's opinion, etc. so, you can see there is a lot of variation here that will cause the problem to vary a lot. now, opinion content, of course, can also vary a lot on the surface, you can identify one-sentence opinion or one-phrase opinion. but you can also have longer text to express an opinion, like the whole article. and furthermore we identify the variation in the sentiment or emotion damage that's above the feeding of the opinion holder. so, we can distinguish a positive versus negative or mutual or happy versus sad, separate. finally, the opinion context can also vary. we can have a simple context, like different time or different locations. but there could be also complex contexts, such as some background of topic being discussed. so when opinion is expressed in particular discourse context, it has to be interpreted in different ways than when it's expressed in another context. so the context can be very [inaudible] to entire discourse context of the opinion. from computational perspective, we're mostly interested in what opinions can be extracted from text data. so, it turns out that we can also differentiate, distinguish, different kinds of opinions in text data from computation perspective. first, the observer might make a comment about opinion targeting, observe the word so in case we have the author's opinion. for example, i don't like this phone at all. and that's an opinion of this author. in contrast, the text might also report opinions about others. so the person could also make observation about another person's opinion and reported this opinion. so for example, i believe he loves the painting. and that opinion is really about the it is really expressed by another person here. so, it doesn't mean this author loves that painting. so clearly, the two kinds of opinions need to be analyzed in different ways, and sometimes in product reviews, you can see, although mostly the opinions are false from this reviewer. sometimes, a reviewer might mention opinions of his friend or her friend. another complication is that there may be indirect opinions or inferred opinions that can be obtained. by making inferences on what's expressed in the text that might not necessarily look like opinion. for example, one statement that might be, this phone ran out of battery in just one hour. now, this is in a way a factual statement because it's either true or false, right? you can even verify that, but from this statement, one can also infer some negative opinions about the quality of the battery of this phone, or the feeling of the opinion holder about the battery. the opinion holder clearly wished that the battery do last longer. so these are interesting variations that we need to pay attention to when we extract opinions. also, for this reason about indirect opinions, it's often also very useful to extract whatever the person has said about the product, and sometimes factual sentences like these are also very useful. so, from a practical viewpoint, sometimes we don't necessarily extract the subject of sentences. instead, again, all the sentences that are about the opinions are useful for understanding the person or understanding the product that we commend. so the task of opinion mining can be defined as taking textualized input to generate a set of opinion representations. each representation we should identify opinion holder, target, content, and the context. ideally we can also infer opinion sentiment from the comment and the context to better understand. the opinion. now often, some elements of the representation are already known. i just gave a good example in the case of product we'd use where the opinion holder and the opinion target are often expressly identified. and that's not why this turns out to be one of the simplest opinion mining tasks. now, it's interesting to think about the other tasks that might be also simple. because those are the cases where you can easily build applications by using opinion mining techniques. so now that we have talked about what is opinion mining, we have defined the task. let's also just talk a little bit about why opinion mining is very important and why it's very useful. so here, i identify three major reasons, three broad reasons. the first is it can help decision support. it can help us optimize our decisions. we often look at other people's opinions, look at read the reviews in order to make a decisions like buying a product or using a service. we also would be interested in others opinions when we decide whom to vote for example. and policy makers, may also want to know people's opinions when designing a new policy. so that's one general, kind of, applications. and it's very broad, of course. the second application is to understand people, and this is also very important. for example, it could help understand people's preferences. and this could help us better serve people. for example, we optimize a product search engine or optimize a recommender system if we know what people are interested in, what people think about product. it can also help with advertising, of course, and we can have targeted advertising if we know what kind of people tend to like what kind of plot. now the third kind of application can be called voluntary survey. now this is most important research that used to be done by doing surveys, doing manual surveys. question, answer it. people need to feel informs to answer their questions. now this is directly related to humans as sensors, and we can usually aggregate opinions from a lot of humans through kind of assess the general opinion. now this would be very useful for business intelligence where manufacturers want to know where their products have advantages over others. what are the winning features of their products, winning features of competitive products. market research has to do with understanding consumers oppinions. and this create very useful directive for that. data-driven social science research can benefit from this because they can do text mining to understand the people's opinions. and if you can aggregate a lot of opinions from social media, from a lot of, popular information then you can actually do some study of some questions. for example, we can study the behavior of people on social media on social networks. and these can be regarded as voluntary survey done by those people. in general, we can gain a lot of advantage in any prediction task because we can leverage the text data as extra data above any problem. and so we can use text based prediction techniques to help you make predictions or improve the accuracy of prediction. [music",05_5-5-opinion-mining-and-sentiment-analysis-motivation
58,https://www.coursera.org/learn/text-mining,01_5-1-text-categorization-discriminative-classifier-part-1.en.txt,text-mining/06_week-5/02_week-5-lessons/01_5-1-text-categorization-discriminative-classifier-part-1.en.txt,"[sound] this lecture is about the discriminative classifiers for text categorization. in this lecture we're going to continue talking about how to do text categorization and cover discriminative approaches. this is a slide that you have seen from the discussion of naive bayes classifier, where we have shown that although naive bayes classifier tries to model the generation of text data, from each categories, we can actually use bayes' rule to eventually rewrite the scoring function as you see on this slide. and this scoring function is basically a weighted combination of a lot of word features, where the feature values are word counts, and the feature weights are the log of probability ratios of the word given by two distributions here. now this kind of scoring function can be actually a general scoring function where we can in general present text data as a feature vector. of course the features don't have to be all the words. their features can be other signals that we want to use. and we mentioned that this is precisely similar to logistic regression. so, in this lecture we're going to introduce some discriminative classifiers. they try to model the conditional distribution of labels given the data directly rather than using bayes' rule to compute that interactively as we have seen in naive bayes. so the general idea of logistic regression is to model the dependency of a binary response variable y on some predictors that are denoted as x. so here we have also changed the notation to x for future values. you may recall in the previous slides we have used fi to represent the future values. and here we use the notation of x factor, which is more common when we introduce such discriminative algorithms. so, x is our input. it's a vector with n features and each feature has a value x sub i here. and i will go with a model that dependency of this binary response variable of these features. so in our categorization problem when i have two categories theta 1 and theta 2, and we can use the y value to denote the two categories when y is 1, it means the category of the document, the first class, is theta 1. now, the goal here is the model, the conditional property of y given x directly as opposed to model of the generation of x and y as in the case of naive bayes. and another advantage of this kind of approach is that it would allow many other features than words to be used in this vector since we're not modeling the generation of this vector. and we can plug in any signals that we want. so this is potentially advantageous for doing text categorization. so more specifically, in logistic regression, assume the functional form of y depending on x is the following. and this is very closely related to the log odds that i introduced in the naive bayes or log of probability ratio of the two categories that you have seen on the previous slide. so this is what i meant. so in the case of naive bayes, we compute this by using those words and eventually we have reached a formula that looks like this. but here we actually would assume explicitly that we with the model our probability of y given x directly as a function of these features. so, most specifically we assume that the ratio of the probability of y equals 1 and the probability of y equals 0 is a function of x. all right, so it's a function of x and it's a linear combination of these feature values controlled by theta values. and it seems we know that the probability of y equals zero is one minus probability of y equals one and this can be also written in this way. so this is a log out ratio here. and so in logistic regression, we're basically assuming that the probability of y equals 1. okay my x is dependent on this linear combination of all these features. so it's just one of the many possible ways, assuming that the dependency. but this particular form has been quite useful and it also has some nice properties. so if we rewrite this equation to actually express the probability of y given x. in terms of x by getting rid of the logarithm we get this functional form, and this is called a logistical function. it's a transformation of x into y, as you see on the right side here, so that the x's will be map into a range of values from 0 to 1.0, you can see. and that's precisely what we want since we have a probability here. and the function form looks like this. so this is the basic idea of logistic regression. and it's a very useful classifier that can be used to do a lot of classification tasks including text categorization. so as in all cases of model we would be interested in estimating the parameters. and in fact in all of the machine running programs, once you set up with the model, set up object and function to model the file, then the next step is to compute the parameter values. in general, we're going to adjust to these parameter values. optimize the performance of classify on the training data. so in our case just assume we have the training data here, xi and yi, and each pair is basically a future vector of x and a known label for that x. y is either 1 or 0. so in our case we are interested maximize this conditional likelihood. the conditional likelihood here is basically to model why given observe the x, so it's not like a moderate x, but rather we're going to model this. note that this is a conditional probability of y given x and this is also precisely what we wanted for classification. now so the likelihood function would be just a product of all the training cases. and in each case, this is the model of the probability of observing this particular training case. so given a particular xi, how likely we are to observe the corresponding yi? of course, yi could be 1 or 0, and in fact, the function found here would vary depending on whether yi is 1 or 0. if it's a 1, we'll be taking this form. and that's basically the logistic regression function. but what about this, if it's 0? well, if it's 0, then we have to use a different form, and that's this one. now, how do we get this one? well, that's just a 1 minus the probability of y=1, right? and you can easily see this. now the key point in here is that the function form here depends on the observer yi, if it's a 1, it has a different form than when it's 0. and if you think about when we want to maximize this probability, we're basically going to want this probability to be as high as possible. when the label is 1, that means the document is in probability 1. but if the document is not, we're going to maximize this value, and what's going to happen is actually to make this value as small as possible because this sum's 1. when i maximize this one, it's equivalent to minimize this one. so you can see basically, if we maximize the conditional likelihood, we're going to basically try to make the prediction on the training data as accurate as possible. so as another occasion, when you compute the maximum likelihood data, basically you'll find a beta value, a set of beta values that would maximize this conditional likelihood. and this, again, then gives us a standard optimization problem. in this case, it can be also solved in many ways. newton's method is a popular way to solve this problem, there are other methods as well. but in the end, we will look at a set of data values. once we have the beta values, then we have a way to find the scoring function to help us classify a document. so what's the function? well, it's this one. see, if we have all the beta values, are they known? all we need is to compute the xi for that document and then plug in those values. that will give us an estimated probability that the document is in category one. okay so, so much for logistical regression. let's also introduce another discriminative classifier called k-nearest neighbors. now in general, i should say there are many such approaches, and a thorough introduction to all of them is clearly beyond the scope of this course. and you should take a machine learning course or read more about machine learning to know about them. here, i just want to include the basic introduction to some of the most commonly used classifiers, since you might use them often for text calculation. so the second classifier is called k-nearest neighbors. in this approach, we're going to also estimate the conditional probability of label given data, but in a very different way. so the idea is to keep all the training examples and then once we see a text object that we want to classify, we're going to find the k examples in the training set and that are most similar to this text object. basically, this is to find the neighbors of this text objector in the training data set. so once we found the neighborhood and we found the object that are close to the object we are interested in classifying, and let's say we have found the k-nearest neighbors. that's why this method is called k-nearest neighbors. then we're going to assign the category that's most common in these neighbors. basically we're going to allow these neighbors to vote for the category of the objective that we're interested in classifying. now that means if most of them have a particular category and it's a category one, they're going to say this current object will have category one. this approach can also be improved by considering the distance of a neighbor and of a current object. basically, we can assume a closed neighbor would have more say about the category of the subject. so, we can give such a neighbor more influence on the vote. and we can take away some of the votes based on the distances. but the general idea is look at the neighborhood, and then try to assess the category based on the categories of the neighbors. intuitively, this makes a lot of sense. but mathematically, this can also be regarded as a way to directly estimate there's a conditional probability of label given data, that is p of y given x. now i'm going to explain this intuition in a moment, but before we proceed, let me emphasize that we do need a similarity function here in order for this to work. note that in naive base class five, we did not need a similarity function. and in logistical regression, we did not talk about those similarity function either, but here we explicitly require a similarity function. now this similarity function actually is a good opportunity for us to inject any of our insights about the features. basically effective features are those that would make the objects that are on the same category look more similar, but distinguishing objects in different categories. so the design of this similarity function is closely tied it to the design of the features in logistical regression and other classifiers. so let's illustrate how k-nn works. now suppose we have a lot of training instances here. and i've colored them differently and to show just different categories. now suppose we have a new object in the center that we want to classify. so according to this approach, you work on finding the neighbors. now, let's first think of a special case of finding just one neighbor, the closest neighbor. now in this case, let's assume the closest neighbor is the box filled with diamonds. and so then we're going to say, well, since this is in this object that is in category of diamonds, let's say. then we're going to say, well, we're going to assign the same category to our text object. but let's also look at another possibility of finding a larger neighborhood, so let's think about the four neighbors. in this case, we're going to include a lot of other solid field boxes in red or pink, right? so in this case now, we're going to notice that among the four neighbors, there are three neighbors in a different category. so if we take a vote, then we'll conclude the object is actually of a different category. so this both illustrates how can nearest neighbor works and also it illustrates some potential problems of this classifier. basically, the results might depend on the k and indeed, k's an important parameter to optimize. now, you can intuitively imagine if we have a lot of neighbors around this object, and then we'd be okay because we have a lot of neighbors who will help us decide the categories. but if we have only a few, then the decision may not be reliable. so on the one hand, we want to find more neighbor, right? and then we have more votes. but on the other hand, as we try to find more neighbors we actually could risk on getting neighbors that are not really similar to this instance. they might actually be far away as you try to get more neighbors. so although you get more neighbors but those neighbors aren't necessarily so helpful because they are not very similar to the object. so the parameter still has to be set empirically. and typically, you can optimize such a parameter by using cross validation. basically, you're going to separate your training data into two parts and then you're going to use one part to actually help you choose the parameter k here or some other parameters in other class files. and then you're going to assume this number that works well on your training that will be actually be the best for your future data. so as i mentioned, k-nn can be actually regarded as estimate of conditional problem within y given x an that's why we put this in the category of discriminative approaches. so the key assumption that we made in this approach is that the distribution of the label given the document probability a category given for example probability of theta i given document d is locally smooth. and that just means we're going to assume that this probability is the same for all the documents in these region r here. and suppose we draw a neighborhood and we're going to assume in this neighborhood since the data instances are very similar we're going to assume that the conditional distribution of the label given the data will be roughly the same. if these are very different then we're going to assume that the probability of c doc given d would be also similar. so that's a very key assumption. and that's actually important assumption that would allow us to do a lot of machinery. but in reality, whether this is true of course, would depend on how we define similarity. because neighborhood is largely determined by our similarity function. if our similarity function captures objects that do follow similar distributions then these assumptions are okay but if our similarity function could not capture that, obviously these assumption would be a problem and then the classifier would not be accurate. okay, let's proceed with these assumption. then what we are saying is that, in order to estimate the probability of category given a document. we can try to estimate the probability of the category given that entire region. now, this has a benefit, of course, of bringing additional data points to help us estimate this probability. and so this is precisely the idea of k-nn. basically now we can use the known categories of all the documents in this region to estimate this probability. and i have even given a formula here where you can see we just count the topics in this region and then normalize that by the total number of documents in the region. so the numerator that you see here, c of theta i and r, is a counter of the documents in region r was category theta i. since these are training document and we know they are categories. we can simply count how many times it was since here. how many times we have the same signs, etc. and then the denominator is just the total number of training documents in this region. so this gives us a rough estimate of which categories most popular in this neighborhood. and we are going to assign the popular category to our data object since it falls into this region. [music",01_5-1-text-categorization-discriminative-classifier-part-1
59,https://www.coursera.org/learn/text-mining,03_5-3-text-categorization-evaluation-part-1.en.txt,text-mining/06_week-5/02_week-5-lessons/03_5-3-text-categorization-evaluation-part-1.en.txt,"[sound] this lecture is about the evaluation of text categorization. so we've talked about many different methods for text categorization. but how do you know which method works better? and for a particular application, how do you know this is the best way of solving your problem? to understand these, we have to how to we have to know how to evaluate categorization results. so first some general thoughts about the evaluation. in general, for evaluation of this kind of empirical tasks such as categorization, we use methodology that was developed in 1960s by information retrieval researchers. called a cranfield evaluation methodology. the basic idea is to have humans create test correction, where, we already know, every document is tagged with the desired categories. or, in the case of search, for which query, which documents that should have been retrieved, and this is called, a ground truth. now, with this ground truth test correction, we can then reuse the collection to test the many different systems and then compare different systems. we can also turn off some components in the system to see what's going to happen. basically it provides a way to do control experiments to compare different methods. so this methodology has been virtually used for all the tasks that involve empirically defined problems. so in our case, then, we are going to compare our systems categorization results with the categorization, ground truth, created by humans. and we're going to compare our systems decisions, which documents should get which category with what categories have been assigned to those documents by humans. and we want to quantify the similarity of these decisions or equivalently, to measure the difference between the system output and the desired ideal output generated by the humans. so obviously, the highest similarity is the better results are. the similarity could be measured in different ways. and that would lead to different measures. and sometimes it's desirable also to match the similarity from different perspectives just to have a better understanding of the results in detail. for example, we might be also interested in knowing which category performs better and which which category is easy to categorize, etc. in general, different categorization mistakes however, have different costs for specific applications. so some areas might be more serious than others. so ideally, we would like to model such differences, but if you read many papers in categorization you will see that they don't generally do that. instead, they will use a simplified measure and that's because it's often okay not to consider such a cost variation when we compare methods and when we are interested in knowing the relative difference of these methods. so it's okay to introduce some bias, as long as the bias is not already with a particular method and then we should expect the more effective method to perform better than a less effective one, even though the measure is not perfect. so the first measure that we'll introduce is called classification accuracy and this is a basic into measure the percentage of correct decisions. so here you see that there are categories denoted by c1 through ck and there are n documents, denoted by d1 through d n. and for each pair of category and the document, we can then look at the situation. and see if the system has said yes to this pair, basically has assigned this category to this document. or no, so this is denoted by y or m, that's the systems of the decision. and similarly, we can look at the human's decisions also, if the human has assigned a category to the document of that there will be a plus sign here. that just means that a human. we think of this assignment is correct and incorrect then it's a minus. so we'll see all combinations of this ns, yes and nos, minus and pluses. there are four combinations in total. and two of them are correct, and that's when we have y(+) or n(-), and then there are also two kinds of errors. so the measure of classification accuracy is simply to count how many of these decisions are correct. and normalize that by the total number of decisions we have made. so, we know that the total number of decisions is n, multiplied by k. and, the number of correct decisions are basically of two kinds. one is y plusses. and the other is n minus this n. we just put together the count. now, this is a very convenient measure that will give us one number to characterize performance of a method. and the higher, the better, of course. but the method also has some problems. first it has treated all the decisions equally. but in reality, some decision errors are more serious than others. for example, it may be more important to get the decisions right on some documents, than others. or maybe, more important to get the decisions right on some categories, than others, and this would call for some detailed evaluation of this results to understand the strands and of different methods, and to understand the performance of these methods. in detail in a per category or per document basis. one example that shows clearly the decision errors are having different causes is spam filtering that could be retrieved as two category categorization problem. missing a legitimate email result, is one type of error. but letting spam to come into your folder is another type of error. the two types of errors are clearly very different, because it's very important not to miss a legitimate email. it's okay to occasionally let a spam email to come into your inbox. so the error of the first, missing a legitimate email is very, is of high cost. it's a very serious mistake and classification error, classification accuracy does not address this issue. there's also another problem with imbalance to test set. imagine there's a skew to test set where most instances are category one and 98% of instances are category one. only 2% are in category two. in such a case, we can have a very simple baseline that accurately performs very well and that baseline. sign with similar, i put all instances in the major category. that will get us 98% accuracy in this case. it's going to be appearing to be very effective, but in reality, this is obviously not a good result. and so, in general, when we use classification accuracy as a measure, we want to ensure that the causes of balance. and one above equal number of instances, for example in each class the minority categories or causes tend to be overlooked in the evaluation of classification accuracy. so, to address these problems, we of course would like to also evaluate the results in other ways and in different ways. as i said, it's beneficial to look at after multiple perspectives. so for example, we can look at the perspective from each document as a perspective based on each document. so the question here is, how good are the decisions on this document? now, as in the general cases of all decisions, we can think about four combinations of possibilities, depending on whether the system has said yes and depending on whether the human has said it correct or incorrect or said yes or no. and so the four combinations are first when both the human systems said yes, and that's the true positives, when the system says, yes, and it's after the positive. so, when the system says, yes, it's a positive. but, when the human confirm that it is indeed correct, that becomes a true positive. when the system says, yes, but the human says, no, that's incorrect, that's a false positive, have fp. and when the system says no, but the human says yes, then it's a false negative. we missed one assignment. when both the system and human says no, then it's also correctly to assume that's true negatives. all right, so then we can have some measures to just better characterize the performance by using these four numbers and so two popular measures are precision and recall. and these were also proposed by information retrieval researchers 1960s for evaluating search results, but now they have become standard measures, use it everywhere. so when the system says yes, we can ask the question, how many are correct? what's the percent of correct decisions when the system says yes? that's called precision. it's true positive divided by all the cases when the system says yes, all the positives. the other measure is called recall, and this measures whether the document has all the categories it should have. so in this case it's divide the true positive by true positives and the false negatives. so these are all the cases where this human says the document should have this category. so this represents both categories that it should have got, and so recall tells us whether the system has actually indeed assigned all the categories that it should have to this document. this gives us a detailed view of the document, then we can aggregate them later. and if we're interested in some documents, and this will tell us how well we did on those documents, the subsets of them. it might be more interesting than others, for example. and this allows us to analyze errors in more detail as well. we can separate the documents of certain characteristics from others, and then look at the errors. you might see a pattern a for this kind of document, this long document. it doesn't as well for shock documents. and this gives you some insight for inputting the method. similarly, we can look at the per-category evaluation. in this case, we're going to look at the how good are the decisions on a particular category. as in the previous case we can define precision and recall. and it would just basically answer the questions from a different perspective. so when the system says yes, how many are correct? that means looking at this category to see if all the documents that are assigned with this category are indeed in this category, right? and recall, would tell us, has the category been actually assigned to all the documents that should have this category. it's sometimes also useful to combine precision and recall as one measure, and this is often done by using f measure. and this is just a harmonic mean of precision. precision and recall defined on this slide. and it's also controlled by a parameter beta to indicate whether precision is more important or recall is more. when beta is set to 1, we have measure called f1, and in this case, we just take equal weight upon both procedure and recall. f1 is very often used as a measure for categorization. now, as in all cases, when we combine results, you always should think about the best way of combining them, so in this case i don't know if you have thought about it and we could have combined them just with arithmetic mean, right. so that would still give us the same range of values, but obviously there's a reason why we didn't do that and why f1 is more popular, and it's actually useful to think about difference. and we think about that, you'll see that there is indeed some difference and some undesirable property of this arithmatic. basically, it will be obvious to you if you think about a case when the system says yes for all the category and document pairs. and then try the compute the precision and recall in that case. and see what would happen. and basically, this kind of measure, the arithmetic mean, is not going to be as reasonable as f1 minus one [inaudible] trade off, so that the two values are equal. there is an extreme case where you have 0 for one letter and one for the other. then f1 will be low, but the mean would still be reasonably high. [music",03_5-3-text-categorization-evaluation-part-1
60,https://www.coursera.org/learn/text-mining,02_6-2-opinion-mining-and-sentiment-analysis-latent-aspect-rating-analysis-part-2.en.txt,text-mining/07_week-6/02_week-6-lessons/02_6-2-opinion-mining-and-sentiment-analysis-latent-aspect-rating-analysis-part-2.en.txt,"[sound] this lecture is a continued discussion of latent aspect rating analysis. earlier, we talked about how to solve the problem of lara in two stages. but we first do segmentation of different aspects. and then we use a latent regression model to learn the aspect ratings and then later the weight. now it's also possible to develop a unified generative model for solving this problem, and that is we not only model the generational over-rating based on text. we also model the generation of text, and so a natural solution would be to use topic model. so given the entity, we can assume there are aspects that are described by word distributions. topics. and then we an use a topic model to model the generation of the reviewed text. i will assume words in the review text are drawn from these distributions. in the same way as we assumed for generating model like prsa. and then we can then plug in the latent regression model to use the text to further predict the overrating. and that means when we first predict the aspect rating and then combine them with aspect weights to predict the overall rating. so this would give us a unified generated model, where we model both the generation of text and the overall ready condition on text. so we don't have time to discuss this model in detail as in many other cases in this part of the cause where we discuss the cutting edge topics, but there's a reference site here where you can find more details. so now i'm going to show you some simple results that you can get by using these kind of generated models. first, it's about rating decomposition. so here, what you see are the decomposed ratings for three hotels that have the same overall rating. so if you just look at the overall rating, you can't really tell much difference between these hotels. but by decomposing these ratings into aspect ratings we can see some hotels have higher ratings for some dimensions, like value, but others might score better in other dimensions, like location. and so this can give you detailed opinions at the aspect level. now here, the ground-truth is shown in the parenthesis, so it also allows you to see whether the prediction is accurate. it's not always accurate but it's mostly still reflecting some of the trends. the second result you compare different reviewers on the same hotel. so the table shows the decomposed ratings for two reviewers about same hotel. again their high level overall ratings are the same. so if you just look at the overall ratings, you don't really get that much information about the difference between the two reviewers. but after you decompose the ratings, you can see clearly that they have high scores on different dimensions. so this shows that model can review differences in opinions of different reviewers and such a detailed understanding can help us understand better about reviewers and also better about their feedback on the hotel. this is something very interesting, because this is in some sense some byproduct. in our problem formulation, we did not really have to do this. but the design of the generating model has this component. and these are sentimental weights for words in different aspects. and you can see the highly weighted words versus the negatively loaded weighted words here for each of the four dimensions. value, rooms, location, and cleanliness. the top words clearly make sense, and the bottom words also make sense. so this shows that with this approach, we can also learn sentiment information directly from the data. now, this kind of lexicon is very useful because in general, a word like long, let's say, may have different sentiment polarities for different context. so if i say the battery life of this laptop is long, then that's positive. but if i say the rebooting time for the laptop is long, that's bad, right? so even for reviews about the same product, laptop, the word long is ambiguous, it could mean positive or it could mean negative. but this kind of lexicon, that we can learn by using this kind of generated models, can show whether a word is positive for a particular aspect. so this is clearly very useful, and in fact such a lexicon can be directly used to tag other reviews about hotels or tag comments about hotels in social media like tweets. and what's also interesting is that since this is almost completely unsupervised, well assuming the reviews whose overall rating are available and then this can allow us to learn form potentially larger amount of data on the internet to reach sentiment lexicon. and here are some results to validate the preference words. remember the model can infer wether a reviewer cares more about service or the price. now how do we know whether the inferred weights are correct? and this poses a very difficult challenge for evaluation. now here we show some interesting way of evaluating. what you see here are the prices of hotels in different cities, and these are the prices of hotels that are favored by different groups of reviewers. the top ten are the reviewers was the highest inferred value to other aspect ratio. so for example value versus location, value versus room, etcetera. now the top ten of the reviewers that have the highest ratios by this measure. and that means these reviewers tend to put a lot of weight on value as compared with other dimensions. so that means they really emphasize on value. the bottom ten on the other hand of the reviewers. the lowest ratio, what does that mean? well it means these reviewers have put higher weights on other aspects than value. so those are people that cared about another dimension and they didn't care so much the value in some sense, at least as compared with the top ten group. now these ratios are computer based on the inferred weights from the model. so now you can see the average prices of hotels favored by top ten reviewers are indeed much cheaper than those that are favored by the bottom ten. and this provides some indirect way of validating the inferred weights. it just means the weights are not random. they are actually meaningful here. in comparison, the average price in these three cities, you can actually see the top ten tend to have below average in price, whereas the bottom half, where they care a lot about other things like a service or room condition tend to have hotels that have higher prices than average. so with these results we can build a lot of interesting applications. for example, a direct application would be to generate the rated aspect, the summary, and because of the decomposition we have now generated the summaries for each aspect. the positive sentences the negative sentences about each aspect. it's more informative than original review that just has an overall rating and review text. here are some other results about the aspects that's covered from reviews with no ratings. these are mp3 reviews, and these results show that the model can discover some interesting aspects. commented on low overall ratings versus those higher overall per ratings. and they care more about the different aspects. or they comment more on the different aspects. so that can help us discover for example, consumers' trend in appreciating different features of products. for example, one might have discovered the trend that people tend to like larger screens of cell phones or light weight of laptop, etcetera. such knowledge can be useful for manufacturers to design their next generation of products. here are some interesting results on analyzing users rating behavior. so what you see is average weights along different dimensions by different groups of reviewers. and on the left side you see the weights of viewers that like the expensive hotels. they gave the expensive hotels 5 stars, and you can see their average rates tend to be more for some service. and that suggests that people like expensive hotels because of good service, and that's not surprising. that's also another way to validate it by inferred weights. if you look at the right side where, look at the column of 5 stars. these are the reviewers that like the cheaper hotels, and they gave cheaper hotels five stars. as we expected and they put more weight on value, and that's why they like the cheaper hotels. but if you look at the, when they didn't like expensive hotels, or cheaper hotels, then you'll see that they tended to have more weights on the condition of the room cleanness. so this shows that by using this model, we can infer some information that's very hard to obtain even if you read all the reviews. even if you read all the reviews it's very hard to infer such preferences or such emphasis. so this is a case where text mining algorithms can go beyond what humans can do, to review interesting patterns in the data. and this of course can be very useful. you can compare different hotels, compare the opinions from different consumer groups, in different locations. and of course, the model is general. it can be applied to any reviews with overall ratings. so this is a very useful technique that can support a lot of text mining applications. finally the results of applying this model for personalized ranking or recommendation of entities. so because we can infer the reviewers weights on different dimensions, we can allow a user to actually say what do you care about. so for example, i have a query here that shows 90% of the weight should be on value and 10% on others. so that just means i don't care about other aspect. i just care about getting a cheaper hotel. my emphasis is on the value dimension. now what we can do with such query is we can use reviewers that we believe have a similar preference to recommend a hotels for you. how can we know that? well, we can infer the weights of those reviewers on different aspects. we can find the reviewers whose weights are more precise, of course inferred rates are similar to yours. and then use those reviewers to recommend hotels for you and this is what we call personalized or rather query specific recommendations. now the non-personalized recommendations now shown on the top, and you can see the top results generally have much higher price, than the lower group and that's because when the reviewer's cared more about the value as dictated by this query they tended to really favor low price hotels. so this is yet another application of this technique. it shows that by doing text mining we can understand the users better. and once we can handle users better we can solve these users better. so to summarize our discussion of opinion mining in general, this is a very important topic and with a lot of applications. and as a text sentiment analysis can be readily done by using just text categorization. but standard technique tends to not be enough. and so we need to have enriched feature implementation. and we also need to consider the order of those categories. and we'll talk about ordinal regression for some of these problem. we have also assume that the generating models are powerful for mining latent user preferences. this in particular in the generative model for mining latent regression. and we embed some interesting preference information and send the weights of words in the model as a result we can learn most useful information when fitting the model to the data. now most approaches have been proposed and evaluated. for product reviews, and that was because in such a context, the opinion holder and the opinion target are clear. and they are easy to analyze. and there, of course, also have a lot of practical applications. but opinion mining from news and social media is also important, but that's more difficult than analyzing review data, mainly because the opinion holders and opinion targets are all interested. so that calls for natural management processing techniques to uncover them accurately. here are some suggested readings. the first two are small books that are of some use of this topic, where you can find a lot of discussion about other variations of the problem and techniques proposed for solving the problem. the next two papers about generating models for rating the aspect rating analysis. the first one is about solving the problem using two stages, and the second one is about a unified model where the topic model is integrated with the regression model to solve the problem using a unified model. [music",02_6-2-opinion-mining-and-sentiment-analysis-latent-aspect-rating-analysis-part-2
61,https://www.coursera.org/learn/text-mining,07_6-7-contextual-text-mining-mining-casual-topics-with-time-series-supervision.en.txt,text-mining/07_week-6/02_week-6-lessons/07_6-7-contextual-text-mining-mining-casual-topics-with-time-series-supervision.en.txt,"[sound] this lecture is about using a time series as context to potentially discover causal topics in text. in this lecture, we're going to continue discussing contextual text mining. in particular, we're going to look at the time series as a context for analyzing text, to potentially discover causal topics. as usual, it started with the motivation. in this case, we hope to use text mining to understand a time series. here, what you are seeing is dow jones industrial average stock price curves. and you'll see a sudden drop here. right. so one would be interested knowing what might have caused the stock market to crash. well, if you know the background, and you might be able to figure it out if you look at the time stamp, or there are other data that can help us think about. but the question here is can we get some clues about this from the companion news stream? and we have a lot of news data that generated during that period. so if you do that we might actually discover the crash. after it happened, at the time of the september 11 attack. and that's the time when there is a sudden rise of the topic about september 11 happened in news articles. here's another scenario where we want to analyze the presidential election. and this is the time series that are from the presidential prediction market. for example, i write a trunk of market would have stocks for each candidate. and if you believe one candidate that will win then you tend to buy the stock for that candidate, causing the price of that candidate to increase. so, that's a nice way to actual do survey of people's opinions about these candidates. now, suppose you see something drop of price for one candidate. and you might also want to know what might have caused the sudden drop. or in a social science study, you might be interested in knowing what method in this election, what issues really matter to people. now again in this case, we can look at the companion news stream and ask for the question. are there any clues in the news stream that might provide insight about this? so for example, we might discover the mention of tax cut has been increasing since that point. so maybe, that's related to the drop of the price. so all these cases are special cases of a general problem of joint analysis of text and a time series data to discover causal topics. the input in this case is time series plus text data that are produced in the same time period, the companion text stream. and this is different from the standard topic models, where we have just to text collection. that's why we see time series here, it serves as context. now, the output that we want to generate is the topics whose coverage in the text stream has strong correlations with the time series. for example, whenever the topic is managing the price tends to go down, etc. now we call these topics causal topics. of course, they're not, strictly speaking, causal topics. we are never going to be able to verify whether they are causal, or there's a true causal relationship here. that's why we put causal in quotation marks. but at least they are correlating topics that might potentially explain the cause and humans can certainly further analyze such topics to understand the issue better. and the output would contain topics just like in topic modeling. but we hope that these topics are not just the regular topics with. these topics certainly don't have to explain the data of the best in text, but rather they have to explain the data in the text. meaning that they have to reprehend the meaningful topics in text. cement but also more importantly, they should be correlated with external hand series that's given as a context. so to understand how we solve this problem, let's first adjust to solve the problem with reactive topic model, for example prsa. and we can apply this to text stream and with some extension like a cprsa or contextual prsa. then we can discover these topics in the correlation and also discover their coverage over time. so, one simple solution is, to choose the topics from this set that have the strongest correlation with the external time series. but this approach is not going to be very good. why? because awareness pictured to the topics is that they will discover by prsa or lda. and that means the choice of topics will be very limited. and we know these models try to maximize the likelihood of the text data. so those topics tend to be the major topics that explain the text data well. aand they are not necessarily correlated with time series. even if we get the best one, the most correlated topics might still not be so interesting from causal perspective. so here in this work site here, a better approach was proposed. and this approach is called iterative causal topic modeling. the idea is to do an iterative adjustment of topic, discovered by topic models using time series to induce a product. so here's an illustration on how this work, how this works. take the text stream as input and then apply regular topic modeling to generate a number of topics. let's say four topics. shown here. and then we're going to use external time series to assess which topic is more causally related or correlated with the external time series. so we have something that rank them. and we might think that topic one and topic four are more correlated and topic two and topic three are not. now we could have stopped here and that would be just like what the simple approached that i talked about earlier then we can get to these topics and call them causal topics. but as i also explained that these topics are unlikely very good because they are general topics that explain the whole text connection. they are not necessary. the best topics are correlated with our time series. so what we can do in this approach is to first zoom into word level and we can look into each word and the top ranked word listed for each topic. let's say we take topic 1 as the target examined. we know topic 1 is correlated with the time series. or is at least the best that we could get from this set of topics so far. and we're going to look at the words in this topic, the top words. and if the topic is correlated with the time series, there must be some words that are highly correlated with the time series. so here, for example, we might discover w1 and w3 are positively correlated with time series, but w2 and w4 are negatively correlated. so, as a topic, and it's not good to mix these words with different correlations. so we can then for the separate of these words. we are going to get all the red words that indicate positive correlations. w1 and w3. and we're going to also get another sub topic. if you want. that represents a negatively correlated words, w2 and w4. now, these subtopics, or these variations of topics, based on the correlation analysis, are topics that are still quite related to the original topic, topic 1. but they are already deviating, because of the use of time series information for bias selection of words. so then in some sense, well we should expect so, some sense more correlated with the time series than the original topic 1. because the topic 1 has mixed words, here we separate them. so each of these two subtopics can be expected to be better coherent in this time series. however, they may not be so coherent as it mention. so the idea here is to go back to topic model by using these each as a prior to further guide the topic modeling. and that's to say we ask our topic models now discover topics that are very similar to each of these two subtopics. and this will cause a bias toward more correlate to the topics was a time series. of course then we can apply topic models to get another generation of topics. and that can be further ran to the base of the time series to set after the highly correlated topics. and then we can further analyze the components at work in the topic and then try to analyze.word level correlation. and then get the even more correlated subtopics that can be further fed into the process as prior to drive the topic of model discovery. so this whole process is just a heuristic way of optimizing causality and coherence, and that's our ultimate goal. right? so here you see the pure topic models will be very good at maximizing topic coherence, the topics will be all meaningful. if we only use causality test, or correlation measure, then we might get a set words that are strongly correlate with time series, but they may not necessarily mean anything. it might not be cementric connected. so, that would be at the other extreme, on the top. now, the ideal is to get the causal topic that's scored high, both in topic coherence and also causal relation. in this approach, it can be regarded as an alternate way to maximize both sine engines. so when we apply the topic models we're maximizing the coherence. but when we decompose the topic model words into sets of words that are very strong correlated with the time series. we select the most strongly correlated words with the time series. we are pushing the model back to the causal dimension to make it better in causal scoring. and then, when we apply the selected words as a prior to guide a topic modeling, we again go back to optimize the coherence. because topic models, we ensure the next generation of topics to be coherent and we can iterate when they're optimized in this way as shown on this picture. so the only i think a component that you haven't seen such a framework is how to measure the causality. because the rest is just talking more on. so let's have a little bit of discussion of that. so here we show that. and let's say we have a topic about government response here. and then we just talking more of we can get coverage of the topic over time. so, we have a time series, x sub t. now, we also have, are give a time series that represents external information. it's a non text time series, y sub t. it's the stock prices. now the the question here is does xt cause yt? well in other words, we want to match the causality relation between the two. or maybe just measure the correlation of the two. there are many measures that we can use in this framework. for example, pairs in correlation is a common use measure. and we got to consider time lag here so that we can try to capture causal relation. using somewhat past data and using the data in the past to try to correlate with the data on points of y that represents the future, for example. and by introducing such lag, we can hopefully capture some causal relation by even using correlation measures like person correlation. but a common use, the measure for causality here is granger causality test. and the idea of this test is actually quite simple. basically you're going to have all the regressive model to use the history information of y to predict itself. and this is the best we could without any other information. so we're going to build such a model. and then we're going to add some history information of x into such model. to see if we can improve the prediction of y. if we can do that with a statistically significant difference. then we just say x has some causal inference on y, or otherwise it wouldn't have causal improvement of prediction of y. if, on the other hand, the difference is insignificant and that would mean x does not really have a cause or relation why. so that's the basic idea. now, we don't have time to explain this in detail so you could read, but you would read at this cited reference here to know more about this measure. it's a very convenient used measure. has many applications. so next, let's look at some simple results generated by this approach. and here the data is the new york times and in the time period of june 2000 through december of 2011. and here the time series we used is stock prices of two companies. american airlines and apple and the goal is to see if we inject the sum time series contest, whether we can actually get topics that are wise for the time series. imagine if we don't use any input, we don't use any context. then the topics from new york times discovered by prsa would be just general topics that people talk about in news. all right. those major topics in the news event. but here you see these topics are indeed biased toward each time series. and particularly if you look at the underlined words here in the american airlines result, and you see airlines, airport, air, united trade, or terrorism, etc. so it clearly has topics that are more correlated with the external time series. on the right side, you see that some of the topics are clearly related to apple, right. so you can see computer, technology, software, internet, com, web, etc. so that just means the time series has effectively served as a context to bias the discovery of topics. from another perspective, these results help us on what people have talked about in each case. so not just the people, what people have talked about, but what are some topics that might be correlated with their stock prices. and so these topics can serve as a starting point for people to further look into issues and you'll find the true causal relations. here are some other results from analyzing presidential election time series. the time series data here is from iowa electronic market. and that's a prediction market. and the data is the same. new york times from may 2000 to october 2000. that's for 2000 presidential campaign election. now, what you see here are the top three words in significant topics from new york times. and if you look at these topics, and they are indeed quite related to the campaign. actually the issues are very much related to the important issues of this presidential election. now here i should mention that the text data has been filtered by using only the articles that mention these candidate names. it's a subset of these news articles. very different from the previous experiment. but the results here clearly show that the approach can uncover some important issues in that presidential election. so tax cut, oil energy, abortion and gun control are all known to be important issues in that presidential election. and that was supported by some literature in political science. and also i was discussing wikipedia, right. so basically the results show that the approach can effectively discover possibly causal topics based on the time series data. so there are two suggested readings here. one is the paper about this iterative topic modeling with time series feedback. where you can find more details about how this approach works. and the second one is reading about granger casuality text. so in the end, let's summarize the discussion of text-based prediction. now, text-based prediction is generally very useful for big data applications that involve text. because they can help us inform new knowledge about the world. and the knowledge can go beyond what's discussed in the text. as a result can also support optimizing of our decision making. and this has a wider spread application. text data is often combined with non-text data for prediction. because, for this purpose, the prediction purpose, we generally would like to combine non-text data and text data together, as much cruel as possible for prediction. and so as a result during the analysis of text and non-text is very necessary and it's also very useful. now when we analyze text data together with non-text data, we can see they can help each other. so non-text data, provide a context for mining text data, and we discussed a number of techniques for contextual text mining. and on the other hand, a text data can also help interpret patterns discovered from non-text data, and this is called a pattern annotation. in general, this is a very active research topic, and there are new papers being published. and there are also many open challenges that have to be solved. [music",07_6-7-contextual-text-mining-mining-casual-topics-with-time-series-supervision
62,https://www.coursera.org/learn/text-mining,08_6-8-course-summary.en.txt,text-mining/07_week-6/02_week-6-lessons/08_6-8-course-summary.en.txt,"this lecture is a summary of this whole course. first, let's revisit the topics that we covered in this course. in the beginning, we talked about the natural language processing and how it can enrich text representation. we then talked about how to mine knowledge about the language, natural language used to express the, what's observing the world in text and data. in particular, we talked about how to mine word associations. we then talked about how to analyze topics in text. how to discover topics and analyze them. this can be regarded as knowledge about observed world, and then we talked about how to mine knowledge about the observer and particularly talk about the, how to mine opinions and do sentiment analysis. and finally, we will talk about the text-based prediction, which has to do with predicting values of other real world variables based on text data. and in discussing this, we will also discuss the role of non-text data, which can contribute additional predictors for the prediction problem, and also can provide context for analyzing text data, and in particular we talked about how to use context to analyze topics. so here are the key high-level take away messages from this cost. i going to go over these major topics and point out what are the key take-away messages that you should remember. first the nlp and text representation. you should realize that nlp is always very important for any text replication because it enriches text representation. the more nlp the better text representation we can have. and this further enables more accurate knowledge discovery, to discover deeper knowledge, buried in text. however, the current estate of art of natural energy processing is, still not robust enough. so, as an result, the robust text mining technologies today, tend to be based on world [inaudible]. and tend to rely a lot on statistical analysis, as we've discussed in this course. and you may recall we've mostly used word based representations. and we've relied a lot on statistical techniques, statistical learning techniques particularly. in word-association mining and analysis the important points first, we are introduced the two concepts for two basic and complementary relations of words, paradigmatic and syntagmatic relations. these are actually very general relations between elements sequences. if you take it as meaning elements that occur in similar context in the sequence and elements that tend to co-occur with each other. and these relations might be also meaningful for other sequences of data. we also talked a lot about test the similarity then we discuss how to discover paradynamic similarities compare the context of words discover words that share similar context. at that point level, we talked about representing text data with a vector space model. and we talked about some retrieval techniques such as bm25 for measuring similarity of text and for assigning weights to terms, tf-idf weighting, et cetera. and this part is well-connected to text retrieval. there are other techniques that can be relevant here also. the next point is about co-occurrence analysis of text, and we introduce some information theory concepts such as entropy, conditional entropy, and mutual information. these are not only very useful for measuring the co-occurrences of words, they are also very useful for analyzing other kind of data, and they are useful for, for example, for feature selection in text categorization as well. so this is another important concept, good to know. and then we talked about the topic mining and analysis, and that's where we introduce in the probabilistic topic model. we spent a lot of time to explain the basic topic model, plsa in detail and this is, those are the basics for understanding lda which is. theoretically, a more opinion model, but we did not have enough time to really go in depth in introducing lda. but in practice, plsa seems as effective as lda and it's simpler to implement and it's also more efficient. in this part of wilson videos is some general concepts that would be useful to know, one is generative model, and this is a general method for modeling text data and modeling other kinds of data as well. and we talked about the maximum life erase data, the em algorithm for solving the problem of computing maximum estimator. so, these are all general techniques that tend to be very useful in other scenarios as well. then we talked about the text clustering and the text categorization. those are two important building blocks in any text mining application systems. in text with clustering we talked about how we can solve the problem by using a slightly different mixture module than the probabilistic topic model. and we then also prefer to view the similarity based approaches to test for cuss word. in categorization we also talk about the two kinds of approaches. one is generative classifies that rely on to base word to infer the condition of or probability of a category given text data, in deeper we'll introduce you should use [inaudible] base in detail. this is the practical use for technique, for a lot of text, capitalization tasks. we also introduce the some discriminative classifiers, particularly logistical regression, can nearest labor and sbn. they also very important, they are very popular, they are very useful for text capitalization as well. in both parts, we'll also discuss how to evaluate the results. evaluation is quite important because if the matches that you use don't really reflect the volatility of the method then it would give you misleading results so its very important to get the variation right. and we talked about variation of categorization in detail was a lot of specific measures. then we talked about the sentiment analysis and the paradigm and that's where we introduced sentiment classification problem. and although it's a special case of text recalculation, but we talked about how to extend or improve the text recalculation method by using more sophisticated features that would be needed for sentiment analysis. we did a review of some common use for complex features for text analysis, and then we also talked about how to capture the order of these categories, in sentiment classification, and in particular we introduced ordinal logistical regression then we also talked about latent aspect rating analysis. this is an unsupervised way of using a generative model to understand and review data in more detail. in particular, it allows us to understand the composed ratings of a reviewer on different aspects of a topic. so given text reviews with overall ratings, the method allows even further ratings on different aspects. and it also allows us to infer, the viewers laying their weights on these aspects or which aspects are more important to a viewer can be revealed as well. and this enables a lot of interesting applications. finally, in the discussion of prediction, we mainly talk about the joint mining of text and non text data, as they are both very important for prediction. we particularly talked about how text data can help non-text data and vice versa. in the case of using non-text data to help text data analysis, we talked about the contextual text mining. we introduced the contextual plsa as a generalizing or generalized model of plsa to allows us to incorporate the context of variables, such as time and location. and this is a general way to allow us to reveal a lot of interesting topic of patterns in text data. we also introduced the net plsa, in this case we used social network or network in general of text data to help analyze puppets. and finally we talk about how can be used as context to mine potentially causal topics in text layer. now, in the other way of using text to help interpret patterns discovered from lam text data, we did not really discuss anything in detail but just provide a reference but i should stress that that's after a very important direction to know about, if you want to build a practical text mining systems, because understanding and interpreting patterns is quite important. so this is a summary of the key take away messages, and i hope these will be very useful to you for building any text mining applications or to you for the starting of these algorithms. and this should provide a good basis for you to read from your research papers, to know more about more of allowance for other organisms or to invent new hours in yourself. so to know more about this topic, i would suggest you to look into other areas in more depth. and during this short period of time of this course, we could only touch the basic concepts, basic principles, of text mining and we emphasize the coverage of practical algorithms. and this is after the cost of covering algorithms and in many cases we omit the discussion of a lot of algorithms. so to learn more about the subject you should definitely learn more about the natural language process because this is foundation for all text based applications. the more nlp you can do, the better the additional text that you can get, and then the deeper knowledge you can discover. so this is very important. the second area you should look into is the statistical machine learning. and these techniques are now the backbone techniques for not just text analysis applications but also for nlp. a lot of nlp techniques are nowadays actually based on supervised machinery. so, they are very important because they are a key to also understanding some advancing nlp techniques and naturally they will provide more tools for doing text analysis in general. now, a particularly interesting area, called deep learning has attracted a lot of attention recently. it has also shown promise in many application areas, especially in speech and vision, and has been applied to text data as well. so, for example, recently there has work on using deep learning to do segment analysis to achieve better accuracy. so that's one example of [inaudible] techniques that we weren't able to cover, but that's also very important. and the other area that has emerged in status learning is the water and baring technique, where they can learn better recognition of words. and then these better recognitions will allow you confuse similarity of words. as you can see, this provides directly a way to discover the paradigmatic relations of words. and results that people have got, so far, are very impressive. that's another promising technique that we did not have time to touch, but, of course, whether these new techniques would lead to practical useful techniques that work much better than the current technologies is still an open question that has to be examined. and no serious evaluation has been done yet. in, for example, examining the practical value of word embedding, other than word similarity and basic evaluation. but nevertheless, these are advanced techniques that surely will make impact in text mining in the future. so its very important to know more about these. statistical learning is also the key to predictive modeling which is very crucial for many big data applications and we did not talk about that predictive modeling component but this is mostly about the regression or categorization techniques and this is another reason why statistical learning is important. we also suggest that you learn more about data mining, and that's simply because general data mining algorithms can always be applied to text data, which can be regarded as as special case of general data. so there are many applications of data mining techniques. in particular for example, pattern discovery would be very useful to generate the interesting features for test analysis and the reason that an information network that mining techniques can also be used to analyze text information at work. so these are all good to know. in order to develop effective text analysis techniques. and finally, we also recommend you to learn more about the text retrieval, information retrieval, of search engines. this is especially important if you are interested in building practical text application systems. and a search ending would be an essential system component in any text-based applications. and that's because texts data are created for humans to consume. so humans are at the best position to understand text data and it's important to have human in the loop in big text data applications, so it can in particular help text mining systems in two ways. one is through effectively reduce the data size from a large collection to a small collection with the most relevant text data that only matter for the particular interpretation. so the other is to provide a way to annotate it, to explain parents, and this has to do with knowledge providence. once we discover some knowledge, we have to figure out whether or not the discovery is really reliable. so we need to go back to the original text to verify that. and that is why the search engine is very important. moreover, some techniques of information retrieval, for example bm25, vector space and are also very useful for text data mining. we only mention some of them, but if you know more about text retrieval you'll see that there are many techniques that are used for it. another technique that it's used for is indexing technique that enables quick response of search engine to a user's query, and such techniques can be very useful for building efficient text mining systems as well. so, finally, i want to remind you of this big picture for harnessing big text data that i showed you at your beginning of the semester. so in general, to deal with a big text application system, we need two kinds text, text retrieval and text mining. and text retrieval, as i explained, is to help convert big text data into a small amount of most relevant data for a particular problem, and can also help providing knowledge provenance, help interpreting patterns later. text mining has to do with further analyzing the relevant data to discover the actionable knowledge that can be directly useful for decision making or many other tasks. so this course covers text mining. and there's a companion course called text retrieval and search engines that covers text retrieval. if you haven't taken that course, it would be useful for you to take it, especially if you are interested in building a text caching system. and taking both courses will give you a complete set of practical skills for building such a system. so in [inaudible] i just would like to thank you for taking this course. i hope you have learned useful knowledge and skills in test mining and [inaudible]. as you see from our discussions there are a lot of opportunities for this kind of techniques and there are also a lot of open channels. so i hope you can use what you have learned to build a lot of use for applications will benefit society and to also join the research community to discover new techniques for text mining and benefits. thank you. [music",08_6-8-course-summary
63,https://www.coursera.org/learn/text-mining,06_6-6-contextual-text-mining-mining-topics-with-social-network-context.en.txt,text-mining/07_week-6/02_week-6-lessons/06_6-6-contextual-text-mining-mining-topics-with-social-network-context.en.txt,"[sound] this lecture is about how to mine text data with social network as context. in this lecture we're going to continue discussing contextual text mining. in particular, we're going to look at the social network of others as context. so first, what's our motivation for using network context for analysis of text? the context of a text article can form a network. for example the authors of research articles might form collaboration networks. but authors of social media content might form social networks. for example, in twitter people might follow each other. or in facebook as people might claim friends of others, etc. so such context connects the content of the others. similarly, locations associated with text can also be connected to form geographical network. but in general you can can imagine the metadata of the text data can form some kind of network if they have some relations. now there is some benefit in jointly analyzing text and its social network context or network context in general. and that's because we can use network to impose some constraints on topics of text. so for example it's reasonable to assume that authors connected in collaboration networks tend to write about the similar topics. so such heuristics can be used to guide us in analyzing topics. text also can help characterize the content associated with each subnetwork. and this is to say that both kinds of data, the network and text, can help each other. so for example the difference in opinions expressed that are in two subnetworks can be reviewed by doing this type of joint analysis. so here briefly you could use a model called a network supervised topic model. in this slide we're going to give some general ideas. and then in the next slide we're going to give some more details. but in general in this part of the course we don't have enough time to cover these frontier topics in detail. but we provide references that would allow you to read more about the topic to know the details. but it should still be useful to know the general ideas. and to know what they can do to know when you might be able to use them. so the general idea of network supervised topic model is the following. let's start with viewing the regular topic models. like if you had an lda as sorting optimization problem. of course, in this case, the optimization objective function is a likelihood function. so we often use maximum likelihood estimator to obtain the parameters. and these parameters will give us useful information that we want to obtain from text data. for example, topics. so we want to maximize the probability of tests that are given the parameters generally denoted by number. the main idea of incorporating network is to think about the constraints that can be imposed based on the network. in general, the idea is to use the network to impose some constraints on the model parameters, lambda here. for example, the text at adjacent nodes of the network can be similar to cover similar topics. indeed, in many cases, they tend to cover similar topics. so we may be able to smooth the topic distributions on the graph on the network so that adjacent nodes will have very similar topic distributions. so they will share a common distribution on the topics. or have just a slight variations of the topic of distributions, of the coverage. so, technically, what we can do is simply to add a network and use the regularizers to the likelihood of objective function as shown here. so instead of just optimize the probability of test data given parameters lambda, we're going to optimize another function f. this function combines the likelihood with a regularizer function called r here. and the regularizer defines the the parameters lambda and the network. it tells us basically what kind of parameters are preferred from a network constraint perspective. so you can easily see this is in effect implementing the idea of imposing some prior on the model parameters. only that we're not necessary having a probabilistic model, but the idea is the same. we're going to combine the two in one single objective function. so, the advantage of this idea is that it's quite general. here the top model can be any generative model for text. it doesn't have to be plsa or lea, or the current topic models. and similarly, the network can be also in a network. any graph that connects these text objects. this regularizer can also be any regularizer. we can be flexible in capturing different heuristics that we want to capture. and finally, the function f can also vary, so there can be many different ways to combine them. so, this general idea is actually quite, quite powerful. it offers a general approach to combining these different types of data in single optimization framework. and this general idea can really be applied for any problem. but here in this paper reference here, a particular instantiation called a netplsa was started. in this case, it's just for instantiating of plsa to incorporate this simple constraint imposed by network. and the prior here is the neighbors on the network must have similar topic distribution. they must cover similar topics in similar ways. and that's basically what it says in english. so technically we just have a modified objective function here. let's define both the texts you can actually see in the network graph g here. and if you look at this formula, you can actually recognize some part fairly familiarly. because they are, they should be fairly familiar to you by now. so can you recognize which part is the likelihood for the test given the topic model? well if you look at it, you will see this part is precisely the plsa log-likelihood that we want to maximize when we estimate parameters for plsa alone. but the second equation shows some additional constraints on the parameters. and in particular, we'll see here it's to measure the difference between the topic coverage at node u and node v. the two adjacent nodes on the network. we want their distributions to be similar. so here we are computing the square of their differences and we want to minimize this difference. and note that there's a negative sign in front of this sum, this whole sum here. so this makes it possible to find the parameters that are both to maximize the plsa log-likelihood. that means the parameters will fit the data well and, also to respect that this constraint from the network. and this is the negative sign that i just mentioned. because this is an negative sign, when we maximize this object in function we'll actually minimize this statement term here. so if we look further in this picture we'll see the results will weight of edge between u and v here. and that space from out network. if you have a weight that says well, these two nodes are strong collaborators of researchers. these two are strong connections between two people in a social network. and they would have weight. then that means it would be more important that they're topic coverages are similar. and that's basically what it says here. and finally you see a parameter lambda here. this is a new parameter to control the influence of network constraint. we can see easily, if lambda is set to 0, we just go back to the standard plsa. but when lambda is set to a larger value, then we will let the network influence the estimated models more. so as you can see, the effect here is that we're going to do basically plsa. but we're going to also try to make the topic coverages on the two nodes that are strongly connected to be similar. and we ensure their coverages are similar. so here are some of the several results, from that paper. this is slide shows the record results of using plsa. and the data here is dblp data, bibliographic data, about research articles. and the experiments have to do with using four communities of applications. ir information retrieval. dm stands for data mining. ml for machinery and web. there are four communities of articles, and we were hoping to see that the topic mining can help us uncover these four communities. but from these assembled topics that you have seen here that are generated by plsa. and plsa is unable to generate the four communities that correspond to our intuition. the reason was because they are all mixed together and there are many words that are shared by these communities. so it's not that easy to use four topics to separate them. if we use more topics, perhaps we will have more coherent topics. but what's interesting is that if we use the netplsa where the network, the collaboration network in this case of authors is used to impose constraints. and in this case we also use four topics. but ned pierre said we gave much more meaningful topics. so here we'll see that these topics correspond well to the four communities. the first is information retrieval. the second is data mining. third is machine learning. and the fourth is web. so that separation was mostly because of the influence of network where with leverage is a collaboration network information. essentially the people that form a collaborating network would then be kind of assumed to write about similar topics. and that's why we're going to have more coherent topics. and if you just listen to text data alone based on the occurrences, you won't get such coherent topics. even though a topic model, like plsa or lda also should be able to pick up co-occurring words. so in general the topics that they generate represent words that co-occur each other. but still they cannot generate such a coherent results as netplsa, showing that the network contest is very useful here. now a similar model could have been also useful to to characterize the content associated with each subnetwork of collaborations. so a more general view of text mining in context of network is you treat text as living in a rich information network environment. and that means we can connect all the related data together as a big network. and text data can be associated with a lot of structures in the network. for example, text data can be associated with the nodes of the network, and that's basically what we just discussed in the netplsa. but text data can be associated with age as well, or paths or even subnetworks. and such a way to represent texts that are in the big environment of all the context information is very powerful. because it allows to analyze all the data, all the information together. and so in general, analysis of text should be using the entire network information that's related to the text data. so here's one suggested reading. and this is the paper about netplsa where you can find more details about the model and how to make such a model. [music",06_6-6-contextual-text-mining-mining-topics-with-social-network-context
64,https://www.coursera.org/learn/text-mining,04_6-4-contextual-text-mining-motivation.en.txt,text-mining/07_week-6/02_week-6-lessons/04_6-4-contextual-text-mining-motivation.en.txt,"[sound] this lecture is about the contextual text mining. contextual text mining is related to multiple kinds of knowledge that we mine from text data, as i'm showing here. it's related to topic mining because you can make topics associated with context, like time or location. and similarly, we can make opinion mining more contextualized, making opinions connected to context. it's related to text based prediction because it allows us to combine non-text data with text data to derive sophisticated predictors for the prediction problem. so more specifically, why are we interested in contextual text mining? well, that's first because text often has rich context information. and this can include direct context such as meta-data, and also indirect context. so, the direct context can grow the meta-data such as time, location, authors, and source of the text data. and they're almost always available to us. indirect context refers to additional data related to the meta-data. so for example, from office, we can further obtain additional context such as social network of the author, or the author's age. such information is not in general directly related to the text, yet through the process, we can connect them. there could be other text data from the same source, as this one through the other text can be connected with this text as well. so in general, any related data can be regarded as context. so there could be removed or rated for context. and so what's the use? what is text context used for? well, context can be used to partition text data in many interesting ways. it can almost allow us to partition text data in other ways as we need. and this is very important because this allows us to do interesting comparative analyses. it also in general, provides meaning to the discovered topics, if we associate the text with context. so here's illustration of how context can be regarded as interesting ways of partitioning of text data. so here i just showed some research papers published in different years. on different venues, different conference names here listed on the bottom like the sigir or acl, etc. now such text data can be partitioned in many interesting ways because we have context. so the context here just includes time and the conference venues. but perhaps we can include some other variables as well. but let's see how we can partition this interesting of ways. first, we can treat each paper as a separate unit. so in this case, a paper id and the, each paper has its own context. it's independent. but we can also treat all the papers within 1998 as one group and this is only possible because of the availability of time. and we can partition data in this way. this would allow us to compare topics for example, in different years. similarly, we can partition the data based on the menus. we can get all the sigir papers and compare those papers with the rest. or compare sigir papers with kdd papers, with acl papers. we can also partition the data to obtain the papers written by authors in the u.s., and that of course, uses additional context of the authors. and this would allow us to then compare such a subset with another set of papers written by also seen in other countries. or we can obtain a set of papers about text mining, and this can be compared with papers about another topic. and note that these partitionings can be also intersected with each other to generate even more complicated partitions. and so in general, this enables discovery of knowledge associated with different context as needed. and in particular, we can compare different contexts. and this often gives us a lot of useful knowledge. for example, comparing topics over time, we can see trends of topics. comparing topics in different contexts can also reveal differences about the two contexts. so there are many interesting questions that require contextual text mining. here i list some very specific ones. for example, what topics have been getting increasing attention recently in data mining research? now to answer this question, obviously we need to analyze text in the context of time. so time is context in this case. is there any difference in the responses of people in different regions to the event, to any event? so this is a very broad an answer to this question. in this case of course, location is the context. what are the common research interests of two researchers? in this case, authors can be the context. is there any difference in the research topics published by authors in the usa and those outside? now in this case, the context would include the authors and their affiliation and location. so this goes beyond just the author himself or herself. we need to look at the additional information connected to the author. is there any difference in the opinions of all the topics expressed on one social network and another? in this case, the social network of authors and the topic can be a context. other topics in news data that are correlated with sudden changes in stock prices. in this case, we can use a time series such as stock prices as context. what issues mattered in the 2012 presidential campaign, or presidential election? now in this case, time serves again as context. so, as you can see, the list can go on and on. basically, contextual text mining can have many applications. [music",04_6-4-contextual-text-mining-motivation
65,https://www.coursera.org/learn/text-mining,03_6-3-text-based-prediction.en.txt,text-mining/07_week-6/02_week-6-lessons/03_6-3-text-based-prediction.en.txt,"[sound] this lecture is about the text-based prediction. in this lecture, we're going to start talking about the mining a different kind of knowledge, as you can see here on this slide. namely we're going to use text data to infer values of some other variables in the real world that may not be directly related to the text. or only remotely related to text data. so this is very different from content analysis or topic mining where we directly characterize the content of text. it's also different from opinion mining or sentiment analysis, which still have to do is characterizing mostly the content. only that we focus more on the subject of content which reflects what we know about the opinion holder. but this only provides limited review of what we can predict. in this lecture and the following lectures, we're going to talk more about how we can predict more information about the world. how can we get the sophisticated patterns of text together with other kind of data? it would be useful first to take a look at the big picture of prediction, and data mining in general, and i call this data mining loop. so the picture that you are seeing right now is that there are multiple sensors, including human sensors, to report what we have seen in the real world in the form of data. of course the data in the form of non-text data, and text data. and our goal is to see if we can predict some values of important real world variables that matter to us. for example, someone's house condition, or the weather, or etc. and so these variables would be important because we might want to act on that. we might want to make decisions based on that. so how can we get from the data to these predicted values? well in general we'll first have to do data mining and analysis of the data. because we, in general, should treat all the data that we collected in such a prediction problem set up. we are very much interested in joint mining of non-text and text data, which should combine all the data together. and then, through analysis, generally there are multiple predictors of this interesting variable to us. and we call these features. and these features can then be put into a predictive model, to actually predict the value of any interesting variable. so this then allows us to change the world. and so this basically is the general process for making a prediction based on data, including the test data. now it's important to emphasize that a human actually plays a very important role in this process. especially because of the involvement of text data. so human first would be involved in the mining of the data. it would control the generation of these features. and it would also help us understand the text data, because text data are created to be consumed by humans. humans are the best in consuming or interpreting text data. but when there are, of course, a lot of text data then machines have to help and that's why we need to do text data mining. sometimes machines can see patterns in a lot of data that humans may not see. but in general human would play an important role in analyzing some text data, or applications. next, human also must be involved in predictive model building and adjusting or testing. so in particular, we will have a lot of domain knowledge about the problem of prediction that we can build into this predictive model. and then next, of course, when we have predictive values for the variables, then humans would be involved in taking actions to change a word or make decisions based on these particular values. and finally it's interesting that a human could be involved in controlling the sensors. and this is so that we can adjust to the sensors to collect the most useful data for prediction. so that's why i call this data mining loop. because as we perturb the sensors, it'll collect the new data and more useful data then we will obtain more data for prediction. and this data generally will help us improve the predicting accuracy. and in this loop, humans will recognize what additional data will need to be collected. and machines, of course, help humans identify what data should be collected next. in general, we want to collect data that is most useful for learning. and there was actually a subarea in machine learning called active learning that has to do with this. how do you identify data points that would be most helpful in machine learning programs? if you can label them, right? so, in general, you can see there is a loop here from data acquisition to data analysis. or data mining to prediction of values. and to take actions to change the word, and then observe what happens. and then you can then decide what additional data have to be collected by adjusting the sensors. or from the prediction arrows, you can also note what additional data we need to acquire in order to improve the accuracy of prediction. and this big picture is actually very general and it's reflecting a lot of important applications of big data. so, it's useful to keep that in mind while we are looking at some text mining techniques. so from text mining perspective and we're interested in text based prediction. of course, sometimes texts alone can make predictions. and this is most useful for prediction about human behavior or human preferences or opinions. but in general text data will be put together as non-text data. so the interesting questions here would be, first, how can we design effective predictors? and how do we generate such effective predictors from text? and this question has been addressed to some extent in some previous lectures where we talked about what kind of features we can design for text data. and it has also been addressed to some extent by talking about the other knowledge that we can mine from text. so, for example, topic mining can be very useful to generate the patterns or topic based indicators or predictors that can be further fed into a predictive model. so topics can be intermediate recognition of text. that would allow us to do design high level features or predictors that are useful for prediction of some other variable. it may be also generated from original text data, it provides a much better implementation of the problem and it serves as more effective predictors. and similarly similar analysis can lead to such predictors, as well. so, those other data mining or text mining algorithms can be used to generate predictors. the other question is, how can we join the mine text and non-text data together? now, this is a question that we have not addressed yet. so, in this lecture, and in the following lectures, we're going to address this problem. because this is where we can generate much more enriched features for prediction. and allows us to review a lot of interesting knowledge about the world. these patterns that are generated from text and non-text data themselves can sometimes, already be useful for prediction. but, when they are put together with many other predictors they can really help improving the prediction. basically, you can see text-based prediction can actually serve as a unified framework to combine many text mining and analysis techniques. including topic mining and any content mining techniques or segment analysis. the goal here is mainly to evoke values of real-world variables. but in order to achieve the goal we can do some other preparations. and these are subtasks. so one subtask could mine the content of text data, like topic mining. and the other could be to mine knowledge about the observer. so sentiment analysis, opinion. and both can help provide predictors for the prediction problem. and of course we can also add non-text data directly to the predicted model, but then non-text data also helps provide a context for text analyst. and that further improves the topic mining and the opinion analysis. and such improvement often leads to more effective predictors for our problems. it would enlarge the space of patterns of opinions of topics that we can mine from text and that we'll discuss more later. so the joint analysis of text and non-text data can be actually understood from two perspectives. one perspective, we have non-text can help with testimony. because non-text data can provide a context for mining text data provide a way to partition data in different ways. and this leads to a number of type of techniques for contextual types of mining. and that's the mine text in the context defined by non-text data. and you see this reference here, for a large body of work, in this direction. and i will need to highlight some of them, in the next lectures. now, the other perspective is text data can help with non-text data mining as well. and this is because text data can help interpret patterns discovered from non-text data. let's say you discover some frequent patterns from non-text data. now we can use the text data associated with instances where the pattern occurs as well as text data that is associated with instances where the pattern doesn't look up. and this gives us two sets of text data. and then we can see what's the difference. and this difference in text data is interpretable because text content is easy to digest. and that difference might suggest some meaning for this pattern that we found from non-text data. so, it helps interpret such patterns. and this technique is called pattern annotation. and you can see this reference listed here for more detail. so here are the references that i just mentioned. the first is reference for pattern annotation. the second is, qiaozhu mei's dissertation on contextual text mining. it contains a large body of work on contextual text mining techniques. [music",03_6-3-text-based-prediction
66,https://www.coursera.org/learn/text-mining,01_6-1-opinion-mining-and-sentiment-analysis-latent-aspect-rating-analysis-part-1.en.txt,text-mining/07_week-6/02_week-6-lessons/01_6-1-opinion-mining-and-sentiment-analysis-latent-aspect-rating-analysis-part-1.en.txt,"[music] this lecture is about the latent aspect rating analysis for opinion mining and sentiment analysis. in this lecture, we're going to continue discussing opinion mining and sentiment analysis. in particular, we're going to introduce latent aspect rating analysis which allows us to perform detailed analysis of reviews with overall ratings. so, first is motivation. here are two reviews that you often see in the net about the hotel. and you see some overall ratings. in this case, both reviewers have given five stars. and, of course, there are also reviews that are in text. now, if you just look at these reviews, it's not very clear whether the hotel is good for its location or for its service. it's also unclear why a reviewer liked this hotel. what we want to do is to decompose this overall rating into ratings on different aspects such as value, rooms, location, and service. so, if we can decompose the overall ratings, the ratings on these different aspects, then, we can obtain a more detailed understanding of the reviewer's opinionsabout the hotel. and this would also allow us to rank hotels along different dimensions such as value or rooms. but, in general, such detailed understanding will reveal more information about the user's preferences, reviewer's preferences. and also, we can understand better how the reviewers view this hotel from different perspectives. now, not only do we want to infer these aspect ratings, we also want to infer the aspect weights. so, some reviewers may care more about values as opposed to the service. and that would be a case. like what's shown on the left for the weight distribution, where you can see a lot of weight is places on value. but others care more for service. and therefore, they might place more weight on service than value. the reason why this is also important is because, do you think about a five star on value, it might still be very expensive if the reviewer cares a lot about service, right? for this kind of service, this price is good, so the reviewer might give it a five star. but if a reviewer really cares about the value of the hotel, then the five star, most likely, would mean really cheap prices. so, in order to interpret the ratings on different aspects accurately, we also need to know these aspect weights. when they're combined together, we can have a more detailed understanding of the opinion. so the task here is to get these reviews and their overall ratings as input, and then, generate both the aspect ratings, the compose aspect ratings, and the aspect rates as output. and this is a problem called latent aspect rating analysis. so the task, in general, is given a set of review articles about the topic with overall ratings, and we hope to generate three things. one is the major aspects commented on in the reviews. second is ratings on each aspect, such as value and room service. and third is the relative weights placed on different aspects by the reviewers. and this task has a lot of applications, and if you can do this, and it will enable a lot of applications. i just listed some here. and later, i will show you some results. and, for example, we can do opinion based entity ranking. we can generate an aspect-level opinion summary. we can also analyze reviewers preferences, compare them or compare their preferences on different hotels. and we can do personalized recommendations of products. so, of course, the question is how can we solve this problem? now, as in other cases of these advanced topics, we won’t have time to really cover the technique in detail. but i’m going to give you a brisk, basic introduction to the technique development for this problem. so, first step, we’re going to talk about how to solve the problem in two stages. later, we’re going to also mention that we can do this in the unified model. now, take this review with the overall rating as input. what we want to do is, first, we're going to segment the aspects. so we're going to pick out what words are talking about location, and what words are talking about room condition, etc. so with this, we would be able to obtain aspect segments. in particular, we're going to obtain the counts of all the words in each segment, and this is denoted by c sub i of w and d. now this can be done by using seed words like location and room or price to retrieve the [inaudible] in the segments. and then, from those segments, we can further mine correlated words with these seed words and that would allow us to segmented the text into segments, discussing different aspects. but, of course, later, as we will see, we can also use [inaudible] models to do the segmentation. but anyway, that's the first stage, where the obtain the council of words in each segment. in the second stage, which is called latent rating regression, we're going to use these words and their frequencies in different aspects to predict the overall rate. and this predicting happens in two stages. in the first stage, we're going to use the [inaudible] and the weights of these words in each aspect to predict the aspect rating. so, for example, if in your discussion of location, you see a word like, amazing, mentioned many times, and it has a high weight. for example, here, 3.9. then, it will increase the aspect rating for location. but, another word like, far, which is an acted weight, if it's mentioned many times, and it will decrease the rating. so the aspect ratings, assume that it will be a weighted combination of these word frequencies where the weights are the sentiment weights of the words. of course, these sentimental weights might be different for different aspects. so we have, for each aspect, a set of term sentiment weights as shown here. and that's in order by beta sub i and w. in the second stage or second step, we're going to assume that the overall rating is simply a weighted combination of these aspect ratings. so we're going to assume we have aspect weights to the [inaudible] sub i of d, and this will be used to take a weighted average of the aspect ratings, which are denoted by r sub i of d. and we're going to assume the overall rating is simply a weighted average of these aspect ratings. so this set up allows us to predict the overall rating based on the observable frequencies. so on the left side, you will see all these observed information, the r sub d and the count. but on the right side, you see all the information in that range is actually latent. so, we hope to discover that. now, this is a typical case of a generating model where would embed the interesting variables in the generated model. and then, we're going to set up a generation probability for the overall rating given the observed words. and then, of course, we can adjust these parameter values including betas rs and alpha is in order to maximize the probability of the data. in this case, the conditional probability of the observed rating given the document. so we have seen such cases before in, for example, pisa, where we predict a text data. but here, we're predicting the rating, and the parameters, of course, are very different. but we can see, if we can uncover these parameters, it would be nice, because r sub i of d is precise as the ratings that we want to get. and these are the composer ratings on different aspects. [inaudible] sub i d is precisely the aspect weights that we hope to get as a byproduct, that we also get the beta factor, and these are the [inaudible] factor, the sentiment weights of words. so more formally, the data we are modeling here is a set of review documents with overall ratings. and each review document denote by a d, and the overall ratings denote by r sub d. and d pre-segments turn into k aspect segments. and we're going to use ci(w,d) to denote the count of word w in aspect segment i. of course, it's zero if the word doesn't occur in the segment. now, the model is going to predict the rating based on d. so, we're interested in the provisional problem of r sub-d given d. and this model is set up as follows. so r sub-d is assumed the two follow a normal distribution doesn't mean that denotes actually await the average of the aspect of ratings r sub i of d as shown here. this normal distribution is a variance of data squared. now, of course, this is just our assumption. the actual rating is not necessarily anything thing this way. but as always, when we make this assumption, we have a formal way to model the problem and that allows us to compute the interest in quantities. in this case, the aspect ratings and the aspect weights. now, the aspect rating as you see on the [inaudible] is assuming that will be a weight of sum of these weights. where the weight is just the [inaudible] of the weight. so as i said, the overall rating is assumed to be a weighted average of aspect ratings. now, these other values, r for sub i of d, or denoted together by other vector that depends on d is that the token of specific weights. and we’re going to assume that this vector itself is drawn from another multivariate gaussian distribution, with mean denoted by a mu factor, and covariance metrics sigma here. now, so this means, when we generate our overall rating, we're going to first draw a set of other values from this multivariate gaussian prior distribution. and once we get these other values, we're going to use then the weighted average of aspect ratings as the mean here to use the normal distribution to generate the overall rating. now, the aspect rating, as i just said, is the sum of the sentiment weights of words in aspect, note that here the sentiment weights are specific to aspect. so, beta is indexed by i, and that's for aspect. and that gives us a way to model different segment of a word. this is neither because the same word might have positive sentiment for another aspect. it's also used for see what parameters we have here beta sub i and w gives us the aspect-specific sentiment of w. so, obviously, that's one of the important parameters. but, in general, we can see we have these parameters, beta values, the delta, and the mu, and sigma. so, next, the question is, how can we estimate these parameters and, so we collectively denote all the parameters by lambda here. now, we can, as usual, use the maximum likelihood estimate, and this will give us the settings of these parameters, that with a maximized observed ratings condition of their respective reviews. and of, course, this would then give us all the useful variables that we are interested in computing. so, more specifically, we can now, once we estimate the parameters, we can easily compute the aspect rating, for aspect the i or sub i of d. and that's simply to take all of the words that occurred in the segment, i, and then take their counts and then multiply that by the center of the weight of each word and take a sum. so, of course, this time would be zero for words that are not occurring in and that's why were going to take the sum of all the words in the vocabulary. now what about the s factor weights? alpha sub i of d, well, it's not part of our parameter. right? so we have to use that to compute it. and in this case, we can use the maximum a posteriori to compute this alpha value. basically, we're going to maximize the product of the prior of alpha according to our assumed multivariate gaussian distribution and the likelihood. in this case, the likelihood rate is the probability of generating this observed overall rating given this particular alpha value and some other parameters, as you see here. so for more details about this model, you can read this paper cited here. [music",01_6-1-opinion-mining-and-sentiment-analysis-latent-aspect-rating-analysis-part-1
67,https://www.coursera.org/learn/text-mining,05_6-5-contextual-text-mining-contextual-probabilistic-latent-semantic-analysis.en.txt,text-mining/07_week-6/02_week-6-lessons/05_6-5-contextual-text-mining-contextual-probabilistic-latent-semantic-analysis.en.txt,"[music] this lecture is about a specific technique for contextual text mining called contextual probabilistic latent semantic analysis. in this lecture, we're going to continue discussing contextual text mining. and we're going to introduce contextual probablitistic latent semantic analysis as exchanging of pos for doing contextual text mining. recall that in contextual text mining we hope to analyze topics in text, in consideration of the context so that we can associate the topics with a property of the context were interesting. so in this approach, contextual probabilistic latent semantic analysis, or cplsa, the main idea is to express to the add interesting context variables into a generating model. recall that before when we generate the text we generally assume we'll start with some topics, and then assemble words from some topics. but here, we're going to add context variables, so that the coverage of topics, and also the content of topics would be tied in context. or in other words, we're going to let the context influence both coverage and the content of a topic. the consequences that this will enable us to discover contextualized topics. make the topics more interesting, more meaningful. because we can then have topics that can be interpreted as specifically to a particular context that we are interested in. for example, a particular time period. as an extension of plsa model, cplsa does the following changes. firstly it would model the conditional likelihood of text given context. that clearly suggests that the generation of text would then depend on context, and that allows us to bring context into the generative model. secondly, it makes two specific assumptions about the dependency of topics on context. one is to assume that depending on the context, depending on different time periods or different locations, we assume that there are different views of a topic or different versions of word descriptions that characterize a topic. and this assumption allows us to discover different variations of the same topic in different contexts. the other is that we assume the topic coverage also depends on the context. that means depending on the time or location, we might cover topics differently. again, this dependency would then allow us to capture the association of topics with specific contexts. we can still use the em algorithm to solve the problem of parameter estimation. and in this case, the estimated parameters would naturally contain context variables. and in particular, a lot of conditional probabilities of topics given certain context. and this is what allows you to do contextual text mining. so this is the basic idea. now, we don't have time to introduce this model in detail, but there are references here that you can look into to know more detail. here i just want to explain the high level ideas in more detail. particularly i want to explain the generation process. of text data that has context associated in such a model. so as you see here, we can assume there are still multiple topics. for example, some topics might represent a themes like a government response, donation or the city of new orleans. now this example is in the context of hurricane katrina and that hit new orleans. now as you can see we assume there are different views associated with each of the topics. and these are shown as view 1, view 2, view 3. each view is a different version of word distributions. and these views are tied to some context variables. for example, tied to the location texas, or the time july 2005, or the occupation of the author being a sociologist. now, on the right side, now we assume the document has context information. so the time is known to be july 2005. the location is texas, etc. and such context information is what we hope to model as well. so we're not going to just model the text. and so one idea here is to model the variations of top content and various content. and this gives us different views of the water distributions. now on the bottom you will see the theme coverage of top coverage might also vary according to these context because in the case of a location like texas, people might want to cover the red topics more. that's new orleans. that's visualized here. but in a certain time period, maybe particular topic and will be covered more. so this variation is also considered in cplsa. so to generate the searcher document with context, with first also choose a view. and this view of course now could be from any of these contexts. let's say, we have taken this view that depends on the time. in the middle. so now, we will have a specific version of word distributions. now, you can see some probabilities of words for each topic. now, once we have chosen a view, now the situation will be very similar to what happened in standard ((prsa)) we assume we have got word distribution associated with each topic, right? and then next, we will also choose a coverage from the bottom, so we're going to choose a particular coverage, and that coverage, before is fixed in plsa, and assigned to a particular document. each document has just one coverage distribution. now here, because we consider context, so the distribution of topics or the coverage of topics can vary depending on the context that has influenced the coverage. so, for example, we might pick a particular coverage. let's say in this case we picked a document specific coverage. now with the coverage and these word distributions we can generate a document in exactly the same way as in plsa. so what it means, we're going to use the coverage to choose a topic, to choose one of these three topics. let's say we have picked the yellow topic. then we'll draw a word from this particular topic on the top. okay, so we might get a word like government. and then next time we might choose a different topic, and we'll get donate, etc. until we generate all the words. and this is basically the same process as in plsa. so the main difference is when we obtain the coverage. and the word distribution, we let the context influence our choice so in other words we have extra switches that are tied to these contacts that will control the choices of different views of topics and the choices of coverage. and naturally the model we have more parameters to estimate. but once we can estimate those parameters that involve the context, then we will be able to understand the context specific views of topics, or context specific coverages of topics. and this is precisely what we want in contextual text mining. so here are some simple results. from using such a model. not necessary exactly the same model, but similar models. so on this slide you see some sample results of comparing news articles about iraq war and afghanistan war. now we have about 30 articles on iraq wa,r and 26 articles on afghanistan war. and in this case, the goal is to review the common topic. it's covered in both sets of articles and the differences of variations of the topic in each of the two collections. so in this case the context is explicitly specified by the topic or collection. and we see the results here show that there is a common theme that's corresponding to cluster 1 here in this column. and there is a common theme indicting that united nations is involved in both wars. it's a common topic covered in both sets of articles. and that's indicated by the high probability words shown here, united and nations. now if you know the background, of course this is not surprising and this topic is indeed very relevant to both wars. if you look at the column further and then what's interesting's that the next two cells of word distributions actually tell us collection specific variations of the topic of united nations. so it indicates that the iraq war, united nations was more involved in weapons factions, whereas in the afghanistan war it was more involved in maybe aid to northern alliance. it's a different variation of the topic of united nations. so this shows that by bringing the context. in this case different the walls or different the collection of texts. we can have topical variations tied to these contexts, to review the differences of coverage of the united nations in the two wars. now similarly if you look at the second cluster class two, it has to do with the killing of people, and, again, it's not surprising if you know the background about wars. all the wars involve killing of people, but imagine if you are not familiar with the text collections. we have a lot of text articles, and such a technique can reveal the common topics covered in both sets of articles. it can be used to review common topics in multiple sets of articles as well. if you look at of course in that column of cluster two, you see variations of killing of people and that corresponds to different contexts and here is another example of results obtained from blog articles about hurricane katrina. in this case, what you see here is visualization of the trends of topics over time. and the top one shows just the temporal trends of two topics. one is oil price, and one is about the flooding of the city of new orleans. now these topics are obtained from blog articles about hurricane katrina. and people talk about these topics. and end up teaching to some other topics. but the visualisation shows that with this technique, we can have conditional distribution of time. given a topic. so this allows us to plot this conditional probability the curve is like what you're seeing here. we see that, initially, the two curves tracked each other very well. but later we see the topic of new orleans was mentioned again but oil price was not. and this turns out to be the time period when another hurricane, hurricane rita hit the region. and that apparently triggered more discussion about the flooding of the city. the bottom curve shows the coverage of this topic about flooding of the city by block articles in different locations. and it also shows some shift of coverage that might be related to people's migrating from the state of louisiana to texas for example. so in this case we can see the time can be used as context to review trends of topics. these are some additional results on spacial patterns. in this case it was about the topic of government response. and there was some criticism about the slow response of government in the case of hurricane katrina. and the discussion now is covered in different locations. and these visualizations show the coverage in different weeks of the event. and initially it's covered mostly in the victim states, in the south, but then gradually spread into other locations. but in week four, which is shown on the bottom left, we see a pattern that's very similar to the first week on the top left. and that's when again hurricane rita hit in the region. so such a technique would allow us to use location as context to examine their issues of topics. and of course the moral is completely general so you can apply this to any other connections of text. to review spatial temporal patterns. his view found another application of this kind of model, where we look at the use of the model for event impact analysis. so here we're looking at the research articles information retrieval. ir, particularly sigir papers. and the topic we are focusing on is about the retrieval models. and you can see the top words with high probability about this model on the left. and then we hope to examine the impact of two events. one is a start of trec, for text and retrieval conference. this is a major evaluation sponsored by u.s. government, and was launched in 1992 or around that time. and that is known to have made a impact on the topics of research information retrieval. the other is the publication of a seminal paper, by croft and porte. this is about a language model approach to information retrieval. it's also known to have made a high impact on information retrieval research. so we hope to use this kind of model to understand impact. the idea here is simply to use the time as context. and use these events to divide the time periods into a period before. for the event and another after this event. and then we can compare the differences of the topics. the and the variations, etc. so in this case, the results show before track the study of retrieval models was mostly a vector space model, boolean model etc. but the after trec, apparently the study of retrieval models have involved a lot of other words. that seems to suggest some different retrieval tasks, so for example, email was used in the enterprise search tasks and subtopical retrieval was another task later introduced by trec. on the bottom, we see the variations that are correlated with the propagation of the language model paper. before, we have those classic probability risk model, logic model, boolean etc., but after 1998, we see clear dominance of language model as probabilistic models. and we see words like language model, estimation of parameters, etc. so this technique here can use events as context to understand the impact of event. again the technique is generals so you can use this to analyze the impact of any event. here are some suggested readings. the first is paper about simple staging of psi to label cross-collection comparison. it's to perform comparative text mining to allow us to extract common topics shared by multiple collections. and there are variations in each collection. the second one is the main paper about the cplsa model. was a discussion of a lot of applications. the third one has a lot of details about the special temporal patterns for the hurricane katrina example. [music",05_6-5-contextual-text-mining-contextual-probabilistic-latent-semantic-analysis
68,https://www.coursera.org/learn/text-mining,04_4-4-text-clustering-generative-probabilistic-models-part-3.en.txt,text-mining/05_week-4/02_week-4-lessons/04_4-4-text-clustering-generative-probabilistic-models-part-3.en.txt,"[sound] this lecture is a continuing discussion of generative probabilistic models for tax classroom. in this lecture, we're going to do a finishing discussion of generative probabilistic models for text crossing. so this is a slide that you have seen before and here, we show how we define the mixture model for text crossing and what the likelihood function looks like. and we can also compute the maximum likelihood estimate, to estimate the parameters. in this lecture, we're going to do talk more about how exactly we're going to compute the maximum likelihood estimate. as in most cases the algorithm can be used to solve this problem for mixture models. so here's the detail of this algorithm for document clustering. now, if you have understood how algorithm works for topic models like trsa, and i think here it would be very similar. and we just need to adapt a little bit to this new mixture model. so as you may recall algorithm starts with initialization of all the parameters. so this is the same as what happened before for topic models. and then we're going to repeat until the likelihood converges and in each step we'll do e step and m step. in m step, we're going to infer which distribution has been used to generate each document. so i have to introduce a hidden variable zd for each document and this variable could take a value from the range of 1 through k, representing k different distributions. more specifically basically, we're going to apply base rules to infer which distribution is more likely to have generated this document, or computing the posterior probability of the distribution given the document. and we know it's proportional to the probability of selecting this distribution p of z the i. and the probability of generating this whole document from the distribution which is the product of the probabilities of world for this document as you see here. now, as you all clear this use for kind of remember, the normalizer or the constraint on this probability. so in this case, we know the constraint on this probability in e-step is that all the probabilities of z equals i must sum to 1. because the documented must have been generated from precisely one of these k topics. so the probability of being generated from each of them should sum to 1. and if you know this constraint, then you can easily compute this distribution as long as you know what it is proportional to. so once you compute this product that you see here, then you simply normalize these probabilities, to make them sum to 1 over all the topics. so that's e-step, after e-step we want to know which distribution is more likely to have generated this document d, and which is unlikely. and then in m-step we're going to re-estimate all the parameters based on the in further z values or in further knowledge about which distribution has been used to generate which document. so the re-estimation involves two kinds of parameters 1 is p of theta and this is the probability of selecting a particular distribution. before we observe anything, we don't have any knowledge about which cluster is more likely. but after we have observed that these documents, then we can crack the evidence to infer which cluster is more likely. and so this is proportional to the sum of the probability of z sub d j is equal to i. and so this gives us all the evidence about using topic i, theta i to generate a document. pull them together and again, we normalize them into probabilities. so this is for key of theta sub i. now the other kind of parameters are the probabilities of words in each distribution, in each cluster. and this is very similar to the case piz and here we just report the kinds of words that are in documents that are inferred to have been generated from a particular topic of theta i here. this would allows to then estimate how many words have actually been generated from theta i. and then we'll normalize again these accounts in the probabilities so that the probabilities on all the words would sum to up. note that it's very important to understand these constraints as they are precisely the normalizing in all these formulas. and it's also important to know that the distribution is over what? for example, the probability of theta is over all the k topics, that's why these k probabilities will sum to 1. whereas the probability of a word given theta is a probability distribution over all the words. so there are many probabilities and they have to sum to 1. so now, let's take a look at a simple example of two clusters. i've two clusters, i've assumed some initialized values for the two distributions. and let's assume we randomly initialize two probability of selecting each cluster as 0.5, so equally likely. and then let's consider one document that you have seen here. there are two occurrences of text and two occurrences of mining. so there are four words together and medical and health did not occur in this document. so let's think about the hidden variable. now for each document then we much use a hidden variable. and before in piz, we used one hidden variable for each work because that's the output from one mixture model. so in our case the output from the mixture model or the observation from mixture model is a document, not a word. so now we have one hidden variable attached to the document. now that hidden variable must tell us which distribution has been used to generate the document. so it's going to take two values, one and two to indicate the two topics. so now how do we infer which distribution has been used generally d? well it's been used base rule, so it looks like this. in order for the first topic theta 1 to generate a document, two things must happen. first, theta sub 1 must have been selected. so it's given by p of theta 1. second, it must have also be generating the four words in the document. namely, two occurrences of text and two occurrences of sub mining. and that's why you see the numerator has the product of the probability of selecting theta 1 and the probability of generating the document from theta 1. so the denominator is just the sum of two possibilities of generality in this document. and you can plug in the numerical values to verify indeed in this case, the document is more likely to be generated from theta 1, much more likely than from theta 2. so once we have this probability, we can easily compute the probability of z equals 2, given this document. how? well, we can use the constraint. that's going to be 1 minus 100 over 101. so now it's important that you note that in such a computation there is a potential problem of underflow. and that is because if you look at the original numerator and the denominator, it involves the competition of a product of many small probabilities. imagine if a document has many words and it's going to be a very small value here that can cause the problem of underflow. so to solve the problem, we can use a normalize. so here you see that we take a average of all these two math solutions to compute average at the screen called a theta bar. and this average distribution would be comparable to each of these distributions in terms of the quantities or the magnitude. so we can then divide the numerator and the denominator both by this normalizer. so basically this normalizes the probability of generating this document by using this average word distribution. so you can see the normalizer is here. and since we have used exactly the same normalizer for the numerator and the denominator. the whole value of this expression is not changed but by doing this normalization you can see we can make the numerators and the denominators more manageable in that the overall value is not going to be very small for each. and thus we can avoid the underflow problem. in some other times we sometimes also use logarithm of the product to convert this into a sum of log of probabilities. this can help preserve precision as well, but in this case we cannot use algorithm to solve the problem. because there is a sum in the denominator, but this kind of normalizes can be effective for solving this problem. so it's a technique that's sometimes useful in other situations in other situations as well. now let's look at the m-step. so from the e-step we can see our estimate of which distribution is more likely to have generated a document at d. and you can see d1's more like got it from the first topic, where is d2 is more like from second topic, etc. now, let's think about what we need to compute in m-step well basically we need to re-estimate all the parameters. first, look at p of theta 1 and p of theta 2. how do we estimate that? intuitively you can just pool together these z, the probabilities from e-step. so if all of these documents say, well they're more likely from theta 1, then we intuitively would give a higher probability to theta 1. in this case, we can just take an average of these probabilities that you see here and we've obtain a 0.6 for theta 1. so 01 is more likely and then theta 2. so you can see probability of 02 would be natural in 0.4. what about these word of probabilities? well we do the same, and intuition is the same. so we're going to see, in order to estimate the probabilities of words in theta 1, we're going to look at which documents have been generated from theta 1. and we're going to pull together the words in those documents and normalize them. so this is basically what i just said. more specifically, we're going to do for example, use all the kinds of text in these documents for estimating the probability of text given theta 1. but we're not going to use their raw count or total accounts. instead, we can do that discount them by the probabilities that each document is likely been generated from theta 1. so these gives us some fractional accounts. and then these accounts would be then normalized in order to get the probability. now, how do we normalize them? well these probability of these words must assign to 1. so to summarize our discussion of generative models for clustering. well we show that a slight variation of topic model can be used for clustering documents. and this also shows the power of generating models in general. by changing the generation assumption and changing the model slightly we can achieve different goals, and we can capture different patterns and types of data. so in this case, each cluster is represented by unigram language model word distribution and that is similar to topic model. so here you can see the word distribution actually generates a term cluster as a by-product. a document that is generated by first choosing a unigram language model. and then generating all the words in the document are using just a single language model. and this is very different from again copy model where we can generate the words in the document by using multiple unigram language models. and then the estimated model parameters are given both topic characterization of each cluster and the probabilistic assignment of each document into a cluster. and this probabilistic assignment sometimes is useful for some applications. but if we want to achieve harder clusters mainly to partition documents into disjointed clusters. then we can just force a document into the cluster corresponding to the words distribution that's most likely to have generated the document. we've also shown that the algorithm can be used to compute the maximum likelihood estimate. and in this case, we need to use a special number addition technique to avoid underflow. [music",04_4-4-text-clustering-generative-probabilistic-models-part-3
69,https://www.coursera.org/learn/text-mining,01_4-1-text-clustering-motivation.en.txt,text-mining/05_week-4/02_week-4-lessons/01_4-1-text-clustering-motivation.en.txt,"[sound] this lecture is the first one about the text clustering. in this lecture, we are going to talk about the text clustering. this is a very important technique for doing topic mining and analysis. in particular, in this lecture we're going to start with some basic questions about the clustering. and that is, what is text clustering and why we are interested in text clustering. in the following lectures, we are going to talk about how to do text clustering. how to evaluate the clustering results? so what is text clustering? well, clustering actually is a very general technique for data mining as you might have learned in some other courses. the idea is to discover natural structures in the data. in another words, we want to group similar objects together. in our case, these objects are of course, text objects. for example, they can be documents, terms, passages, sentences, or websites, and then i'll go group similar text objects together. so let's see an example, well, here you don't really see text objects, but i just used some shapes to denote objects that can be grouped together. now if i ask you, what are some natural structures or natural groups where you, if you look at it and you might agree that we can group these objects based on chips, or their locations on this two dimensional space. so we got the three clusters in this case. and they may not be so much this agreement about these three clusters but it really depends on the perspective to look at the objects. maybe some of you have also seen thing in a different way, so we might get different clusters. and you'll see another example about this ambiguity more clearly. but the main point of here is, the problem is actually not so well defined. and the problem lies in how to define similarity. and what do you mean by similar objects? now this problem has to be clearly defined in order to have a well defined clustering problem. and the problem is in general that any two objects can be similar depending on how you look at them. so for example, this will kept the two words like car and horse. so are the two words similar? well, it depends on how if we look at the physical properties of car and horse they are very different but if you look at them functionally, a car and a horse, can both be transportation tools. so in that sense, they may be similar. so as we can see, it really depends on our perspective, to look at the objects. and so it ought to make the clustering problem well defined. a user must define the perspective for assessing similarity. and we call this perspective the clustering bias. and when you define a clustering problem, it's important to specify your perspective for similarity or for defining the similarity that will be used to group similar objects. because otherwise, the similarity is not well defined and one can have different ways to group objects. so let's look at the example here. you are seeing some objects, or some shapes, that are very similar to what you have seen on the first slide, but if i ask you to group these objects, again, you might feel there is more than here than on the previous slide. for example, you might think, well, we can steer a group by ships, so that would give us cluster that looks like this. however, you might also feel that, well, maybe the objects can be grouped based on their sizes. so that would give us a different way to cluster the data if we look at the size and look at the similarity in size. so as you can see clearly here, depending on the perspective, we'll get different clustering result. so that also clearly tells us that in order to evaluate the clustering without, we must use perspective. without perspective, it's very hard to define what is the best clustering result. so there are many examples of text clustering setup. and so for example, we can cluster documents in the whole text collection. so in this case, documents are the units to be clustered. we may be able to cluster terms. in this case, terms are objects. and a cluster of terms can be used to define concept, or theme, or a topic. in fact, there's a topic models that you have seen some previous lectures can give you cluster of terms in some sense if you take terms with high probabilities from word distribution. another example is just to cluster any text segments, for example, passages, sentences, or any segments that you can extract the former larger text objects. for example, we might extract the order text segments about the topic, let's say, by using a topic model. now once we've got those text objects then we can cluster the segments that we've got to discover interesting clusters that might also ripple in the subtopics. so this is a case of combining text clustering with some other techniques. and in general you will see a lot of text mining can be accurate combined in a flexible way to achieve the goal of doing more sophisticated mining and analysis of text data. we can also cluster fairly large text objects and by that, i just mean text objects may contain a lot of documents. so for example, we might cluster websites. each website is actually compose of multiple documents. similarly, we can also cluster articles written by the same author, for example. so we can trigger all the articles published by also as one unit for clustering. in this way, we might group authors together based on whether they're published papers or similar. for the more text clusters will be for the cluster to generate a hierarchy. that's because we can in general cluster any text object at different levels. so more generally why is text clustering interesting? well, it's because it's a very useful technique for text mining, particularly exploratory text analysis. and so a typical scenario is that you were getting a lot of text data, let's say all the email messages from customers in some time period, all the literature articles, etc. and then you hope to get a sense about what are the overall content of the connection, so for example, you might be interested in getting a sense about major topics, or what are some typical or representative documents in the connection. and clustering to help us achieve this goal. we sometimes also want to link a similar text objects together. and these objects might be duplicated content, for example. and in that case, such a technique can help us remove redundancy and remove duplicate documents. sometimes they are about the same topic and by linking them together we can have more complete coverage of a topic. we may also used text clustering to create a structure on the text data and sometimes we can create a hierarchy of structures and this is very useful for problems. we may also use text clustering to induce additional features to represent text data when we cluster documents together, we can treat each cluster as a feature. and then we can say when a document is in this cluster and then the feature value would be one. and if a document is not in this cluster, then the feature value is zero. and this helps provide additional discrimination that might be used for text classification as we will discuss later. so there are, in general, many applications of text clustering. and i just thought of two very specific ones. one is to cluster search results, for example, [inaudible] search engine can cluster such results so that the user can see overall structure of the results of return the fall query. and when the query's ambiguous this is particularly useful because the clusters likely represent different senses of ambiguous word. another application is to understand the major complaints from customers based on their emails, right. so in this case, we can cluster email messages and then find in the major clusters from there, we can understand what are the major complaints about them. [music",01_4-1-text-clustering-motivation
70,https://www.coursera.org/learn/text-mining,03_4-3-text-clustering-generative-probabilistic-models-part-2.en.txt,text-mining/05_week-4/02_week-4-lessons/03_4-3-text-clustering-generative-probabilistic-models-part-2.en.txt,"[sound] this lecture is a continuing discussion of generative probabilistic models for text clustering. in this lecture, we are going to continue talking about the text clustering, particularly, the generative probabilistic models. so this is a slide that you have seen earlier where we have written down the likelihood function for a document with two distributions, being a two component mixed model for document clustering. now in this lecture, we're going to generalize this to include the k clusters. now if you look at the formula and think about the question, how to generalize it, you'll realize that all we need is to add more terms, like what you have seen here. so you can just add more thetas and the probabilities of thetas and the probabilities of generating d from those thetas. so this is precisely what we are going to use and this is the general presentation of the mixture model for document clustering. so as more cases would follow these steps in using a generating model first, think about our data. and so in this case our data is a collection of documents, end documents denoted by d sub i, and then we talk about the other models, think of other modelling. in this case, we design a mixture of k unigram language models. it's a little bit different from the topic model, but we have similar parameters. we have a set of theta i's that denote that our distributions corresponding to the k unigram language models. we have p of each theta i as a probability of selecting each of the k distributions we generate the document. now note that although our goal is to find the clusters and we actually have used a more general notion of a probability of each cluster and this as you will see later, will allow us to assign a document to the cluster that has the highest probability of being able to generate the document. so as a result, we can also recover some other interesting properties, as you will see later. so the model basically would make the following assumption about the generation of a document. we first choose a theta i according to probability of theta i, and then generate all the words in the document using this distribution. note that it's important that we use this distribution all the words in the document. this is very different from topic model. so the likelihood function would be like what you are seeing here. so you can take a look at the formula here, we have used the different notation here in the second line of this equation. you are going to see now the notation has been changed to use unique word in the vocabulary, in the product instead of particular position in the document. so from x subject to w, is a change of notation and this change allows us to show the estimation formulas more easily. and you have seen this change also in the topic model presentation, but it's basically still just a product of the probabilities of all the words. and so with the likelihood function, now we can talk about how to do parameter estimation. here we can simply use the maximum likelihood estimator. so that's just a standard way of doing things. so all should be familiar to you now. it's just a different model. so after we have estimated parameters, how can we then allocate clusters to the documents? well, let's take a look at the this situation more closely. so we just repeated the parameters here for this mixture model. now if you think about what we can get by estimating such a model, we can actually get more information than what we need for doing clustering, right? so theta i for example, represents the content of cluster i, this is actually a by-product, it can help us summarize what the cluster is about. if you look at the top terms in this cluster or in this word distribution and they will tell us what the cluster is about. p of theta i can be interpreted as indicating the size of cluster because it tells us how likely the cluster would be used to generate the document. the more likely a cluster is used to generate a document, we can assume the larger the cluster size is. note that unlike in plsa and this probability of theta i is not dependent on d. now you may recall that the topic you chose at each document actually depends on d. that means each document can have a potentially different choice of topics, but here we have a generic choice probability for all the documents. but of course, even a particular document that we still have to infer which topic is more likely to generate the document. so in that sense, we can still have a document dependent probability of clusters. so now let's look at the key problem of assigning documents to clusters or assigning clusters to documents. so that's the computer c sub d here and this will take one of the values in the range of one through k to indicate which cluster should be assigned to d. now first you might think about a way to use likelihood on it and that is to assign d to the cluster corresponding to the topic of theta i, that most likely has been used to generate d. so that means we're going to choose one of those distributions that gives d the highest probability. in other words, we see which distribution has the content that matches our d at the [inaudible]. intuitively that makes sense, however, this approach does not consider the size of clusters, which is also a available to us and so a better way is to use the likelihood together with the prior, in this case the prior is p of theta i. and together, that is, we're going to use the base formula to compute the posterior probability of theta, given d. and if we choose theta .based on this posterior probability, we would have the following formula that you see here on the bottom of this slide. and in this case, we're going to choose the theta that has a large p of theta i, that means a large cluster and also a high probability of generating d. so we're going to favor a cluster that's large and also consistent with the document. and that intuitively makes sense because the chance of a document being a large cluster is generally higher than in a small cluster. so this means once we can estimate the parameters of the model, then we can easily solve the problem of document clustering. so next, we'll have to discuss how to actually compute the estimate of the model. [music",03_4-3-text-clustering-generative-probabilistic-models-part-2
71,https://www.coursera.org/learn/text-mining,02_4-2-text-clustering-generative-probabilistic-models-part-1.en.txt,text-mining/05_week-4/02_week-4-lessons/02_4-2-text-clustering-generative-probabilistic-models-part-1.en.txt,"[sound] this lecture is about generating probabilistic models for text clustering. in this lecture, we're going to continue discussing text clustering, and we're going to introduce generating probabilistic models as a way to do text clustering. so this is the overall plan for covering text clustering. in the previous lecture, we have talked about what is text clustering and why text clustering is interesting. in this lecture, we're going to talk about how to do text clustering. in general, as you see on this slide, there are two kinds of approaches. one is generating probabilistic models, which is the topic of this lecture. and later, we'll also discuss similarity-based approaches. so to talk about generating models for text clustering, it would be useful to revisit the topic mining problem using topic models, because the two problems are very similar. this is a slide that you have seen earlier in the lecture on topic model. here we show that we have input of a text collection c and a number of topics k, and vocabulary v. and we hope to generate as output two things. one is a set of topics denoted by theta i's, each is awarded distribution and the other is pi i j. these are the probabilities that each document covers each topic. so this is a topic coverage and it's also visualized here on this slide. you can see that this is what we can get by using a topic model. now, the main difference between this and the text clustering problem is that here, a document is assumed to possibly cover multiple topics. and indeed, in general, a document will be covering more than one topic with nonzero probabilities. in text clustering, however, we only allow a document to cover one topic, if we assume one topic is a cluster. so that means if we change the problem definition just slightly by assuming that each document that can only be generated by using precisely one topic. then we'll have a definition of the clustering problem as you'll hear. so here the output is changed so that we no longer have the detailed coverage distributions pi i j. but instead, we're going to have a cluster assignment decisions, ci. and ci is a decision for the document i. and c sub i is going to take a value from 1 through k to indicate one of the k clusters. and basically tells us that d i is in which cluster. as illustrated here, we no longer have multiple topics covered in each document. it is precisely one topic. although which topic is still uncertain. there is also a connection with the problem of mining one topic that we discussed earlier. so here again, it's a slide that you have seen before and here we hope to estimate a topic model or distribution based on precisely one document. and that's when we assume that this document, it covers precisely one topic. but we can also consider some variations of the problem. for example, we can consider there are n documents, each covers a different topic, so that's n documents, and topics. of course, in this case, these documents are independent, and these topics are also independent. but, we can further allow these documents with share topics, and we can also assume that we are going to assume there are fewer topics than the number of documents, so these documents must share some topics. and if we have n documents that share k topics, then we'll again have precisely the document clustering problem. so because of these connections, naturally we can think about how to use a probabilistically generative model to solve the problem of text clustering. so the question now is what generative model can be used to do clustering? as in all cases of designing a generative model, we hope the generative model would adopt the output that we hope to generate or the structure that we hope to model. so in this case, this is a clustering structure, the topics and each document that covers one topic. and we hope to embed such preferences in the generative model. but, if you think about the main difference between this problem and the topic model that we talked about earlier. and you will see a main requirement is how can we force every document to be generated from precisely one topic, instead of k topics, as in the topic model? so let's revisit the topic model again in more detail. so this is a detailed view of a two component mixture model. when we have k components, it looks similar. so here we see that when we generate a document, we generate each word independent. and when we generate each word, but first make a choice between these distributions. we decide to use one of them with probability. so p of theta 1 is the probability of choosing the distribution on the top. now we first make this decision regarding which distribution should be used to generate the word. and then we're going to use this distribution to sample a word. now note that in such a generative model, the decision on which distribution to use for each word is independent. so that means, for example, the here could have generated from the second distribution, theta 2 whereas text is more likely generated from the first one on the top. that means the words in the document that could have been generated in general from multiple distributions. now this is not what we want, as we said, for text clustering, for document clustering, where we hoped this document will be generated from precisely one topic. so now that means we need to modify the model. but how? well, let's first think about why this model cannot be used for clustering. and as i just said, the reason is because it has allowed multiple topics to contribute a word to the document. and that causes confusion because we're not going to know which cluster this document is from. and it's, more importantly it's violating our assumption about the partitioning of documents in the clusters. if we really have one topic to correspond it to one cluster of documents, then we would have a document that we generate from precisely one topic. that means all the words in the document must have been generated from precisely one distribution. and this is not true for such a topic model that we're seeing here. and that's why this cannot be used for clustering because it did not ensure that only one distribution has been used to generate all the words in one document. so if you realize this problem, then we can naturally design alternative mixture model for doing clustering. so this is what you're seeing here. and we again have to make a decision regarding which distribution to use to generate this document because the document could potentially be generated from any of the k word distributions that we have. but this time, once we have made a decision to choose one of the topics, we're going to stay with this regime to generate all the words in the document. and that means, once we have made a choice of the distribution in generating the first word, we're going to go stay with this distribution in generating all of the other words in the document. so, in other words, we only make the choice once for, basically, we make the decision once for this document and this state was just to generate all the words. similarly if i had choosing the second distribution, theta sub 2 here, you can see which state was this one. and then generate the entire document of d. now, if you compare this picture with the previous one, you will see the decision of using a particular distribution is made just once for this document, in the case of document clustering. but in the case of topic model, we have to make as many decisions as the number of words in the document. because for each word, we can make a potentially different decision. and that's the key difference between the two models. but this is obviously also a mixed model so we can just group them together as one box to show that this is the model that will give us a probability of the document. now, inside of this model, there is also this switch of choosing a different distribution. and we don't observe that so that's a mixture model. and of course a main problem in document clustering is to infer which distribution has been used to generate a document and that would allow us to recover the cluster identity of a document. so it will be useful to think about the difference from the topic model as i have also mentioned multiple times. and there are mainly two differences, one is the choice of using that particular distribution is made just once for document clustering. whereas in the topic model, it's made it multiple times for different words. the second is that word distribution, here, is going to be used to regenerate all the words for a document. but, in the case of one distribution doesn't have to generate all the words in the document. multiple distribution could have been used to generate the words in the document. let's also think about a special case, when one of the probability of choosing a particular distribution is equal to 1. now that just means we have no uncertainty now. we just stick with one particular distribution. now in that case, clearly, we will see this is no longer mixture model, because there's no uncertainty here and we can just use precisely one of the distributions for generating a document. and we're going back to the case of estimating one order distribution based on one document. so that's a connection that we discussed earlier. now you can see it more clearly. so as in all cases of using a generative model to solve a problem, we first look at data and then think about how to design the model. but once we design the model, the next step is to write down the likelihood function. and after that we're going to look at the how to estimate the parameters. so in this case, what's the likelihood function? it's going to be very similar to what you have seen before in topic models but it will be also different. now if you still recall what the likelihood function looks like in then you will realize that in general, the probability of observing a data point from mixture model is going to be a sum of all the possibilities of generating the data. in this case, so it's going to be a sum over these k topics, because every one can be user generated document. and then inside is the sum you can still recall what the formula looks like, and it's going to be the product of two probabilities. one is the probability of choosing the distribution, the other is the probability of observing a particular datapoint from that distribution. so if you map this kind of formula to our problem here, you will see the probability of observing a document d is basically a sum in this case of two different distributions because we have a very simplified situation of just two clusters. and so in this case, you can see it's a sum of two cases. in each case, it's indeed the probability of choosing the distribution either theta 1 or theta 2. and then, the probability is multiplied by the probability of observing this document from this particular distribution. and if you further expanded this probability of observing the whole document, we see that it's a product of observing each word x sub i. and here we made the assumption that each word is generated independently, so the probability of the whole document is just a product of the probability of each word in the document. so this form should be very similar to the topic model. but it's also useful to think about the difference and for that purpose, i am also copying the probability of topic model of these two components here. so here you can see the formula looks very similar or in many ways, they are similar. but there is also some difference. and in particular, the difference is on the top. you see for the mixture model for document clustering, we first take a product, and then take a sum. and that's corresponding to our assumption of first make a choice of choosing one distribution and then stay with the distribution, it'll generate all the words. and that's why we have the product inside the sum. the sum corresponds to the choice. now, in topic model, we see that the sum is actually inside the product. and that's because we generated each word independently. and that's why we have the product outside, but when we generate each word we have to make a decision regarding which distribution we use so we have a sum there for each word. but in general, these are all mixture models and we can estimate these models by using the algorithm, as we will discuss more later. [music",02_4-2-text-clustering-generative-probabilistic-models-part-1
72,https://www.coursera.org/learn/text-mining,07_4-7-text-categorization-motivation.en.txt,text-mining/05_week-4/02_week-4-lessons/07_4-7-text-categorization-motivation.en.txt,"[sound] this lecture is about text categorization. in this lecture, we're going to talk about text categorization. this is a very important technique for text data mining and analytics. it is relevant to discovery of various different kinds of knowledge as shown here. first, it's related to topic mining and analysis. and, that's because it has to do with analyzing text to data based on some predefined topics. secondly, it's also related to opinion mining and sentiment analysis, which has to do with discovery knowledge about the observer, the human sensor. because we can categorize the authors, for example, based on the content of the articles that they have written, right? we can, in general, categorize the observer based on the content that they produce. finally, it's also related to text-based prediction. because, we can often use text categorization techniques to predict some variables in the real world that are only remotely related to text data. and so, this is a very important technique for text to data mining. this is the overall plan for covering the topic. first, we're going to talk about what is text categorization and why we're interested in doing that in this lecture? and now, we're going to talk about how to do text categorization for how to evaluate the categorization results. so, the problem of text categorization is defined as follows. we're given a set of predefined categories possibly forming a hierarchy or so. and often, also a set of training examples or training set of labeled text objects which means the text objects have already been enabled with known categories. and then, the task is to classify any text object into one or more of these predefined categories. so, the picture on this slide shows what happens. when we do text categorization, we have a lot of text objects to be processed by a categorization system and the system will, in general, assign categories through these documents. as shown on the right and the categorization results, and we often assume the availability of training examples and these are the documents that are tag with known categories. and these examples are very important for helping the system to learn patterns in different categories. and, this would further help the system then know how to recognize the categories of new text objects that it has not seen. so, here are some specific examples of text categorization. and in fact, there are many examples, here are just a few. so first, text objects can vary, so we can categorize a document, or a passage, or a sentence, or collections of text. as in the case of clustering, the units to be analyzed can vary a lot, so this creates a lot of possibilities. secondly, categories can also vary. allocate in general, there's two major kinds of categories. one is internal categories. these are categories that categorize content of text object. for example, topic categories or sentiment categories and they generally have to do with the content of the text objects throughout the categorization of the content. the other kind is external categories that can characterize an entity associated with the text object. for example, authors are entities associated with the content that they produce. and so, we can use their content in determining which author has written, which part, for example, and that's called author attribution. or, we can have any other mininal categories associate with text data as long as there is minimal connection between the entity and text data. for example, we might collect a lot of reviews about a restaurant or a lot of reviews about a product, and then, this text data can help us infer properties of a product or a restaurant. in that case, we can treat this as a categorization problem. we can categorize restaurants or categorize products based on their corresponding reviews. so, this is an example for external category. here are some specific examples of the applications. news categorization is very common as being started a lot. news agencies would like to assign predefined categories to categorize news generated everyday. and, these virtual article categorizations are not important aspect. for example, in the biomedical domain, there's mesh annotations. mesh stands for medical subject heading, and this is ontology of terms, characterize content of literature articles in detail. another example of application is spam email detection or filtering, right? so, we often have a spam filter to help us distinguish spams from legitimate emails and this is clearly a binary classification problem. sentiment categorization of product reviews or tweets is yet another kind of applications where we can categorize, comparing to positive or negative or positive and negative or neutral. so, you can have send them to categories, assign the two text content. another application is automatic email routing or sorting, so, you might want to automatically sort your emails into different folders and that's one application of text categorization where each folder is a category. the results are another important kind of applications of routing emails to the right person to handle, so, in helpdesk, email messaging is generally routed to a particular person to handle. different people tend to handle different kinds of requests. and in many cases, a person would manually assign the messages to the right people. but, if you can imagine, you can't be able to automatically text categorization system to help routing request. and, this is a class file, the incoming request in the one of the categories where each category actually corresponds to a person to handle the request. and finally, author attribution, as i just mentioned, is yet another application, and it's another example of using text to actually infer properties of some other entities. and, there are also many variants of the problem formulation. and so, first, we have the simplest case, which is a binary categorization, where there are only two categories. and, there are many examples like that, information retrieval or search engine. applications with one distinguishing relevant documents from non-relevant documents for a particular query. spam filtering just distinguishing spams from non-spams, so, also two categories. sometimes, classifications of opinions can be in two categories, positive and a negative. a more general case would be k-category categorization and there are also many applications like that, there could be more than two categories. so, topic categorization is often such an example where you can have multiple topics. email routing would be another example when you may have multiple folders or if you route the email to the right person to handle it, then there are multiple people to classify. so, in all these cases, there are more than two kinds of categories. another variation is to have hierarchical categorization where categories form a hierarchy. again, topical hierarchy is very common. yet another variation is joint categorization. that's when you have multiple categorization tasks that are related and then you hope to kind of join the categorization. further leverage the dependency of these tasks to improve accuracy for each individual task. among all these binary categorizations is most fundamental and part of it also is because it's simple and probably it's because it can actually be used to perform all the other categorization tasks. for example, a k-category categorization task can be actually performed by using binary categorization. basically, we can look at each category separately and then the binary categorization problem is whether object is in this category or not, meaning in other categories. and, the hierarchical categorization can also be done by progressively doing flat categorization at each level. so, we have, first, we categorize all the objects into, let's say, a small number of high-level categories, and inside each category, we have further categorized to sub-categories, etc. so, why is text categorization important? well, i already showed that you, several applications but, in general, there are several reasons. one is text categorization helps enrich text representation and that's to achieve more understanding of text data that's all it was useful for text analysis. so, now with categorization text can be represented in multiple levels. the keyword conditions that's often used for a lot text processing tasks. but we can now also add categories and they provide two levels of transition. semantic categories assigned can also be directly or indirectly useful for application. so, for example, semantic categories could be already very useful or other attribution might be directly useful. another example is when semantic categories can facilitate aggregation of text content and this is another case of applications of text categorization. for example, if we want to know the overall opinions about a product, we could first categorize the opinions in each individual view as positive or negative and then, that would allow us to easy to aggregate all the sentiment, and it would tell us about the 70% of the views are positive and 30% are negative, etc. so, without doing categorization, it will be much harder to aggregate such opinions to provide a concise way of coding text in some sense based on all of the vocabulary. and, sometimes you may see in some applications, text with categorizations called a text coded, encoded with some control of vocabulary. the second kind of reasons is to use text categorization to infer properties of entities, and text categories allows us to infer the properties of such entities that are associate with text data. so, this means we can use text categorization to discover knowledge about the world. in general, as long as we can associate the entity with text of data, we can always the text of data to help categorize the corresponding entities. so, it's used for single information network that will connect the other entities with text data. the obvious entities that can be directly connected are authors. but, you can also imagine the author's affiliations or the author's age and other things can be actually connected to text data indirectly. once we have made the connection, then we can make a prediction about those values. so, this is a general way to allow us to use text mining through, so the text categorization to discover knowledge about the world. very useful, especially in big text data analytics where we are often just using text data as extra sets of data extracted from humans to infer certain decision factors often together with non-textual data. specifically with text, for example, we can also think of examples of inferring properties of entities. for example, discovery of non-native speakers of a language. and, this can be done by categorizing the content of speakers. another example is to predict the party affiliation of a politician based on the political speech. and, this is again an example of using text data to infer some knowledge about the real world. in nature, the problems are all the same, and that's as we defined and it's a text categorization problem. [music",07_4-7-text-categorization-motivation
73,https://www.coursera.org/learn/text-mining,06_4-6-text-clustering-evaluation.en.txt,text-mining/05_week-4/02_week-4-lessons/06_4-6-text-clustering-evaluation.en.txt,"[music] this lecture is about evaluation of text clustering. so far we have talked about multiple ways of doing text clustering but how do we know which method works the best? so this has to do with evaluation. now to talk about evaluation one must go back to the clustering bias that we introduced at the beginning. because two objects can be similar depending on how you look at them, we must clearly specify the perspective of similarity. without that, the problem of clustering is not well defined. so this perspective is also very important for evaluation. if you look at this slide, and you can see we have two different ways to cluster these shapes, and if you ask a question, which one is the best, or which one is better? you actually see, there's no way to answer this question without knowing whether we'd like to cluster based on shapes, or cluster based on sizes. and that's precisely why the perspective on clustering bias is crucial for evaluation. in general, we can evaluate text clusters in two ways, one is direct evaluation, and the other indirect evaluation. so in direct evaluation, we want to answer the following questions, how close are the system-generated clusters to the ideal clusters that are generated by humans? so the closeness here can be assessed from multiple perspectives and that will help us characterize the quality of cluster result in multiple angles, and this is sometimes desirable. now we also want to quantify the closeness because this would allow us to easily compare different measures based on their performance figures. and finally, you can see, in this case, we essentially inject the clustering bias by using humans, basically humans would bring in the the need or desire to clustering bias. now, how do we do that exactly? well, the general procedure would look like this. given a test set which consists of a lot of text objects, we can have humans to create the ideal clustering result, that is, we're going to ask humans to partition the objects to create the gold standard. and they will use their judgments based on the need of a particular application to generate what they think are the best clustering results, and this would be then used to compare with the system generated clusters from the same test set. and ideally, we want the system results to be the same as the human generated results, but in general, they are not going to be the same. so we would like to then quantify the similarity between the system-generated clusters and the gold standard clusters. and this similarity can also be measure from multiple perspectives and this will give us various meshes to quantitatively evaluate a cluster, a clustering result. and some of the commonly used measures include the purity, which measures whether a cluster has a similar object from the same cluster, in the gold standard. and normalized mutual information is a commonly used measure which basically measures based on the identity of cluster of object in the system generally. how well can you predict the cluster of the object in the gold standard or vice versa? and mutual information captures, the correlation between these cluster labels and normalized mutual information is often used for quantifying the similarity for this evaluation purpose, f measure is another possible measure. now again a thorough discussion of this evaluation and these evaluation issues would be beyond the scope of this course. i've suggested some reading in the end that you can take a look at to know more about that. so here i just want to discuss some high level ideas that would allow you to think about how to do evaluation in your applications. the second way to evaluate text clusters is to do indirect evaluation. so in this case the question to answer is, how useful are the clustering results for the intended applications? now this of course is application specific question, so usefulness is going to depend on specific applications. in this case, the clustering bias is imposed by the independent application as well, so what counts as a best cluster result would be dependent on the application. now procedure wise we also would create a test set with text objects for the intended application to quantify the performance of the system. in this case, what we care about is the contribution of clustering to some application so we often have a baseline system to compare with. this could be the current system for doing something, and then you hope to add a clustering to improve it, or the baseline system could be using a different clustering method. and then what you are trying to experiment with, and you hope to have better idea of word clustering. so in any case you have a baseline system work with, and then you add a clustering algorithm to the baseline system to produce a clustering system. and then we have to compare the performance of your clustering system and the baseline system in terms of the performance measure for that particular application. so in this case we call it indirect evaluation of clusters because there's no explicit assessment of the quality of clusters, but rather it's to assess the contribution of clusters to a particular application. so, to summarize text clustering, it's a very useful unsupervised general text mining technique, and it's particularly useful for obtaining an overall picture of the text content. and this is often needed to explore text data, and this is often the first step when you deal with a lot of text data. the second application or second kind of applications is through discover interesting clustering structures in text data and these structures can be very meaningful. there are many approaches that can be used to form text clustering and we discussed model based approaches and some narrative based approaches. in general, strong clusters tend to show up no matter what method is used. also the effectiveness of a method highly depends on whether the desired clustering bias is captured appropriately, and this can be done either through using the right generating model, the model design appropriate for the clustering, or the right similarity function expressly define the bias. deciding the optimal number of customers is a very difficult problem for order cluster methods, and that's because it's unsupervised algorithm, and there's no training there how to guide us to select the best number of clusters. now sometimes you may see some methods that can automatically determine the number of clusters, but in general that has some implied application of clustering bias there and that's just not specified. without clearly defining a clustering bias, it's just impossible to say the optimal number of cluster is what, so this important to keep in mind. and i should also say sometimes we can also use application to determine the number of clusters, for example, if you're clustering search results, then obviously you don't want to generate the 100 clusters, so the number can be dictated by the interface design. in other situations, we might be able to use the fitness to data to assess whether we've got a good number of clusters to explain our data well. and to do that, you can vary the number of clusters and watch how well you can fit the data. in general when you add a more components to a mixed model you should fit the data better because you, you don't, you can always set the probability of using the new component as zero. so you can't in general fit the data worse than before, but the question is as you add more components would you be able to significantly improve the fitness of the data and that can be used to determine the right number of clusters. and finally evaluation of clustering results, this kind can be done both directly and indirectly, and we often would like to do both in order to get a good sense about how well our method works. so here's some suggested reading and this is particularly useful to better understand how the matches are calculated and clustering in general [music",06_4-6-text-clustering-evaluation
74,https://www.coursera.org/learn/text-mining,05_4-5-text-clustering-similarity-based-approaches.en.txt,text-mining/05_week-4/02_week-4-lessons/05_4-5-text-clustering-similarity-based-approaches.en.txt,"[music] this lecture is about the similarity-based approaches to text clustering. in this lecture we're going to to continue the discussion of how to do a text clustering. in particular, we're going to to cover different kinds of approaches than generative models, and that is similarity-based approaches. so the general idea of similarity-based clustering is to explicitly specify a similarity function to measure the similarity between two text objects. now this is in contrast with a generative model where we implicitly define the clustering bias by using a particular object to function like a [inaudible] function. the whole process is driven by optimizing the [inaudible,] but here we explicitly provide a view of what we think are similar. and this is often very useful because then it allows us to inject any particular view of similarity into the clustering program. so once we have a similarity function, we can then aim at optimally partitioning, to partitioning the data into clusters or into different groups. and try to maximize the inter-group similarity and minimize the inter-group similarity. that is to ensure the objects that are put into the same group to be similar, but the objects that are put into different groups to be not similar. and these are the general goals of clustering, and there is often a trade off between achieving both goals. now there are many different methods for doing similarity based clustering, and in general i think we can distinguish the two strategies at high level. one is to progressively construct the hierarchy of clusters, and so this often leads to hierarchical clustering. and we can further distinguish it two ways, to construct a hierarchy depending on whether we started with the collection to divide the connection. or started with individual objectives and gradually group them together, so one is bottom-up that can be called agglomerative. well we gradually group a similar objects into larger and larger clusters. until we group everything together, the other is top-down or divisive, in this case we gradually partition the whole data set into smaller and smaller clusters. the other general strategy is to start with the initial tentative clustering and then iteratively improve it. and this often leads for a flat clustering, one example is k-means, so as i just said, there are many different clustering methods available. and a full coverage of all the clustering methods would be beyond the scope of this course. but here we are going to talk about the two representative methods, in some detail one is hierarchical agglomerative clustering or hac, the other is k-means. so first of it we'll get the agglomerative hierarchical clustering, in this case, we're given a similarity function to measure similarity between two objects. and then we can gradually group similar objects together in a bottom-up fashion to form larger and larger groups. and they always form a hierarchy, and then we can stop when some stopping criterion is met. it could be either some number of clusters has been achieved or the threshold for similarity has been reached. there are different variations here, and they mainly differ in the ways to compute a group similarity. based on the individual objects similarity, so let's illustrate how again induced a structure based on just similarity. so start with all the text objects and we can then measure the similarity between them. of course based on the provided similarity function, and then we can see which pair has the highest similarity. and then just group them together, and then we're going to see which pair is the next one to group. maybe these two now have the highest similarity, and then we're going to gradually group them together. and then every time we're going to pick the highest similarity, the similarity of pairs to group. this will give us a binary tree eventually to group everything together. now, depending on our applications, we can use the whole hierarchy as a structure for browsing, for example. or we can choose a cutoff, let's say cut here to get four clusters, or we can use a threshold to cut. or we can cut at this high level to get just two clusters, so this is a general idea, now if you think about how to implement this algorithm. you'll realize that we have everything specified except for how to compute group similarity. we are only given the similarity function of two objects, but as we group groups together, we also need to assess the similarity between two groups. there are also different ways to do that and there are the three popular methods. single-link, complete-link, and average-link, so given two groups and the single-link algorithm. is going to define the group similarity as the similarity of the closest pair of the two groups. complete-link defines the similarity of the two groups as the similarity of the farthest system pair. average-link defines the similarity as average of similarity of all the pairs of the two groups. so it's much easier to understand the methods by illustrating them, so here are two groups, g1 and g2 with some objects in each group. and we know how to compute the similarity between two objects, but the question now is, how can we compute the similarity between the two groups? and then we can in general base this on the similarities of the objects in the two groups. so, in terms of single-link and we're just looking at the closest pair so in this case, these two paired objects will defined the similarities of the two groups. as long as they are very close, we're going to say the two groups are very close so it is an optimistic view of similarity. the complete link on the other hand were in some sense pessimistic, and by taking the similarity of the two farthest pair as the similarity for the two groups. so we are going to make sure that if the two groups are having a high similarity. then every pair of the two groups, or the objects in the two groups will have, will be ensured to have high similarity. now average link is in between, so it takes the average of all these pairs. now these different ways of computing group similarities will lead to different clustering algorithms. and they would in general give different results, so it's useful to take a look at their differences and to make a comparison. first, single-link can be expected to generally the loose clusters, the reason is because as long as two objects are very similar in the two groups, it will bring the two groups together. if you think about this as similar to having parties with people, then it just means two groups of people would be partying together. as long as in each group there is a person that is well connected with the other group. so the two leaders of the two groups can have a good relationship with each other and then they will bring together the two groups. in this case, the cluster is loose, because there's no guarantee that other members of the two groups are actually very close to each other. sometimes they may be very far away, now in this case it's also based on individual decisions, so it could be sensitive to outliers. the complete-link is in the opposite situation, where we can expect the clusters to be tight. and it's also based on individual decision so it can be sensitive to outliers. again to continue the analogy to having a party of people, then complete-link would mean when two groups come together. they want to ensure that even the people that are unlikely to talk to each other would be comfortable. always talking to each other, so ensure the whole class to be coherent. the average link of clusters in between and as group decision, so it's going to be insensitive to outliers, now in practice which one is the best. well, this would depend on the application and sometimes you need a lose clusters. and aggressively cluster objects together that maybe single-link is good. but other times you might need a tight clusters and a complete-link might be better. but in general, you have to empirically evaluate these methods for your application to know which one is better. now, next let's look at another example of a method for similarity-based clustering. in this case, which is called k-means clustering, we will represent each text object as a term vector. and then assume a similarity function defined on two objects, now we're going to start with some tentative clustering results by just selecting k randomly. selected vectors as centroids of k clusters and treat them as centers as if they represent, they each represent a cluster. so this gives us the initial tentative cluster, then we're going to iteratively improve it. and the process goes like this, and once we have these centroids decide. we're going to assign a vector to the cluster whose centroid is closest to the current vector. so basically we're going to measure the distance between this vector, and each of the centroids, and see which one is the closest to this one. and then just put this object into that cluster, this is to have tentative assignment of objects into clusters. and we're going to partition all the objects into k clusters based on our tentative clustering and centroids. then we can do re-compute the centroid based on the locate the object in each cluster. and this is to adjust the centroid, and then we can repeat this process until the similarity-based objective function. in this case, it's within cluster sum of squares converges, and theoretically we can show that. this process actually is going to minimize the within cluster sum of squares where define object and function. given k clusters, so it can be also shown, this process will converge to a local minimum. i think about this process for a moment, it might remind you the algorithm for mixture model. indeed this algorithm is very similar to the algorithm for the mixture model for clustering. more specifically we also initialize these parameters in the algorithm so the random initialization is similar. and then in the algorithm, you may recall that, we're going to repeat e-step and m-step to improve our parameter estimation. in this case, we're going to improve the clustering result iteratively by also doing two steps. and in fact that the two steps are very similar to algorithm, in that when we locate the vector into one of the clusters based on our tentative clustering. it's very similar to inferring the distribution that has been used to generate the document, the mixture model. so it is essentially similar to e-step, so what's the difference, well the difference is here. we don't make a probabilistic allocation as in the case of e-step, the brother will make a choice. we're going to make a call if this, there upon this closest to cluster two, then we're going to say you are in cluster two. so there's no choice, and we're not going to say, you assume the set is belonging to a cluster two. and so we're not going to have a probability, but we're just going to put one object into precisely one cluster. in the e-step however, we do a probability location, so we split in counts. and we're not going to say exactly which distribution has been used to generate a data point. now next, we're going to adjust the centroid, and this is very similar to m-step where we re-estimate the parameters. that's when we'll have a better estimate of the parameter, so here we'll have a better clustering result by adjusting the centroid. and note that centroid is based on the average of the vectors in the cluster. so this is also similar to the m-step where we do counts,pull together counts and then normalize them. the difference of course is also because of the difference in the e-step, and we're not going to consider probabilities when we count the points. in this case, k-means we're going to all make count of the objects as allocated to this cluster. and this is only a subset of data points, but in the algorithm, we in principle consider all the data points based on probabilistic allocations. but in nature they are very similar and that's why it's also maximizing well defined object of functions. and it's guaranteed to convert local minimum, so to summarize our discussion of clustering methods. we first discussed model based approaches, mainly the mixture model. here we use the implicit similarity function to define the clustering bias. there is no explicit define similarity function, the model defines clustering bias and the clustering structure is built into a generative model. that's why we can use potentially a different model to recover different structure. complex generative models can be used to discover complex clustering structures. we do not talk about in full, but we can easily design, generate a model to generate a hierarchical clusters. we can also use prior to further customize the clustering algorithm to for example control the topic of one cluster or multiple clusters. however one disadvantage of this approach is that there is no easy way to directly control the similarity measure. sometimes we want to that, but it's very hard to inject such a special definition of similarity into such a model. we also talked about similarity-based approaches, these approaches are more flexible to actually specify similarity functions. but one major disadvantage is that their objective function is not always very clear. the k-means algorithm has clearly defined the objective function, but it's also very similar to a model based approach. the hierarchical clustering algorithm on the other hand is harder to specify the objective function. so it's not clear what exactly is being optimized, both approaches can generate term clusters. and document clusters, and term clusters can be in general, generated by representing each term with some text content. for example, take the context of each term as a representation of each term, as we have done in semantic relation learning. and then we can certainly cluster terms, based on actual text [inaudible]. of course, term clusters can be generated by using generative models as well, as we've seen. [music",05_4-5-text-clustering-similarity-based-approaches
75,https://www.coursera.org/learn/text-mining,09_4-9-text-categorization-generative-probabilistic-models.en.txt,text-mining/05_week-4/02_week-4-lessons/09_4-9-text-categorization-generative-probabilistic-models.en.txt,"[sound] this lecture is about how to use generative probabilistic models for text categorization. there are in general about two kinds of approaches to text categorization by using machine learning. one is by generating probabilistic models. the other is discriminative approaches. in this lecture, we're going to talk about the generative models. in the next lecture, we're going to talk about discriminative approaches. so the problem of text categorization is actually a very similar to document clustering. in that, we'll assume that each document it belongs to one category or one cluster. the main difference is that in clustering we don't really know what are the predefined categories are, what are the clusters. in fact, that's the goal of text clustering. we want to find such clusters in the data. but in the case of categorization, we are given the categories. so we kind of have pre-defined categories and then based on these categories and training data, we would like to allocate a document to one of these categories or sometimes multiple categories. but because of the similarity of the two problems, we can actually get the document clustering models for text categorization. and we understand how we can use generated models to do text categorization from the perspective of clustering. and so, this is a slide that we've talked about before, about text clustering, where we assume there are multiple topics represented by word distributions. each topic is one cluster. so once we estimated such a model, we faced a problem of deciding which cluster document d should belong to. and this question boils down to decide which theta i has been used to generate d. now, suppose d has l words represented as xi here. now, how can you compute the probability that a particular topic word distribution zeta i has been used to generate this document? well, in general, we use base wall to make this influence and you can see this prior information here that we need to consider if a topic or cluster has a higher prior then it's more likely that the document has been from this cluster. and so, we should favor such a cluster. the other is a likelihood part, it's this part. and this has to do with whether the topic word of distribution can explain the content of this document well. and we want to pick a topic that's high by both values. so more specifically, we just multiply them together and then choose which topic has the highest product. so more rigorously, this is what we'd be doing. so we're going to choose the topic that would maximize. this posterior probability at the top of a given document gets posterior because this one, p of the i, is the prior. that's our belief about which topic is more likely, before we observe any document. but this conditional probability here is the posterior probability of the topic after we have observed the document of d. and base wall allows us to update this probability based on the prior and i have shown the details, below here you can see how the prior here is related to the posterior, on the left-hand side. and this is related to how well this word distribution explains the document here, and the two are related in this way. so to find the topic that has the higher posterior probability here it's equivalent to maximize this product as we have seen also, multiple times in this course. and we can then change the probability of document in your product of the probability of each word, and that's just because we've made an assumption about independence in generating each word. so this is just something that you have seen in document clustering. and we now can see clearly how we can assign a document to a category based on the information about word distributions for these categories and the prior on these categories. so this idea can be directly adapted to do categorization. and this is precisely what a naive bayes classifier is doing. so here it's most really the same information except that we're looking at the categorization problem now. so we assume that if theta i represents category i accurately, that means the word distribution characterizes the content of documents in category i accurately. then, what we can do is precisely like what we did for text clustering. namely we're going to assign document d to the category that has the highest probability of generating this document. in other words, we're going to maximize this posterior probability as well. and this is related to the prior and the [inaudible] as you have seen on the previous slide. and so, naturally we can decompose this [inaudible] into a product as you see here. now, here, i change the notation so that we will write down the product as product of all the words in the vocabulary, and even though the document doesn't contain all the words. and the product is still accurately representing the product of all the words in the document because of this count here. when a word, it doesn't occur in the document. the count would be 0, so this time will just disappear. so if actively we'll just have the product over other words in the document. so basically, with naive bayes classifier, we're going to score each category for the document by this function. now, you may notice that here it involves a product of a lot of small probabilities. and this can cause and the four problem. so one way to solve the problem is thru take logarithm of this function, which it doesn't changes all the often these categories. but will helps us preserve precision. and so, this is often the function that we actually use to score each category and then we're going to choose the category that has the highest score by this function. so this is called an naive bayes classifier, now the keyword base is understandable because we are applying a base rule here when we go from the posterior probability of the topic to a product of the likelihood and the prior. now, it's also called a naive because we've made an assumption that every word in the document is generated independently, and this is indeed a naive assumption because in reality they're not generating independently. once you see some word, then other words will more likely occur. for example, if you have seen a word like a text. than that mixed category, they see more clustering more likely to appear than if you have not the same text. but this assumption allows us to simplify the problem. and it's actually quite effective for many text categorization tasks. but you should know that this kind of model doesn't have to make this assumption. we could for example, assume that words may be dependent on each other. so that would make it a bigram analogy model or a trigram analogy model. and of course you can even use a mixture model to model what the document looks like in each category. so in nature, they will be all using base rule to do classification. but the actual generating model for documents in each category can vary. and here, we just talk about very simple case perhaps, the simplest case. so now the question is, how can we make sure theta i actually represents category i accurately? now in clustering, we learned that this category i or what are the distributions for category i from the data. but in our case, what can we do to make sure this theta i represents indeed category i. well if you think about the question, and you likely come up with the idea of using the training data. indeed in the textbook, we typically assume that there is training data available and those are the documents that unknown to have generator from which category. in other words, these are the documents with known categories assigned and of course human experts must do that. in here, you see that t1 represents the set of documents that are known to have the generator from category 1. and t2 represents the documents that are known to have been generated from category 2, etc. now if you look at this picture, you'll see that the model here is really a simplified unigram language model. it's no longer mixed modal, why? because we already know which distribution has been used to generate which documents. there's no uncertainty here, there's no mixing of different categories here. so the estimation problem of course would be simplified. but in general, you can imagine what we want to do is estimate these probabilities that i marked here. and what other probability is that we have to estimate it in order to do relation. well there are two kinds. so one is the prior, the probability of theta i and this indicates how popular each category is or how likely will it have observed the document in that category. the other kind is the water distributions and we want to know what words have high probabilities for each category. so the idea then is to just use observe the training data to estimate these two probabilities. and in general, we can do this separately for the different categories. that's just because these documents are known to be generated from a specific category. so once we know that, it's in some sense irrelevant of what other categories we are also dealing with. so now this is a statistical estimation problem. we have observed some data from some model and we want to guess the parameters of this model. we want to take our best guess of the parameters. and this is a problem that we have seen also several times in this course. now, if you haven't thought about this problem, haven't seen life based classifier. it would be very useful for you to pause the video for a moment and to think about how to solve this problem. so let me state the problem again. so let's just think about with category 1, we know there is one word of distribution that has been used to generate documents. and we generate each word in the document independently, and we know that we have observed a set of n sub 1 documents in the set of q1. these documents have been all generated from category 1. namely have been all generated using this same word distribution. now the question is, what would be your guess or estimate of the probability of each word in this distribution? and what would be your guess of the entire probability of this category? of course, this singular probability depends on how likely are you to see documents in other categories? so think for a moment, how do you use all this training data including all these documents that are known to be in these k categories, to estimate all these parameters? now, if you spend some time to think about this and it would help you understand the following few slides. so do spend some time to make sure that you can try to solve this problem, or do you best to solve the problem yourself. now if you have thought about and then you will realize the following to it. first, what's the bases for estimating the prior or the probability of each category. well this has to do with whether you have observed a lot of documents form that category. intuitively, you have seen a lot of documents in sports and very few in medical science. then you guess is that the probability of the sports category is larger or your prior on the category would be larger. and what about the basis for estimating the probability of where each category? well the same, and you'll be just assuming that words that are observed frequently in the documents that are known to be generated from a category will likely have a higher probability. and that's just a maximum naive bayes made of. indeed, that's what we can do, so this made the probability of which category and to answer the question, which category is most popular? then we can simply normalize, the count of documents in each category. so here you see n sub i denotes the number of documents in each category. and we simply just normalize these counts to make this a probability. in other words, we make this probability proportional to the size of training intercept in each category that's a size of the set t sub i. now what about the word distribution? well, we do the same. again this time we can do this for each category. so let's say, we're considering category i or theta i. so which word has a higher probability? well, we simply count the word occurrences in the documents that are known to be generated from theta i. and then we put together all the counts of the same word in the set. and then we just normalize these counts to make this distribution of all the words make all the probabilities off these words to 1. so in this case, you're going to see this is a proportional through the count of the word in the collection of training documents t sub i and that's denoted by c of w and t sub i. now, you may notice that we often write down probable estimate in the form of being proportional for certain numbers. and this is often sufficient, because we have some constraints on these distributions. so the normalizer is dictated by the constraint. so in this case, it will be useful for you to think about what are the constraints on these two kinds of probabilities? so once you figure out the answer to this question, and you will know how to normalize these accounts. and so this is a good exercise to work on if it's not obvious to you. there is another issue in naive bayes which is a smoothing. in fact the smoothing is a general problem in older estimate of language morals. and this has to do with, what would happen if you have observed a small amount of data? so smoothing is an important technique to address that outsmarts this. in our case, the training data can be small and when the data set is small when we use maximum likely estimator we often face the problem of zero probability. that means if an event is not observed then the estimated probability would be zero. in this case, if we have not seen a word in the training documents for let's say, category i. then our estimator would be zero for the probability of this one in this category, and this is generally not accurate. so we have to do smoothing to make sure it's not zero probability. the other reason for smoothing is that this is a way to bring prior knowledge, and this is also generally true for a lot of situations of smoothing. when the data set is small, we tend to rely on some prior knowledge to solve the problem. so in this case our [inaudible] says that no word should have zero probability. so smoothing allows us to inject these to prior initial that no order has a real zero probability. there is also a third reason which us sometimes not very obvious, but we explain that in a moment. and that is to help achieve discriminative weighting of terms. and this is also called idf weighting, inverse document frequency weighting that you have seen in mining word relations. so how do we do smoothing? well in general we add pseudo counts to these events, we'll make sure that no event has 0 count. so one possible way of smoothing the probability of the category is to simply add a small non active constant delta to the count. let's pretend that every category has actually some extra number of documents represented by delta. and in the denominator we also add a k multiplied by delta because we want the probability to some to 1. so in total we've added delta k times because we have a k categories. therefore in this sum, we have to also add k multiply by delta as a total pseudocount that we add up to the estimate. now, it's interesting to think about the influence of that data, obvious data is a smoothing parameter here. meaning that the larger data is and the more we will do smoothing and that means we'll more rely on pseudocounts. and we might indeed ignore the actual counts if they are delta is set to infinity. imagine what would happen if there are approaches positively to infinity? well, we are going to say every category has an infinite amount of documents. and then there's no distinction to them so it become just a uniform. what if delta is 0? well, we just go back to the original estimate based on the observed training data to estimate to estimate the probability of each category. now we can do the same for the word distribution. but in this case, sometimes we find it useful to use a nonuniform seudocount for the word. so here you'll see we'll add a pseudocounts to each word and that's mule multiplied by the probability of the word given by a background language model, theta sub b. now that background model in general can be estimated by using a logic collection of tests. or in this case we will use the whole set of all the training data to estimate this background language model. but we don't have to use this one, we can use larger test data that are available from somewhere else. now if we use such a background language model that has pseudocounts, we'll find that some words will receive more pseudocounts. so what are those words? well those are the common words because they get a high probability by the background average model. so the pseudocounts added for such words will be higher. real words on the other hand will have smaller pseudocounts. now this addition of background model would cause a nonuniform smoothing of these word distributions. we're going to bring the probability of those common words to a higher level, because of the background model. now this helps make the difference of the probability of such words smaller across categories. because every category has some help from the background four words, and i get the, a, which have high probabilities. therefore, it's not always so important that each category has documents that contain a lot of occurrences of such words or the estimate is more influenced by the background model. and the consequence is that when we do categorization, such words tend not to influence the decision that much as words that have small probabilities from the background language model. those words don't get some help from the background language model. so the difference would be primary because of the differences of the occurrences in the training documents in different categories. we also see another smoothing parameter mu here, which controls the amount of smoothing and just like a delta does for the other probability. and you can easily understand why we add mu to the denominator, because that represents the sum of all the pseudocounts that we add for all the words. so view is also a non negative constant and it's [inaudible] set to control smoothing. now there are some interesting special cases to think about as well. first, let's think about when mu approaches infinity what would happen? well in this case the estimate would approach to the background language model we'll attempt to the background language model. so we will bring every word distribution to the same background language model and that essentially remove the difference between these categories. obviously, we don't want to do that. the other special case is the thing about the background model and suppose, we actually set the two uniform distribution. and let's say, 1 over the size of the vocabulary. so each one has the same probability, then this smoothing formula is going to be very similar to the one on the top when we add delta. it's because we're going to add a constant pseudocounts to every word. so in general, in naive bayes categorization we have to do such a small thing. and then once we have these probabilities, then we can compute the score for each category. for a document and then choose the category where it was the highest score as we discussed earlier. now, it's useful to further understand whether the naive bayes scoring function actually makes sense. so to understand that, and also to understand why adding a background model will actually achieve the effect of idf weighting and to penalize common words. so suppose we have just two categories and we're going to score based on their ratio of probability, right? so this is the. lets say this is our scoring function for two categories, right? so, this is a score of a document for these two categories. and we're going to score based on this probability ratio. so if the ratio is larger, then it means it's more likely to be in category one. so the larger the score is the more likely the document is in category one. so by using bayes' rule, we can write down this ratio as follows, and you have seen this before. now, we generally take logarithm of this ratio, and to avoid small probabilities. and this would then give us this formula in the second line. and here we see something really interesting, because this is our scoring function for deciding between the two categories. and if you look at this function, we'll see it has several parts. the first part here is actually log of probability ratio. and so this is a category bias. it doesn't really depend on the document. it just says which category is more likely and then we would then favor this category slightly, right? so, the second part has a sum of all the words, right? so, these are the words that are observed in the document but in general we can consider all the words in the vocabulary. so here we're going to collect the evidence about which category is more likely, right? so inside of the sum you can see there is product of two things. the first, is a count of the word. and this count of the word serves as a feature to represent the document. and this is what we can collect from document. the second part is the weight of this feature, here it's the weight on which word, right? this weight tells us to what extent observing this word helps contribute in our decision to put this document in category one. now remember, the higher the scoring function is, the more likely it's in category one. now if you look at this ratio, basically, sorry this weight it's basically based on the ratio of the probability of the word from each of the two distributions. essentially we're comparing the probability of the word from the two distributions. and if it's a higher according to theta 1, then according to theta 2, then this weight would be positive. and therefore it means when we observe such a word, we will say that it's more likely to be from category one. and the more we observe such a word, the more likely the document will be classified as theta 1. if, on the other hand, the probability of the word from theta 1 is smaller than the probability of the word from theta 2, then you can see that this word is negative. therefore, this is negative evidence for supporting category one. that means the more we observe such a word, the more likely the document is actually from theta 2. so this formula now makes a little sense, right? so we're going to aggregate all the evidence from the document, we take a sum of all the words. we can call this the features that we collected from the document that would help us make the decision. and then each feature has a weight that tells us how does this feature support category one or just support category two. and this is estimated as the log of probability ratio here in naïve bayes. and then finally we have this constant of bias here. so that formula actually is a formula that can be generalized to accommodate more features and that's why i have introduce some other symbols here. to introduce beta 0 to denote the bayes and fi to denote the each feature and beta sub i to denote the weight on each feature. now we do this generalisation, what we see is that in general we can represent the document by feature vector fi, here of course in this case fi is the count of a word. but in general, we can put any features that we think are relevant for categorization. for example, document length or font size or count of other patterns in the document. and then our scoring function can be defined as a sum of a constant beta 0 and the sum of the feature weights of all the features. so if each f sub i is a feature value then we multiply the value by the corresponding weight, beta sub i, and we just take the sum. and this is the aggregate of all evidence that we can collect from all these features. and of course there are parameters here. so what are the parameters? well, these are the betas. these betas are weights. and with a proper setting of the weights, then we can expect such a scoring function to work well to classify documents, just like in the case of naive bayes. we can clearly see naive bayes classifier as a special case of this general classifier. actually, this general form is very close to a classifier called a logistical regression, and this is actually one of those conditional approaches or discriminative approaches to classification. and we're going to talk more about such approaches later, but here i want you to note that there is a strong connection, a close connection between the two kinds of approaches. and this slide shows how naive bayes classifier can be connected to a logistic regression. and you can also see that in discriminative classifiers that tend to use more general form on the bottom, we can accommodate more features to solve the problem. [music",09_4-9-text-categorization-generative-probabilistic-models
76,https://www.coursera.org/learn/text-mining,08_4-8-text-categorization-methods.en.txt,text-mining/05_week-4/02_week-4-lessons/08_4-8-text-categorization-methods.en.txt,"this lecture is about the methods for text categorization. so in this lecture we're going to discuss how to do text for categorization. first, there're many methods for text categorization. in such a method the idea is to determine the category based on some rules that we design carefully to reflect the domain knowledge about the category prediction problem. so for example, if you want to do topic categorization for news articles you can say well, if the news article mentions word like a game and sports three times. that we're going to say it's about sports things like that and this would allow us to deterministically decide which category a document that should be put into. now such a strategy would work well if the following conditions hold. first the categories must be very well defined and this allows the person to clearly decide the category based on some clear rules. a certainly the categories as half to be easy to distinguished at the based on a surface features in text. so that means some official features like keywords or punctuations or whatever, you can easily identify in text to data. for example, if there is some special vocabulary that is known to only occur in a particular category. and that would be most effective because we can easily use such a vocabulary or padding of such a vocabulary to recognize this category. now we also should have sufficient knowledge for designing these words, and so if that's the case then such a can be effective. and so it does have a in some domains and sometimes. however, in general, there are several problems with this approach. first off, because it's label intensive it requires a lot of manual work. obviously, we can't do this for all kinds of categorization problems. we have to do it from scratch for a different problem. problem because given the rules, what they need. so it doesn't scale up well. secondly, it cannot handle uncertainty in rules, often the rules aren't 100% reliable. take for example looking at occurrences of words in texts and trying to decide the topic. it's actually very hard to have 100% correct rule. so for example you can say well, if it has game, sports, basketball then for sure it's about sports. but one can also imagine some types of articles that mention these cures, but may not be exactly about sports or only marginally touching sports. the main topic could be another topic, a different topic than sports. so that's one disadvantage of this approach. and then finally, the rules maybe inconsistent and this would lead to robustness. more specifically, and sometimes, the results of categorization may be different that depending on which rule to be applied. so as in that case that you are facing uncertainty. and you will also have to decide an order of applying the rules, or combination of results that are contradictory. so all these are problems with this approach. and it turns out that both problems can be solved or alleviated by using machine learning. so these machine learning methods are more automatic. but, i still put automatic in quotation marks because they are not really completely automatic cause it still require many work. more specifically we have to use a human experts to help in two ways. first the human experts must annotate data cells was category labels. and would tell the computer which documents should receive which categories. and this is called training data. and then secondly, the human experts also need to provide a set of features to represent each text object. that can potentially provide a clue about the category. so, we need to provide some basic features for the computers to look into. in the case of tax a natural choice would be the words. so, using each has a feature is a very common choice to start with, but of course there are other sophisticated features like phrases or even parts of ancients tags or even syntax to the structures. so once human experts can provide this then we can use machine running to learn soft rules for categorization from the training data. so, soft rules just means, we're going to get decided which category we should be assigned for a document, but it's not going to be use using a rule that is deterministic. so we might use something similar to saying that if it matches games, sports many times, it's likely to be sports. but, we're not going to say exactly for sure but instead, we're going to use probabilities or weights. so that we can combine much more evidences. so, the learning process, basically is going to figure out which features are most useful for separating different categories. and it's going to also figure out how to optimally combine features to minimize errors of the categorization of the training data. so the training data, as you can see here, is very important. it's the basis for learning. and then, the trained classifier can be applied to a new text object to predict the most likely category. and that's to simulate the prediction of what human would assign to this text object. if the human were to make a judgement. so when we use machine learning for text categorization we can also talk about the problem in the general setting of supervisement. so the set up is to learn a classifier to map a value of x. into a map of y so here x is all the text objects and y is all the categories, a set of categories. so the class phi will take any value in x as input and would generate a value in y as output. we hope that output y with this right category for x. and here correct, of course, is judged based on the training data. so that's a general goal in machine learning problems or supervised learning problems where you are given some examples of input and output for a function. and then the computer's going to figure out the, how the function behaves like based on this examples. and then try to be able to compute the values for future x's that when we have not seen. so in general all methods would rely on discriminative features of text objects to distinguish different categories. so that's why these features are very important and they have to be provided by humans. and they will also combine multiple features in a weight map with weights to be optimized to minimize errors on the training data. so after the learning processes optimization problem. an objective function is often tied into the errors on the training data. different methods tend to vary in their ways of measuring the errors on the training data. they might optimize a different objective function, which is often also called a loss function or cost function. they also tend to vary in their ways of combining the features. so a linear combination for example is simple, is often used. but they are not as powerful as nonlinear combinations. but nonlinear models might be more complex for training, so there are tradeoffs as well. but that would lead to different variations of many variations of these learning methods. so in general we can distinguish two kinds of classifiers at a high level. one is called generative classifiers. the other is called discriminative classifiers. the generative classifiers try to learn what the data looks like in each category. so it attempts to model the joint distribution of the data and the label x and y and this can then be factored out to a product of why the distribution of labels. and the joint probability of sorry the conditional probability of x given y, so it's y. so we first model the distribution of labels and then we model how the data is generate a particular label here. and once we can estimate these models, then we can compute this conditional probability of label given data based on the probability of data given label. and the label distribution here by using the bayes rule. now this is the most important thing, because this conditional probability of the label can then be used directly to decide which label is most likely. so in such approaches objective function is actually likelihood. and so, we model how the data are generated. so it only indirectly captures the training errors. but if we can model the data in each category accurately, then we can also classify accurately. one example is naïve bayes classifier, in this case. the other kind of approaches are called discriminative classifies, and these classifies try to learn what features separate categories. so they direct or attack the problem of categorization for separation of classes. so sorry for the problem. so, these discriminative classifiers attempt to model the conditional probability of the label given the data point directly. so, the objective function tends to directly measure the errors of categorization on the training data. some examples include a logistical regression, support vector machines, and k-nearest neighbors. we will cover some of these classifiers in detail in the next few lectures. [music",08_4-8-text-categorization-methods
77,https://www.coursera.org/learn/text-mining,06_1-6-text-representation-part-2.en.txt,text-mining/02_week-1/02_week-1-lessons/06_1-6-text-representation-part-2.en.txt,"[sound]. so, as we explained the different text representation tends to enable different analysis. in particular, we can gradually add more and more deeper analysis results to represent text data. and that would open up a more interesting representation opportunities and also analysis capacities. so, this table summarizes what we have just seen. so the first column shows the text representation. the second visualizes the generality of such a representation. meaning whether we can do this kind of representation accurately for all the text data or only some of them. and the third column shows the enabled analysis techniques. and the final column shows some examples of application that can be achieved through this level of representation. so let's take a look at them. so as a stream text can only be processed by stream processing algorithms. it's very robust, it's general. and there was still some interesting applications that can be down at this level. for example, compression of text. doesn't necessarily need to know the word boundaries. although knowing word boundaries might actually also help. word base repetition is a very important level of representation. it's quite general and relatively robust, indicating they were a lot of analysis techniques. such as word relation analysis, topic analysis and sentiment analysis. and there are many applications that can be enabled by this kind of analysis. for example, thesaurus discovery has to do with discovering related words. and topic and opinion related applications are abounded. and there are, for example, people might be interesting in knowing the major topics covered in the collection of texts. and this can be the case in research literature. and scientists want to know what are the most important research topics today. or customer service people might want to know all our major complaints from their customers by mining their e-mail messages. and business intelligence people might be interested in understanding consumers' opinions about their products and the competitors' products to figure out what are the winning features of their products. and, in general, there are many applications that can be enabled by the representation at this level. now, moving down, we'll see we can gradually add additional representations. by adding syntactical structures, we can enable, of course, syntactical graph analysis. we can use graph mining algorithms to analyze syntactic graphs. and some applications are related to this kind of representation. for example, stylistic analysis generally requires syntactical structure representation. we can also generate the structure based features. and those are features that might help us classify the text objects into different categories by looking at the structures sometimes in the classification. it can be more accurate. for example, if you want to classify articles into different categories corresponding to different authors. you want to figure out which of the k authors has actually written this article, then you generally need to look at the syntactic structures. when we add entities and relations, then we can enable other techniques such as knowledge graph and answers, or information network and answers in general. and this analysis enable applications about entities. for example, discovery of all the knowledge and opinions about real world entities. you can also use this level representation to integrate everything about anything from scaled resources. finally, when we add logical predicates, that would enable large inference, of course. and this can be very useful for integrating analysis of scattered knowledge. for example, we can also add ontology on top of the, extracted the information from text, to make inferences. a good of example of application in this enabled by this level of representation, is a knowledge assistant for biologists. and this program that can help a biologist manage all the relevant knowledge from literature about a research problem such as understanding functions of genes. and the computer can make inferences about some of the hypothesis that the biologist might be interesting. for example, whether a gene has a certain function, and then the intelligent program can read the literature to extract the relevant facts, doing compiling and information extracting. and then using a logic system to actually track that's the answers to researchers questioning about what genes are related to what functions. so in order to support this level of application we need to go as far as logical representation. now, this course is covering techniques mainly based on word based representation. and these techniques are general and robust and that's more widely used in various applications. in fact, in virtually all the text mining applications you need this level of representation and then techniques that support analysis of text in this level. but obviously all these other levels can be combined and should be combined in order to support the sophisticated applications. so to summarize, here are the major takeaway points. text representation determines what kind of mining algorithms can be applied. and there are multiple ways to represent the text, strings, words, syntactic structures, entity-relation graphs, knowledge predicates, etc. and these different representations should in general be combined in real applications to the extent we can. for example, even if we cannot do accurate representations of syntactic structures, we can state that partial structures strictly. and if we can recognize some entities, that would be great. so in general we want to do as much as we can. and when different levels are combined together, we can enable a richer analysis, more powerful analysis. this course however focuses on word-based representation. such techniques have also several advantage, first of they are general and robust, so they are applicable to any natural language. that's a big advantage over other approaches that rely on more fragile natural language processing techniques. secondly, it does not require much manual effort, or sometimes, it does not require any manual effort. so that's, again, an important benefit, because that means that you can apply it directly to any application. third, these techniques are actually surprisingly powerful and effective form in implications. although not all of course as i just explained. now they are very effective partly because the words are invented by humans as basically units for communications. so they are actually quite sufficient for representing all kinds of semantics. so that makes this kind of word-based representation all so powerful. and finally, such a word-based representation and the techniques enable by such a representation can be combined with many other sophisticated approaches. so they're not competing with each other. [music",06_1-6-text-representation-part-2
78,https://www.coursera.org/learn/text-mining,08_1-8-paradigmatic-relation-discovery-part-1.en.txt,text-mining/02_week-1/02_week-1-lessons/08_1-8-paradigmatic-relation-discovery-part-1.en.txt,"[sound] this lecture is about the paradigmatics relation discovery. in this lecture we are going to talk about how to discover a particular kind of word association called a paradigmatical relation. by definition, two words are paradigmatically related if they share a similar context. namely, they occur in similar positions in text. so naturally our idea of discovering such a relation is to look at the context of each word and then try to compute the similarity of those contexts. so here is an example of context of a word, cat. here i have taken the word cat out of the context and you can see we are seeing some remaining words in the sentences that contain cat. now, we can do the same thing for another word like dog. so in general we would like to capture such a context and then try to assess the similarity of the context of cat and the context of a word like dog. so now the question is how can we formally represent the context and then define the similarity function. so first, we note that the context actually contains a lot of words. so, they can be regarded as a pseudo document, a imagine document, but there are also different ways of looking at the context. for example, we can look at the word that occurs before the word cat. we can call this context left1 context. all right, so in this case you will see words like my, his, or big, a, the, et cetera. these are the words that can occur to left of the word cat. so we say my cat, his cat, big cat, a cat, et cetera. similarly, we can also collect the words that occur right after the word cat. we can call this context right1, and here we see words like eats, ate, is, has, et cetera. or, more generally, we can look at all the words in the window of text around the word cat. here, let's say we can take a window of 8 words around the word cat. we call this context window8. now, of course, you can see all the words from left or from right, and so we'll have a bag of words in general to represent the context. now, such a word based representation would actually give us an interesting way to define the perspective of measuring the similarity. because if you look at just the similarity of left1, then we'll see words that share just the words in the left context, and we kind of ignored the other words that are also in the general context. so that gives us one perspective to measure the similarity, and similarly, if we only use the right1 context, we will capture this narrative from another perspective. using both the left1 and right1 of course would allow us to capture the similarity with even more strict criteria. so in general, context may contain adjacent words, like eats and my, that you see here, or non-adjacent words, like saturday, tuesday, or some other words in the context. and this flexibility also allows us to match the similarity in somewhat different ways. sometimes this is useful, as we might want to capture similarity base on general content. that would give us loosely related paradigmatical relations. whereas if you use only the words immediately to the left and to the right of the word, then you likely will capture words that are very much related by their syntactical categories and semantics. so the general idea of discovering paradigmatical relations is to compute the similarity of context of two words. so here, for example, we can measure the similarity of cat and dog based on the similarity of their context. in general, we can combine all kinds of views of the context. and so the similarity function is, in general, a combination of similarities on different context. and of course, we can also assign weights to these different similarities to allow us to focus more on a particular kind of context. and this would be naturally application specific, but again, here the main idea for discovering pardigmatically related words is to computer the similarity of their context. so next let's see how we exactly compute these similarity functions. now to answer this question, it is useful to think of bag of words representation as vectors in a vector space model. now those of you who have been familiar with information retrieval or textual retrieval techniques would realize that vector space model has been used frequently for modeling documents and queries for search. but here we also find it convenient to model the context of a word for paradigmatic relation discovery. so the idea of this approach is to view each word in our vocabulary as defining one dimension in a high dimensional space. so we have n words in total in the vocabulary, then we have n dimensions, as illustrated here. and on the bottom, you can see a frequency vector representing a context, and here we see where eats occurred 5 times in this context, ate occurred 3 times, et cetera. so this vector can then be placed in this vector space model. so in general, we can represent a pseudo document or context of cat as one vector, d1, and another word, dog, might give us a different context, so d2. and then we can measure the similarity of these two vectors. so by viewing context in the vector space model, we convert the problem of paradigmatical relation discovery into the problem of computing the vectors and their similarity. so the two questions that we have to address are first, how to compute each vector, and that is how to compute xi or yi. and the other question is how do you compute the similarity. now in general, there are many approaches that can be used to solve the problem, and most of them are developed for information retrieval. and they have been shown to work well for matching a query vector and a document vector. but we can adapt many of the ideas to compute a similarity of context documents for our purpose here. so let's first look at the one plausible approach, where we try to match the similarity of context based on the expected overlap of words, and we call this eowc. so the idea here is to represent a context by a word vector where each word has a weight that's equal to the probability that a randomly picked word from this document vector, is this word. so in other words, xi is defined as the normalized account of word wi in the context, and this can be interpreted as the probability that you would actually pick this word from d1 if you randomly picked a word. now, of course these xi's would sum to one because they are normalized frequencies, and this means the vector is actually probability of the distribution over words. so, the vector d2 can be also computed in the same way, and this would give us then two probability distributions representing two contexts. so, that addresses the problem how to compute the vectors, and next let's see how we can define similarity in this approach. well, here, we simply define the similarity as a dot product of two vectors, and this is defined as a sum of the products of the corresponding elements of the two vectors. now, it's interesting to see that this similarity function actually has a nice interpretation, and that is this. dot product, in fact that gives us the probability that two randomly picked words from the two contexts are identical. that means if we try to pick a word from one context and try to pick another word from another context, we can then ask the question, are they identical? if the two contexts are very similar, then we should expect we frequently will see the two words picked from the two contexts are identical. if they are very different, then the chance of seeing identical words being picked from the two contexts would be small. so this intuitively makes sense, right, for measuring similarity of contexts. now you might want to also take a look at the exact formulas and see why this can be interpreted as the probability that two randomly picked words are identical. so if you just stare at the formula to check what's inside this sum, then you will see basically in each case it gives us the probability that we will see an overlap on a particular word, wi. and where xi gives us a probability that we will pick this particular word from d1, and yi gives us the probability of picking this word from d2. and when we pick the same word from the two contexts, then we have an identical pick, right so. that's one possible approach, eowc, extracted overlap of words in context. now as always, we would like to assess whether this approach it would work well. now of course, ultimately we have to test the approach with real data and see if it gives us really semantically related words. really give us paradigmatical relations, but analytically we can also analyze this formula a little bit. so first, as i said, it does make sense, right, because this formula will give a higher score if there is more overlap between the two contexts. so that's exactly what we want. but if you analyze the formula more carefully, then you also see there might be some potential problems, and specifically there are two potential problems. first, it might favor matching one frequent term very well, over matching more distinct terms. and that is because in the dot product, if one element has a high value and this element is shared by both contexts and it contributes a lot to the overall sum, it might indeed make the score higher than in another case, where the two vectors actually have a lot of overlap in different terms. but each term has a relatively low frequency, so this may not be desirable. of course, this might be desirable in some other cases. but in our case, we should intuitively prefer a case where we match more different terms in the context, so that we have more confidence in saying that the two words indeed occur in similar context. if you only rely on one term and that's a little bit questionable, it may not be robust. now the second problem is that it treats every word equally, right. so if you match a word like the and it will be the same as matching a word like eats, but intuitively we know matching the isn't really surprising because the occurs everywhere. so matching the is not as such strong evidence as matching what a word like eats, which doesn't occur frequently. so this is another problem of this approach. in the next chapter we are going to talk about how to address these problems. [music",08_1-8-paradigmatic-relation-discovery-part-1
79,https://www.coursera.org/learn/text-mining,04_1-4-natural-language-content-analysis-part-2.en.txt,text-mining/02_week-1/02_week-1-lessons/04_1-4-natural-language-content-analysis-part-2.en.txt,"[sound] so here are some specific examples of what we can't do today and part of speech tagging is still not easy to do 100% correctly. so in the example, he turned off the highway verses he turned off the fan and the two offs actually have somewhat a differentness in their active categories and also its very difficult to get a complete the parsing correct. again, the example, a man saw a boy with a telescope can actually be very difficult to parse depending on the context. precise deep semantic analysis is also very hard. for example, to define the meaning of own, precisely is very difficult in the sentence, like john owns a restaurant. so the state of the off can be summarized as follows. robust and general nlp tends to be shallow while a deep understanding does not scale up. for this reason in this course, the techniques that we cover are in general, shallow techniques for analyzing text data and mining text data and they are generally based on statistical analysis. so there are robust and general and they are in the in category of shallow analysis. so such techniques have the advantage of being able to be applied to any text data in any natural about any topic. but the downside is that, they don't give use a deeper understanding of text. for that, we have to rely on deeper natural language analysis. that typically would require a human effort to annotate a lot of examples of analysis that would like to do and then computers can use machine learning techniques and learn from these training examples to do the task. so in practical applications, we generally combine the two kinds of techniques with the general statistical and methods as a backbone as the basis. these can be applied to any text data. and on top of that, we're going to use humans to, and you take more data and to use supervised machine learning to do some tasks as well as we can, especially for those important tasks to bring humans into the loop to analyze text data more precisely. but this course will cover the general statistical approaches that generally, don't require much human effort. so they're practically, more useful that some of the deeper analysis techniques that require a lot of human effort to annotate the text today. so to summarize, the main points we take are first nlp is the foundation for text mining. so obviously, the better we can understand the text data, the better we can do text mining. computers today are far from being able to understand the natural language. deep nlp requires common sense knowledge and inferences. thus, only working for very limited domains not feasible for large scale text mining. shallow nlp based on statistical methods can be done in large scale and is the main topic of this course and they are generally applicable to a lot of applications. they are in some sense also, more useful techniques. in practice, we use statistical nlp as the basis and we'll have humans for help as needed in various ways. [music",04_1-4-natural-language-content-analysis-part-2
80,https://www.coursera.org/learn/text-mining,01_1-1-overview-text-mining-and-analytics-part-1.en.txt,text-mining/02_week-1/02_week-1-lessons/01_1-1-overview-text-mining-and-analytics-part-1.en.txt,"[sound] in this lecture we give an overview of text mining and analytics. first, let's define the term text mining, and the term text analytics. the title of this course is called text mining and analytics. but the two terms text mining, and text analytics are actually roughly the same. so we are not really going to really distinguish them, and we're going to use them interchangeably. but the reason that we have chosen to use both terms in the title is because there is also some subtle difference, if you look at the two phrases literally. mining emphasizes more on the process. so it gives us a error rate medical view of the problem. analytics, on the other hand emphasizes more on the result, or having a problem in mind. we are going to look at text data to help us solve a problem. but again as i said, we can treat these two terms roughly the same. and i think in the literature you probably will find the same. so we're not going to really distinguish that in the course. both text mining and text analytics mean that we want to turn text data into high quality information, or actionable knowledge. so in both cases, we have the problem of dealing with a lot of text data and we hope to. turn these text data into something more useful to us than the raw text data. and here we distinguish two different results. one is high-quality information, the other is actionable knowledge. sometimes the boundary between the two is not so clear. but i also want to say a little bit about these two different angles of the result of text field mining. in the case of high quality information, we refer to more concise information about the topic. which might be much easier for humans to digest than the raw text data. for example, you might face a lot of reviews of a product. a more concise form of information would be a very concise summary of the major opinions about the features of the product. positive about, let's say battery life of a laptop. now this kind of results are very useful to help people digest the text data. and so this is to minimize a human effort in consuming text data in some sense. the other kind of output is actually more knowledge. here we emphasize the utility of the information or knowledge we discover from text data. it's actionable knowledge for some decision problem, or some actions to take. for example, we might be able to determine which product is more appealing to us, or a better choice for a shocking decision. now, such an outcome could be called actionable knowledge, because a consumer can take the knowledge and make a decision, and act on it. so, in this case text mining supplies knowledge for optimal decision making. but again, the two are not so clearly distinguished, so we don't necessarily have to make a distinction. text mining is also related to text retrieval, which is a essential component in many text mining systems. now, text retrieval refers to finding relevant information from a large amount of text data. so i've taught another separate mooc on text retrieval and search engines. where we discussed various techniques for text retrieval. if you have taken that mooc, and you will find some overlap. and it will be useful to know the background of text retrieval of understanding some of the topics in text mining. but, if you have not taken that mooc, it's also fine because in this mooc on text mining and analytics, we're going to repeat some of the key concepts that are relevant for text mining. but they're at the high level and they also explain the relation between text retrieval and text mining. text retrieval is very useful for text mining in two ways. first, text retrieval can be a preprocessor for text mining. meaning that it can help us turn big text data into a relatively small amount of most relevant text data. which is often what's needed for solving a particular problem. and in this sense, text retrieval also helps minimize human effort. text retrieval is also needed for knowledge provenance. and this roughly corresponds to the interpretation of text mining as turning text data into actionable knowledge. once we find the patterns in text data, or actionable knowledge, we generally would have to verify the knowledge. by looking at the original text data. so the users would have to have some text retrieval support, go back to the original text data to interpret the pattern or to better understand an analogy or to verify whether a pattern is really reliable. so this is a high level introduction to the concept of text mining, and the relationship between text mining and retrieval. next, let's talk about text data as a special kind of data. now it's interesting to view text data as data generated by humans as subjective sensors. so, this slide shows an analogy between text data and non-text data. and between humans as subjective sensors and physical sensors, such as a network sensor or a thermometer. so in general a sensor would monitor the real world in some way. it would sense some signal from the real world, and then would report the signal as data, in various forms. for example, a thermometer would watch the temperature of real world and then we report the temperature being a particular format. similarly, a geo sensor would sense the location and then report. the location specification, for example, in the form of longitude value and latitude value. a network sends over the monitor network traffic, or activities in the network and are reported. some digital format of data. similarly we can think of humans as subjective sensors. that will observe the real world and from some perspective. and then humans will express what they have observed in the form of text data. so, in this sense, human is actually a subjective sensor that would also sense what's happening in the world and then express what's observed in the form of data, in this case, text data. now, looking at the text data in this way has an advantage of being able to integrate all types of data together. and that's indeed needed in most data mining problems. so here we are looking at the general problem of data mining. and in general we would be dealing with a lot of data about our world that are related to a problem. and in general it will be dealing with both non-text data and text data. and of course the non-text data are usually produced by physical senses. and those non-text data can be also of different formats. numerical data, categorical, or relational data, or multi-media data like video or speech. so, these non text data are often very important in some problems. but text data is also very important, mostly because they contain a lot of symmetrical content. and they often contain knowledge about the users, especially preferences and opinions of users. so, but by treating text data as the data observed from human sensors, we can treat all this data together in the same framework. so the data mining problem is basically to turn such data, turn all the data in your actionable knowledge to that we can take advantage of it to change the real world of course for better. so this means the data mining problem is basically taking a lot of data as input and giving actionable knowledge as output. inside of the data mining module, you can also see we have a number of different kind of mining algorithms. and this is because, for different kinds of data, we generally need different algorithms for mining the data. for example, video data might require computer vision to understand video content. and that would facilitate the more effective mining. and we also have a lot of general algorithms that are applicable to all kinds of data and those algorithms, of course, are very useful. although, for a particular kind of data, we generally want to also develop a special algorithm. so this course will cover specialized algorithms that are particularly useful for mining text data. [music",01_1-1-overview-text-mining-and-analytics-part-1
81,https://www.coursera.org/learn/text-mining,05_1-5-text-representation-part-1.en.txt,text-mining/02_week-1/02_week-1-lessons/05_1-5-text-representation-part-1.en.txt,"this lecture is about the textual representation. in this lecture, we are going to discuss textual representation, and discuss how natural language processing can allow us to represent text in many different ways. let's take a look at this example sentence again. we can represent this sentence in many different ways. first, we can always represent such a sentence as a string of characters. this is true for all the languages when we store them in the computer. when we store a natural language sentence as a string of characters, we have perhaps the most general way of representing text since we always use this approach to represent any text data. but unfortunately, using such a representation will not help us to do semantic analysis, which is often needed for many applications of text mining. the reason is because we're not even recognizing words. so as a string, we're going to keep all the spaces and these ascii symbols. we can perhaps count what's the most frequent character in english text, or the correlation between those characters, but we can't really analyze semantics. yet, this is the most general way of representing text because we can use this to represent any natural language text. if we try to do a little bit more natural language processing by doing word segmentation, then we can obtain a representation of the same text, but in the form of a sequence of words. so here we see that we can identify words like a dog is chasing etc. now with this level of representation, we certainly can do a lot of things, and this is mainly because words are the basic units of human communication in natural language, so they are very powerful. by identifying words, we can for example easily count what are the most frequent words in this document or in the whole collection etc. these words can be used to form topics when we combine related words together, and some words are positive, some words negative, so we can also do sentiment analysis. so representing text data as a sequence of words opens up a lot of interesting analysis possibilities. however, this level of representation is slightly less general than string of characters because in some languages such as chinese, it's actually not that easy to identify all the word boundaries because in such a language, you see text as a sequence of characters with no space in between. so you'll have to rely on some special techniques to identify words. in such a language, of course then, we might make mistakes in segmenting words. so the sequence of words representation is not as robust as string of characters. but in english, it's very easy to obtain this level of representation, so we can do that all the time. now, if we go further to do naturally language processing, we can add a part of speech tags. now once we do that, we can count, for example, the most frequent nouns or what kind of nouns are associated with what kind of verbs etc. so this opens up a little bit more interesting opportunities for further analysis. note that i use a plus sign here because by representing text as a sequence of part of speech tags, we don't necessarily replace the original word sequence written. instead, we add this as an additional way of representing text data, so that now the data is represented as both a sequence of words and a sequence of part of speech tags. this enriches the representation of text data, and thus also enables more interesting analysis. if we go further, then we'll be pausing the sentence often to obtain a syntactic structure. now this of course, further open up a more interesting analysis of, for example, the writing styles or correcting grammar mistakes. if we go further for semantic analysis, then we might be able to recognize dog as an animal, and we also can recognize a boy as a person, and playground as a location. we can further analyze their relations, for example, dog is chasing the boy and the boy is on the playground. now this will add more entities and relations through entity relation recreation. at this level, then we can do even more interesting things. for example, now we can count easily the most frequent person that's mentioning this whole collection of news articles, or whenever you mention this person, you also tend to see mentioning of another person etc. so this is a very useful representation, and it's also related to the knowledge graph that some of you may have heard of that google is doing as a more semantic way of representing text data. however, it's also less robust than sequence of words or even syntactical analysis because it's not always easy to identify all the entities with the right types, and we might make mistakes, and relations are even harder to find, and we might make mistakes. so this makes this level of representation less robust, yet it's very useful. now if we move further to logical condition, then we can have predicates and even inference rules. with inference rules, we can infer interesting derived facts from the text, so that's very useful. but unfortunately, at this level of representation is even less robust and we can make mistakes and we can't do that all the time for all kinds of sentences. finally, speech acts would add a yet another level of repetition of the intent of saying this sentence. so in this case, it might be a request. so knowing that would allow us to analyze even more interesting things about this observer or the author of this sentence. what's the intention of saying that? what's scenarios? what kind of actions would be made? so this is another level of analysis that would be very interesting. so this picture shows that if we move down, we generally see more sophisticated natural language processing techniques to be used. unfortunately, such techniques would require more human effort, and they are less accurate. that means there are mistakes. so if we add an texts that are at the levels that are representing deeper analysis of language, then we have to tolerate the errors. so that also means it's still necessary to combine such deep analysis with shallow analysis based on, for example, sequence of words. on the right side, you'll see the arrow points down to indicate that. as we go down, we are representation of text is closer to knowledge representation in our mind, and need for solving a lot of problems. now this is desirable because as we can represent text at the level of knowledge, we can easily extract the knowledge. that's the purpose of text-mining. so there is a trade-off here between doing a deeper analysis that might have errors but would give us direct knowledge that can be extracted from text. doing shallow analysis, which is more robust but wouldn't actually give us the necessary deeper representation of knowledge. i should also say that text data are generated by humans and are meant to be consumed by humans. so as a result, in text data analysis, text-mining humans play a very important role, they are always in the loop. meaning that we should optimize the collaboration of humans and computers. so in that sense, it's okay that computers may not be able to have compute accurately representation of text data, and the patterns that are extracted from text data can be interpreted by humans, and humans can guide the computers to do more accurate analysis by annotating more data, by providing features to guide a machine learning programs to make them work more effectively",05_1-5-text-representation-part-1
82,https://www.coursera.org/learn/text-mining,02_1-2-overview-text-mining-and-analytics-part-2.en.txt,text-mining/02_week-1/02_week-1-lessons/02_1-2-overview-text-mining-and-analytics-part-2.en.txt,"[sound] so, looking at the text mining problem more closely, we see that the problem is similar to general data mining, except that we'll be focusing more on text data. and we're going to have text mining algorithms to help us to turn text data into actionable knowledge that we can use in real world, especially for decision making, or for completing whatever tasks that require text data to support. because, in general, in many real world problems of data mining we also tend to have other kinds of data that are non-textual. so a more general picture would be to include non-text data as well. and for this reason we might be concerned with joint mining of text and non-text data. and so in this course we're going to focus more on text mining, but we're also going to also touch how do to joint analysis of both text data and non-text data. with this problem definition we can now look at the landscape of the topics in text mining and analytics. now this slide shows the process of generating text data in more detail. more specifically, a human sensor or human observer would look at the word from some perspective. different people would be looking at the world from different angles and they'll pay attention to different things. the same person at different times might also pay attention to different aspects of the observed world. and so the humans are able to perceive the world from some perspective. and that human, the sensor, would then form a view of the world. and that can be called the observed world. of course, this would be different from the real world because of the perspective that the person has taken can often be biased also. now the observed world can be represented as, for example, entity-relation graphs or in a more general way, using knowledge representation language. but in general, this is basically what a person has in mind about the world. and we don't really know what exactly it looks like, of course. but then the human would express what the person has observed using a natural language, such as english. and the result is text data. of course a person could have used a different language to express what he or she has observed. in that case we might have text data of mixed languages or different languages. the main goal of text mining is actually to revert this process of generating text data. we hope to be able to uncover some aspect in this process. specifically, we can think about mining, for example, knowledge about the language. and that means by looking at text data in english, we may be able to discover something about english, some usage of english, some patterns of english. so this is one type of mining problems, where the result is some knowledge about language which may be useful in various ways. if you look at the picture, we can also then mine knowledge about the observed world. and so this has much to do with mining the content of text data. we're going to look at what the text data are about, and then try to get the essence of it or extracting high quality information about a particular aspect of the world that we're interested in. for example, everything that has been said about a particular person or a particular entity. and this can be regarded as mining content to describe the observed world in the user's mind or the person's mind. if you look further, then you can also imagine we can mine knowledge about this observer, himself or herself. so this has also to do with using text data to infer some properties of this person. and these properties could include the mood of the person or sentiment of the person. and note that we distinguish the observed word from the person because text data can't describe what the person has observed in an objective way. but the description can be also subjected with sentiment and so, in general, you can imagine the text data would contain some factual descriptions of the world plus some subjective comments. so that's why it's also possible to do text mining to mine knowledge about the observer. finally, if you look at the picture to the left side of this picture, then you can see we can certainly also say something about the real world. right? so indeed we can do text mining to infer other real world variables. and this is often called a predictive analytics. and we want to predict the value of certain interesting variable. so, this picture basically covered multiple types of knowledge that we can mine from text in general. when we infer other real world variables we could also use some of the results from mining text data as intermediate results to help the prediction. for example, after we mine the content of text data we might generate some summary of content. and that summary could be then used to help us predict the variables of the real world. now of course this is still generated from the original text data, but i want to emphasize here that often the processing of text data to generate some features that can help with the prediction is very important. and that's why here we show the results of some other mining tasks, including mining the content of text data and mining knowledge about the observer, can all be very helpful for prediction. in fact, when we have non-text data, we could also use the non-text data to help prediction, and of course it depends on the problem. in general, non-text data can be very important for such prediction tasks. for example, if you want to predict stock prices or changes of stock prices based on discussion in the news articles or in social media, then this is an example of using text data to predict some other real world variables. but in this case, obviously, the historical stock price data would be very important for this prediction. and so that's an example of non-text data that would be very useful for the prediction. and we're going to combine both kinds of data to make the prediction. now non-text data can be also used for analyzing text by supplying context. when we look at the text data alone, we'll be mostly looking at the content and/or opinions expressed in the text. but text data generally also has context associated. for example, the time and the location that associated are with the text data. and these are useful context information. and the context can provide interesting angles for analyzing text data. for example, we might partition text data into different time periods because of the availability of the time. now we can analyze text data in each time period and then make a comparison. similarly we can partition text data based on locations or any meta data that's associated to form interesting comparisons in areas. so, in this sense, non-text data can actually provide interesting angles or perspectives for text data analysis. and it can help us make context-sensitive analysis of content or the language usage or the opinions about the observer or the authors of text data. we could analyze the sentiment in different contexts. so this is a fairly general landscape of the topics in text mining and analytics. in this course we're going to selectively cover some of those topics. we actually hope to cover most of these general topics. first we're going to cover natural language processing very briefly because this has to do with understanding text data and this determines how we can represent text data for text mining. second, we're going to talk about how to mine word associations from text data. and word associations is a form of use for lexical knowledge about a language. third, we're going to talk about topic mining and analysis. and this is only one way to analyze content of text, but it's a very useful ways of analyzing content. it's also one of the most useful techniques in text mining. then we're going to talk about opinion mining and sentiment analysis. so this can be regarded as one example of mining knowledge about the observer. and finally we're going to cover text-based prediction problems where we try to predict some real world variable based on text data. so this slide also serves as a road map for this course. and we're going to use this as an outline for the topics that we'll cover in the rest of this course. [music",02_1-2-overview-text-mining-and-analytics-part-2
83,https://www.coursera.org/learn/text-mining,03_1-3-natural-language-content-analysis-part-1.en.txt,text-mining/02_week-1/02_week-1-lessons/03_1-3-natural-language-content-analysis-part-1.en.txt,"[sound] this lecture is about natural language content analysis. natural language content analysis is the foundation of text mining. so we're going to first talk about this. and in particular, natural language processing with a factor how we can present text data. and this determines what algorithms can be used to analyze and mine text data. we're going to take a look at the basic concepts in natural language first. and i'm going to explain these concepts using a similar example that you've all seen here. a dog is chasing a boy on the playground. now this is a very simple sentence. when we read such a sentence we don't have to think about it to get the meaning of it. but when a computer has to understand the sentence, the computer has to go through several steps. first, the computer needs to know what are the words, how to segment the words in english. and this is very easy, we can just look at the space. and then the computer will need the know the categories of these words, syntactical categories. so for example, dog is a noun, chasing's a verb, boy is another noun etc. and this is called a lexical analysis. in particular, tagging these words with these syntactic categories is called a part-of-speech tagging. after that the computer also needs to figure out the relationship between these words. so a and dog would form a noun phrase. on the playground would be a prepositional phrase, etc. and there is certain way for them to be connected together in order for them to create meaning. some other combinations may not make sense. and this is called syntactical parsing, or syntactical analysis, parsing of a natural language sentence. the outcome is a parse tree that you are seeing here. that tells us the structure of the sentence, so that we know how we can interpret this sentence. but this is not semantics yet. so in order to get the meaning we would have to map these phrases and these structures into some real world antithesis that we have in our mind. so dog is a concept that we know, and boy is a concept that we know. so connecting these phrases that we know is understanding. now for a computer, would have to formally represent these entities by using symbols. so dog, d1 means d1 is a dog. boy, b1 means b1 refers to a boy etc. and also represents the chasing action as a predicate. so, chasing is a predicate here with three arguments, d1, b1, and p1. which is playground. so this formal rendition of the semantics of this sentence. once we reach that level of understanding, we might also make inferences. for example, if we assume there's a rule that says if someone's being chased then the person can get scared, then we can infer this boy might be scared. this is the inferred meaning, based on additional knowledge. and finally, we might even further infer what this sentence is requesting, or why the person who say it in a sentence, is saying the sentence. and so, this has to do with purpose of saying the sentence. this is called speech act analysis or pragmatic analysis. which first to the use of language. so, in this case a person saying this may be reminding another person to bring back the dog. so this means when saying a sentence, the person actually takes an action. so the action here is to make a request. now, this slide clearly shows that in order to really understand a sentence there are a lot of things that a computer has to do. now, in general it's very hard for a computer will do everything, especially if you would want it to do everything correctly. this is very difficult. now, the main reason why natural language processing is very difficult, it's because it's designed it will make human communications efficient. as a result, for example, with only a lot of common sense knowledge. because we assume all of us have this knowledge, there's no need to encode this knowledge. that makes communication efficient. we also keep a lot of ambiguities, like, ambiguities of words. and this is again, because we assume we have the ability to disambiguate the word. so, there's no problem with having the same word to mean possibly different things in different context. yet for a computer this would be very difficult because a computer does not have the common sense knowledge that we do. so the computer will be confused indeed. and this makes it hard for natural language processing. indeed, it makes it very hard for every step in the slide that i showed you earlier. ambiguity is a main killer. meaning that in every step there are multiple choices, and the computer would have to decide whats the right choice and that decision can be very difficult as you will see also in a moment. and in general, we need common sense reasoning in order to fully understand the natural language. and computers today don't yet have that. that's why it's very hard for computers to precisely understand the natural language at this point. so here are some specific examples of challenges. think about the world-level ambiguity. a word like design can be a noun or a verb, so we've got ambiguous part of speech tag. root also has multiple meanings, it can be of mathematical sense, like in the square of, or can be root of a plant. syntactic ambiguity refers to different interpretations of a sentence in terms structures. so for example, natural language processing can actually be interpreted in two ways. so one is the ordinary meaning that we will be getting as we're talking about this topic. so, it's processing of natural language. but there's is also another possible interpretation which is to say language processing is natural. now we don't generally have this problem, but imagine for the computer to determine the structure, the computer would have to make a choice between the two. another classic example is a man saw a boy with a telescope. and this ambiguity lies in the question who had the telescope? this is called a prepositional phrase attachment ambiguity. meaning where to attach this prepositional phrase with the telescope. should it modify the boy? or should it be modifying, saw, the verb. another problem is anaphora resolution. in john persuaded bill to buy a tv for himself. does himself refer to john or bill? presupposition is another difficulty. he has quit smoking implies that he smoked before, and we need to have such a knowledge in order to understand the languages. because of these problems, the state of the art natural language processing techniques can not do anything perfectly. even for the simplest part of speech tagging, we still can not solve the whole problem. the accuracy that are listed here, which is about 97%, was just taken from some studies earlier. and these studies obviously have to be using particular data sets so the numbers here are not really meaningful if you take it out of the context of the data set that are used for evaluation. but i show these numbers mainly to give you some sense about the accuracy, or how well we can do things like this. it doesn't mean any data set accuracy would be precisely 97%. but, in general, we can do parsing speech tagging fairly well although not perfect. parsing would be more difficult, but for partial parsing, meaning to get some phrases correct, we can probably achieve 90% or better accuracy. but to get the complete parse tree correctly is still very, very difficult. for semantic analysis, we can also do some aspects of semantic analysis, particularly, extraction of entities and relations. for example, recognizing this is the person, that's a location, and this person and that person met in some place etc. we can also do word sense to some extent. the occurrence of root in this sentence refers to the mathematical sense etc. sentiment analysis is another aspect of semantic analysis that we can do. that means we can tag the senses as generally positive when it's talking about the product or talking about the person. inference, however, is very hard, and we generally cannot do that for any big domain and if it's only feasible for a very limited domain. and that's a generally difficult problem in artificial intelligence. speech act analysis is also very difficult and we can only do this probably for very specialized cases. and with a lot of help from humans to annotate enough data for the computers to learn from. so the slide also shows that computers are far from being able to understand natural language precisely. and that also explains why the text mining problem is difficult. because we cannot rely on mechanical approaches or computational methods to understand the language precisely. therefore, we have to use whatever we have today. a particular statistical machine learning method of statistical analysis methods to try to get as much meaning out from the text as possible. and, later you will see that there are actually many such algorithms that can indeed extract interesting model from text even though we cannot really fully understand it. meaning of all the natural language sentences precisely. [music",03_1-3-natural-language-content-analysis-part-1
84,https://www.coursera.org/learn/text-mining,07_1-7-word-association-mining-and-analysis.en.txt,text-mining/02_week-1/02_week-1-lessons/07_1-7-word-association-mining-and-analysis.en.txt,"[sound] this lecture is about the word association mining and analysis. in this lecture, we're going to talk about how to mine associations of words from text. now this is an example of knowledge about the natural language that we can mine from text data. here's the outline. we're going to first talk about what is word association and then explain why discovering such relations is useful and finally we're going to talk about some general ideas about how to mine word associations. in general there are two word relations and these are quite basic. one is called a paradigmatic relation. the other is syntagmatic relation. a and b have paradigmatic relation if they can be substituted for each other. that means the two words that have paradigmatic relation would be in the same semantic class, or syntactic class. and we can in general replace one by the other without affecting the understanding of the sentence. that means we would still have a valid sentence. for example, cat and dog, these two words have a paradigmatic relation because they are in the same class of animal. and in general, if you replace cat with dog in a sentence, the sentence would still be a valid sentence that you can make sense of. similarly monday and tuesday have paradigmatical relation. the second kind of relation is called syntagmatical relation. in this case, the two words that have this relation, can be combined with each other. so a and b have syntagmatic relation if they can be combined with each other in a sentence, that means these two words are semantically related. so for example, cat and sit are related because a cat can sit somewhere. similarly, car and drive are related semantically and they can be combined with each other to convey meaning. however, in general, we can not replace cat with sit in a sentence or car with drive in the sentence to still get a valid sentence, meaning that if we do that, the sentence will become somewhat meaningless. so this is different from paradigmatic relation. and these two relations are in fact so fundamental that they can be generalized to capture basic relations between units in arbitrary sequences. and definitely they can be generalized to describe relations of any items in a language. so, a and b don't have to be words and they can be phrases, for example. and they can even be more complex phrases than just a non-phrase. if you think about the general problem of the sequence mining then we can think about the units being and the sequence data. then we think of paradigmatic relation as relations that are applied to units that tend to occur in a singular locations in a sentence, or in a sequence of data elements in general. so they occur in similar locations relative to the neighbors in the sequence. syntagmatical relation on the other hand is related to co-occurrent elements that tend to show up in the same sequence. so these two are complimentary and are basic relations of words. and we're interested in discovering them automatically from text data. discovering such worded relations has many applications. first, such relations can be directly useful for improving accuracy of many nlp tasks, and this is because this is part of our knowledge about a language. so if you know these two words are synonyms, for example, and then you can help a lot of tasks. and grammar learning can be also done by using such techniques. because if we can learn paradigmatic relations, then we form classes of words, syntactic classes for example. and if we learn syntagmatic relations, then we would be able to know the rules for putting together a larger expression based on component expressions. so we learn the structure and what can go with what else. word relations can be also very useful for many applications in text retrieval and mining. for example, in search and text retrieval, we can use word associations to modify a query, and this can be used to introduce additional related words into a query and make the query more effective. it's often called a query expansion. or you can use related words to suggest related queries to the user to explore the information space. another application is to use word associations to automatically construct the top of the map for browsing. we can have words as nodes and associations as edges. a user could navigate from one word to another to find information in the information space. finally, such word associations can also be used to compare and summarize opinions. for example, we might be interested in understanding positive and negative opinions about the iphone 6. in order to do that, we can look at what words are most strongly associated with a feature word like battery in positive versus negative reviews. such a syntagmatical relations would help us show the detailed opinions about the product. so, how can we discover such associations automatically? now, here are some intuitions about how to do that. now let's first look at the paradigmatic relation. here we essentially can take advantage of similar context. so here you see some simple sentences about cat and dog. you can see they generally occur in similar context, and that after all is the definition of paradigmatic relation. on the right side you can kind of see i extracted expressly the context of cat and dog from this small sample of text data. i've taken away cat and dog from these sentences, so that you can see just the context. now, of course we can have different perspectives to look at the context. for example, we can look at what words occur in the left part of this context. so we can call this left context. what words occur before we see cat or dog? so, you can see in this case, clearly dog and cat have similar left context. you generally say his cat or my cat and you say also, my dog and his dog. so that makes them similar in the left context. similarly, if you look at the words that occur after cat and dog, which we can call right context, they are also very similar in this case. of course, it's an extreme case, where you only see eats. and in general, you'll see many other words, of course, that can't follow cat and dog. you can also even look at the general context. and that might include all the words in the sentence or in sentences around this word. and even in the general context, you also see similarity between the two words. so this was just a suggestion that we can discover paradigmatic relation by looking at the similarity of context of words. so, for example, if we think about the following questions. how similar are context of cat and context of dog? in contrast how similar are context of cat and context of computer? now, intuitively, we're to imagine the context of cat and the context of dog would be more similar than the context of cat and context of the computer. that means, in the first case the similarity value would be high, between the context of cat and dog, where as in the second, the similarity between context of cat and computer would be low because they all not having a paradigmatic relationship and imagine what words occur after computer in general. it would be very different from what words occur after cat. so this is the basic idea of what this covering, paradigmatic relation. what about the syntagmatic relation? well, here we're going to explore the correlated occurrences, again based on the definition of syntagmatic relation. here you see the same sample of text. but here we're interested in knowing what other words are correlated with the verb eats and what words can go with eats. and if you look at the right side of this slide and you see, i've taken away the two words around eats. i've taken away the word to its left and also the word to its right in each sentence. and then we ask the question, what words tend to occur to the left of eats? and what words tend to occur to the right of eats? now thinking about this question would help us discover syntagmatic relations because syntagmatic relations essentially captures such correlations. so the important question to ask for syntagmatical relation is, whenever eats occurs, what other words also tend to occur? so the question here has to do with whether there are some other words that tend to co-occur together with each. meaning that whenever you see eats you tend to see the other words. and if you don't see eats, probably, you don't see other words often either. so this intuition can help discover syntagmatic relations. now again, consider example. how helpful is occurrence of eats for predicting occurrence of meat? right. all right, so knowing whether eats occurs in a sentence would generally help us predict whether meat also occurs indeed. and if we see eats occur in the sentence, and that should increase the chance that meat would also occur. in contrast, if you look at the question in the bottom, how helpful is the occurrence of eats for predicting of occurrence of text? because eats and text are not really related, so knowing whether eats occurred in the sentence doesn't really help us predict the weather, text also occurs in the sentence. so this is in contrast to the question about eats and meat. this also helps explain that intuition behind the methods of what discovering syntagmatic relations. mainly we need to capture the correlation between the occurrences of two words. so to summarize the general ideas for discovering word associations are the following. for paradigmatic relation, we present each word by its context. and then compute its context similarity. we're going to assume the words that have high context similarity to have paradigmatic relation. for syntagmatic relation, we will count how many times two words occur together in a context, which can be a sentence, a paragraph, or a document even. and we're going to compare their co-occurrences with their individual occurrences. we're going to assume words with high co-occurrences but relatively low individual occurrences to have syntagmatic relations because they attempt to occur together and they don't usually occur alone. note that the paradigmatic relation and the syntagmatic relation are actually closely related in that paradigmatically related words tend to have syntagmatic relation with the same word. they tend to be associated with the same word, and that suggests that we can also do join the discovery of the two relations. so these general ideas can be implemented in many different ways. and the course won't cover all of them, but we will cover at least some of the methods that are effective for discovering these relations. [music",07_1-7-word-association-mining-and-analysis
85,https://www.coursera.org/learn/text-mining,09_1-9-paradigmatic-relation-discovery-part-2.en.txt,text-mining/02_week-1/02_week-1-lessons/09_1-9-paradigmatic-relation-discovery-part-2.en.txt,"in this lecture, we continue discussing paradigmatical relation discovery. earlier we introduced a method called expected overlap of words in context. in this method, we represent each context by a word vector that represents the probability of a word in the context. we measure the similarity by using the.product, which can be interpreted as the probability that two randomly picked words from the two contexts are identical. we also discussed the two problems of this method. the first is that it favors matching one frequent term very well over matching more distinct terms. it put too much emphasis on matching one term very well. the second is that it treats every word equally. even a common word like the will contribute equally as content word like eats. so now we are going to talk about how to solve these problems. more specifically, we're going to introduce some retrieval heuristics used in text retrieval. these heuristics can effectively solve these problems, as these problems also occur in text retrieval when we match a query that though with a document vector. so to address the first problem, we can use a sublinear transformation of tone frequency. that is, we don't have to use the raw frequency count of a term to represent the context. we can transform it into some form that wouldn't emphasize so much on the raw frequency. to address the synchronous problem, we can put more weight on rare terms. that is we can reward matching a real-world. this heuristic is called the idf term weighting in text retrieval. idf stands for inverse document frequency. so now, we're going to talk about the two heuristics in more detail. first let's talk about the tf transformation. that is to convert the raw count of a word in the document into some weight that reflects our belief about how important this word in the document. so that will be denoted by tf of w,d. that's shown in the y-axis. now, in general, there are many ways to map that. let's first look at the simple way of mapping. in this case, we're going to say, well, any non-zero counts will be mapped to one and the zero count will be mapped to zero. so with this mapping all the frequencies will be mapped to only two values; zero or one. the mapping function is shown here as a flat line here. now, this is naive because it's not the frequency of words. however, this actually has the advantage of emphasizing matching all the words in the context. so it does not allow a frequency of word to dominate the matching. now, the approach that we have taken earlier in the expected overlap count approach, is a linear transformation. we basically, take y as the same as x. so we use the raw count as a representation. that created the problem that we just talked about namely; it emphasize too much on just matching one frequent term. matching one frequent term can contribute a lot. so we can have a lot of other interesting transformations in between the two extremes, and they generally form a sublinear transformation. so for example, one possibility is to take logarithm of the raw count, and this will give us curve that looks like this, that you are seeing here. in this case, you can see the high frequency counts. the high counts are penalize a little bit, so the curve is a sublinear curve and it brings down the weight of those really high counts. this is what we want, because it prevents that terms from dominating the scoring function. now, there is also another interesting transformation called a bm25 transformation which has been shown to be very effective for retrieval. in this transformation, we have a form that looks like this. so it's k plus one multiplied by x divided by x plus k, where k is a parameter, x is the count, the raw count of a word. now, the transformation is very interesting in that it can actually go from one extreme to the other extreme by varying k. it also interesting that it has upper bound, k plus one in this case. so this puts a very strict constraint on high frequency terms, because their weight would never exceed k plus one. as we vary k, if we can simulate the two extremes. so when k is set to zero, we roughly have the 0,1 vector. whereas when we set k to a very large value, it will behave more like the linear transformation. so this transformation function is by far the most effective transformation function for text retrieval and it also makes sense for our problem setup. so we just talked about how to solve the problem of overemphasizing a frequency term now let's look at the second problem, and that is how we can penalize popular terms. matching ""the"" is not surprising, because ""the"" occurs everywhere. but matching ""eats"" would count a lot. so how can we address that problem? now in this case, we can use the idf weighting. that's commonly used in retrieval. idf stands for inverse document frequency. document frequency means the count of the total number of documents that contain a particular word. so here we show that the idf measure is defined as a logarithm function of the number of documents that match a term or document frequency. so k is the number of documents containing word or document frequency and m here is the total number of documents in the collection. the idf function is giving a higher value for a lower k, meaning that it rewards rare term. the maximum value is log of m plus one. that's when the word occurred just once in a context. so that's a very rare term, the rare is term in the whole collection. the lowest value you can see here is when k reaches its maximum which would be m. so that would be a very low value, close to zero in fact. so this of course measure is used in search where we naturally have a collection. in our case, what would be our collection? well, we can also use the context that we can collect all the words as our collection. that is to say, a word that's popular in the collection in general, would also have a low idf. because depending on the dataset, we can construct the context vectors in different ways. but in the end if a term is very frequent in the original dataset, then it will still be frequent in the collective context documents. so how can we add these heuristics to improve our similarity function? well, here's one way and there are many other ways that are possible. but this is a reasonable way, where we can adapt the bm25 retrieval model for paradigmatical relation mining. in this case, we define the document vector as containing elements representing normalized bm25 values. so in this normalization function, we take sum over all the words and we normalize the weight of each word by the sum of the weights of all the words. this is to again ensure all the xi's will sum to one in this vector. so this would be very similar to what we had before, in that this vector is actually something similar to a word distribution, all the xi's will sum to one. now, the weight of bm25 for each word is defined here. if you compare this with our old definition where we just have a normalized count of this one, right? so we only have this one and the document lens or the total counts of words in that context to document, and that's what we had before. but now with the bm25 transformation, we introduced something else. first, of course, this extra occurrence of this count is just to achieve the sub-linear normalization. but we also see we introduced the parameter, k, here, and this parameter is generally a non-active number, although zero is also possible. but this controls the upper bound, and also controls to what extent it simulates the linear transformation. so this is one parameter, but we also see there is another parameter here, b, and this would be within zero and one. this is a parameter to control lens normalization. in this case, the normalization formula has a average document lens here. this is computed up by taking the average of the lenses of all the documents in the collection. in this case, all the lenses of all the context of documents that we're considering. so this average documents will be a constant for any given collection. so it actually is only affecting the effect of the parameter, b, here because this is a constant. but i kept it here because it's a constant that's used for in retrieval where it would give us a stabilized interpretation of parameter, b. but for our purpose, this will be a constant so it would only be affecting the lens normalization together with parameter, b. now, with this definition then, we have a new way to define our document of vectors, and we can compute the vector d2 in the same way. the difference is that the high-frequency terms will now have a somewhat lower weights. this would help us control the inference of these high-frequency terms. now, the idea can be added here in the scoring function. that means we'll introduce a weight for matching each term. so you may recall this sum indicates all the possible words that can be overlap between the two contexts. the x_i and the y_i are probabilities of picking the word from both contexts. therefore, it indicates how likely we'll see a match on this word. now, idf would give us the importance of matching this word. a common word will be worth less than a rare word. so we emphasize more on matching rare words now. so with this modification, then the new function will likely address those two problems. now, interestingly we can also use this approach to discover syntagmatic relations. in general, when we re-brand a context with a term vector, we would likely see some terms have high weights and other terms have low weights. depending on how we assign weights to these terms, we might be able to use these weights to discover the words that are strongly associated with the candidate word in the context. so let's take a look at the term vector in more detail here. we have each x_i defined as the normalized weight of bm25. now, this weight alone only reflects how frequent the word occurs in the context. but we can't just say any frequent term in the context that would be correlated with the candidate word because many common words like 'the' will occur frequently in all the context. but if we apply idf weighting as you see here, we can then re-weight these terms based on idf. that means the words that are common like 'the' will get penalized. so now the highest weighted terms will not be those common terms because they have lower idfs. instead, those terms would be the terms that are frequent in the context, but not frequent in the collection. so those are clearly the words that tend to occur in the context of the candidate word, for example, cat. so for this reason, the highly weighted terms in this idea of weighted vector can also be assumed to be candidates for syntagmatic relations. now, of course, this is only a by-product of our approach for discovering paradigmatic relations. in the next lecture, we're going to talk more about how to discover syntagmatic relations. but it clearly shows the relation between discovering the two relations. indeed they can be discovered in a joint manner by leveraging such associations. so to summarize, the main idea for discovering paradigmatic relations is to collect the context of a candidate word to form a pseudo document. this is typically represented as a bag of words. then compute the similarity of the corresponding context documents of two candidate words. then we can take the highly similar word pairs, and treat them as having paradigmatic relations. these are the words that share similar contexts. there are many different ways to implement this general idea. we just talked about some of the approaches. more specifically, we talked about using text retrieval models to help us design effective similarity function to compute the paradigmatic relations. more specifically, we have used the bm25 and idf weighting to discover paradigmatic relation. these approaches also represent the state of the art in text retrieval techniques. finally, syntagmatic relations can also be discovered as a by-product when we discover paradigmatic relations",09_1-9-paradigmatic-relation-discovery-part-2
86,https://www.coursera.org/learn/text-mining,06_2-6-topic-mining-and-analysis-term-as-topic.en.txt,text-mining/03_week-2/02_week-2-lessons/06_2-6-topic-mining-and-analysis-term-as-topic.en.txt,"[music] this lecture is about topic mining and analysis. we're going to talk about using a term as topic. this is a slide that you have seen in a earlier lecture where we define the task of topic mining and analysis. we also raised the question, how do we exactly define the topic of theta? so in this lecture, we're going to offer one way to define it, and that's our initial idea. our idea here is defining a topic simply as a term. a term can be a word or a phrase. and in general, we can use these terms to describe topics. so our first thought is just to define a topic as one term. for example, we might have terms like sports, travel, or science, as you see here. now if we define a topic in this way, we can then analyze the coverage of such topics in each document. here for example, we might want to discover to what extent document one covers sports. and we found that 30% of the content of document one is about sports. and 12% is about the travel, etc. we might also discover document two does not cover sports at all. so the coverage is zero, etc. so now, of course, as we discussed in the task definition for topic mining and analysis, we have two tasks. one is to discover the topics. and the second is to analyze coverage. so let's first think about how we can discover topics if we represent each topic by a term. so that means we need to mine k topical terms from a collection. now there are, of course, many different ways of doing that. and we're going to talk about a natural way of doing that, which is also likely effective. so first of all, we're going to parse the text data in the collection to obtain candidate terms. here candidate terms can be words or phrases. let's say the simplest solution is to just take each word as a term. these words then become candidate topics. then we're going to design a scoring function to match how good each term is as a topic. so how can we design such a function? well there are many things that we can consider. for example, we can use pure statistics to design such a scoring function. intuitively, we would like to favor representative terms, meaning terms that can represent a lot of content in the collection. so that would mean we want to favor a frequent term. however, if we simply use the frequency to design the scoring function, then the highest scored terms would be general terms or functional terms like the, etc. those terms occur very frequently english. so we also want to avoid having such words on the top so we want to penalize such words. but in general, we would like to favor terms that are fairly frequent but not so frequent. so a particular approach could be based on tf-idf weighting from retrieval. and tf stands for term frequency. idf stands for inverse document frequency. we talked about some of these ideas in the lectures about the discovery of word associations. so these are statistical methods, meaning that the function is defined mostly based on statistics. so the scoring function would be very general. it can be applied to any language, any text. but when we apply such a approach to a particular problem, we might also be able to leverage some domain-specific heuristics. for example, in news we might favor title words actually general. we might want to favor title words because the authors tend to use the title to describe the topic of an article. if we're dealing with tweets, we could also favor hashtags, which are invented to denote topics. so naturally, hashtags can be good candidates for representing topics. anyway, after we have this design scoring function, then we can discover the k topical terms by simply picking k terms with the highest scores. now, of course, we might encounter situation where the highest scored terms are all very similar. they're semantically similar, or closely related, or even synonyms. so that's not desirable. so we also want to have coverage over all the content in the collection. so we would like to remove redundancy. and one way to do that is to do a greedy algorithm, which is sometimes called a maximal marginal relevance ranking. basically, the idea is to go down the list based on our scoring function and gradually take terms to collect the k topical terms. the first term, of course, will be picked. when we pick the next term, we're going to look at what terms have already been picked and try to avoid picking a term that's too similar. so while we are considering the ranking of a term in the list, we are also considering the redundancy of the candidate term with respect to the terms that we already picked. and with some thresholding, then we can get a balance of the redundancy removal and also high score of a term. okay, so after this that will get k topical terms. and those can be regarded as the topics that we discovered from the connection. next, let's think about how we're going to compute the topic coverage pi sub ij. so looking at this picture, we have sports, travel and science and these topics. and now suppose you are give a document. how should we pick out coverage of each topic in the document? well, one approach can be to simply count occurrences of these terms. so for example, sports might have occurred four times in this this document and travel occurred twice, etc. and then we can just normalize these counts as our estimate of the coverage probability for each topic. so in general, the formula would be to collect the counts of all the terms that represent the topics. and then simply normalize them so that the coverage of each topic in the document would add to one. this forms a distribution of the topics for the document to characterize coverage of different topics in the document. now, as always, when we think about idea for solving problem, we have to ask the question, how good is this one? or is this the best way of solving problem? so now let's examine this approach. in general, we have to do some empirical evaluation by using actual data sets and to see how well it works. well, in this case let's take a look at a simple example here. and we have a text document that's about a nba basketball game. so in terms of the content, it's about sports. but if we simply count these words that represent our topics, we will find that the word sports actually did not occur in the article, even though the content is about the sports. so the count of sports is zero. that means the coverage of sports would be estimated as zero. now of course, the term science also did not occur in the document and it's estimate is also zero. and that's okay. but sports certainly is not okay because we know the content is about sports. so this estimate has problem. what's worse, the term travel actually occurred in the document. so when we estimate the coverage of the topic travel, we have got a non-zero count. so its estimated coverage will be non-zero. so this obviously is also not desirable. so this simple example illustrates some problems of this approach. first, when we count what words belong to to the topic, we also need to consider related words. we can't simply just count the topic word sports. in this case, it did not occur at all. but there are many related words like basketball, game, etc. so we need to count the related words also. the second problem is that a word like star can be actually ambiguous. so here it probably means a basketball star, but we can imagine it might also mean a star on the sky. so in that case, the star might actually suggest, perhaps, a topic of science. so we need to deal with that as well. finally, a main restriction of this approach is that we have only one term to describe the topic, so it cannot really describe complicated topics. for example, a very specialized topic in sports would be harder to describe by using just a word or one phrase. we need to use more words. so this example illustrates some general problems with this approach of treating a term as topic. first, it lacks expressive power. meaning that it can only represent the simple general topics, but it cannot represent the complicated topics that might require more words to describe. second, it's incomplete in vocabulary coverage, meaning that the topic itself is only represented as one term. it does not suggest what other terms are related to the topic. even if we're talking about sports, there are many terms that are related. so it does not allow us to easily count related terms to order, conversion to coverage of this topic. finally, there is this problem of word sense disintegration. a topical term or related term can be ambiguous. for example, basketball star versus star in the sky. so in the next lecture, we're going to talk about how to solve the problem with of a topic. [music",06_2-6-topic-mining-and-analysis-term-as-topic
87,https://www.coursera.org/learn/text-mining,01_2-1-syntagmatic-relation-discovery-entropy.en.txt,text-mining/03_week-2/02_week-2-lessons/01_2-1-syntagmatic-relation-discovery-entropy.en.txt,"[sound]. this lecture is about the syntagmatic relation discovery, and entropy. in this lecture, we're going to continue talking about word association mining. in particular, we're going to talk about how to discover syntagmatic relations. and we're going to start with the introduction of entropy, which is the basis for designing some measures for discovering such relations. by definition, syntagmatic relations hold between words that have correlated co-occurrences. that means, when we see one word occurs in context, we tend to see the occurrence of the other word. so, take a more specific example, here. we can ask the question, whenever eats occurs, what other words also tend to occur? looking at the sentences on the left, we see some words that might occur together with eats, like cat, dog, or fish is right. but if i take them out and if you look at the right side where we only show eats and some other words, the question then is. can you predict what other words occur to the left or to the right? right so this would force us to think about what other words are associated with eats. if they are associated with eats, they tend to occur in the context of eats. more specifically our prediction problem is to take any text segment which can be a sentence, a paragraph, or a document. and then ask i the question, is a particular word present or absent in this segment? right here we ask about the word w. is w present or absent in this segment? now what's interesting is that some words are actually easier to predict than other words. if you take a look at the three words shown here, meat, the, and unicorn, which one do you think is easier to predict? now if you think about it for a moment you might conclude that the is easier to predict because it tends to occur everywhere. so i can just say, well that would be in the sentence. unicorn is also relatively easy because unicorn is rare, is very rare. and i can bet that it doesn't occur in this sentence. but meat is somewhere in between in terms of frequency. and it makes it harder to predict because it's possible that it occurs in a sentence or the segment, more accurately. but it may also not occur in the sentence, so now let's study this problem more formally. so the problem can be formally defined as predicting the value of a binary random variable. here we denote it by x sub w, w denotes a word, so this random variable is associated with precisely one word. when the value of the variable is 1, it means this word is present. when it's 0, it means the word is absent. and naturally, the probabilities for 1 and 0 should sum to 1, because a word is either present or absent in a segment. there's no other choice. so the intuition with this concept earlier can be formally stated as follows. the more random this random variable is, the more difficult the prediction will be. now the question is how does one quantitatively measure the randomness of a random variable like x sub w? how in general, can we quantify the randomness of a variable and that's why we need a measure called entropy and this measure introduced in information theory to measure the randomness of x. there is also some connection with information here but that is beyond the scope of this course. so for our purpose we just treat entropy function as a function defined on a random variable. in this case, it is a binary random variable, although the definition can be easily generalized for a random variable with multiple values. now the function form looks like this, there's the sum of all the possible values for this random variable. inside the sum for each value we have a product of the probability that the random variable equals this value and log of this probability. and note that there is also a negative sign there. now entropy in general is non-negative. and that can be mathematically proved. so if we expand this sum, we'll see that the equation looks like the second one. where i explicitly plugged in the two values, 0 and 1. and sometimes when we have 0 log of 0, we would generally define that as 0, because log of 0 is undefined. so this is the entropy function. and this function will give a different value for different distributions of this random variable. and it clearly depends on the probability that the random variable taking value of 1 or 0. if we plot this function against the probability that the random variable is equal to 1. and then the function looks like this. at the two ends, that means when the probability of x equals 1 is very small or very large, then the entropy function has a low value. when it's 0.5 in the middle then it reaches the maximum. now if we plot the function against the probability that x is taking a value of 0 and the function would show exactly the same curve here, and you can imagine why. and so that's because the two probabilities are symmetric, and completely symmetric. so an interesting question you can think about in general is for what kind of x does entropy reach maximum or minimum. and we can in particular think about some special cases. for example, in one case, we might have a random variable that always takes a value of 1. the probability is 1. or there's a random variable that is equally likely taking a value of one or zero. so in this case the probability that x equals 1 is 0.5. now which one has a higher entropy? it's easier to look at the problem by thinking of a simple example using coin tossing. so when we think about random experiments like tossing a coin, it gives us a random variable, that can represent the result. it can be head or tail. so we can define a random variable x sub coin, so that it's 1 when the coin shows up as head, it's 0 when the coin shows up as tail. so now we can compute the entropy of this random variable. and this entropy indicates how difficult it is to predict the outcome of a coin toss. so we can think about the two cases. one is a fair coin, it's completely fair. the coin shows up as head or tail equally likely. so the two probabilities would be a half. right? so both are equal to one half. another extreme case is completely biased coin, where the coin always shows up as heads. so it's a completely biased coin. now let's think about the entropies in the two cases. and if you plug in these values you can see the entropies would be as follows. for a fair coin we see the entropy reaches its maximum, that's 1. for the completely biased coin, we see it's 0. and that intuitively makes a lot of sense. because a fair coin is most difficult to predict. whereas a completely biased coin is very easy to predict. we can always say, well, it's a head. because it is a head all the time. so they can be shown on the curve as follows. so the fair coin corresponds to the middle point where it's very uncertain. the completely biased coin corresponds to the end point where we have a probability of 1.0 and the entropy is 0. so, now let's see how we can use entropy for word prediction. let's think about our problem is to predict whether w is present or absent in this segment. again, think about the three words, particularly think about their entropies. now we can assume high entropy words are harder to predict. and so we now have a quantitative way to tell us which word is harder to predict. now if you look at the three words meat, the, unicorn, again, and we clearly would expect meat to have a higher entropy than the unicorn. in fact if you look at the entropy of the, it's close to zero. because it occurs everywhere. so it's like a completely biased coin. therefore the entropy is zero. [music",01_2-1-syntagmatic-relation-discovery-entropy
88,https://www.coursera.org/learn/text-mining,05_2-5-topic-mining-and-analysis-motivation-and-task-definition.en.txt,text-mining/03_week-2/02_week-2-lessons/05_2-5-topic-mining-and-analysis-motivation-and-task-definition.en.txt,"[sound] >> this lecture is about topic mining and analysis. we're going to talk about its motivation and task definition. in this lecture we're going to talk about different kind of mining task. as you see on this road map, we have just covered mining knowledge about language, namely discovery of word associations such as paradigmatic and relations and syntagmatic relations. now, starting from this lecture, we're going to talk about mining another kind of knowledge, which is content mining, and trying to discover knowledge about the main topics in the text. and we call that topic mining and analysis. in this lecture, we're going to talk about its motivation and the task definition. so first of all, let's look at the concept of topic. so topic is something that we all understand, i think, but it's actually not that easy to formally define. roughly speaking, topic is the main idea discussed in text data. and you can think of this as a theme or subject of a discussion or conversation. it can also have different granularities. for example, we can talk about the topic of a sentence. a topic of article, aa topic of paragraph or the topic of all the research articles in the research library, right, so different grand narratives of topics obviously have different applications. indeed, there are many applications that require discovery of topics in text, and they're analyzed then. here are some examples. for example, we might be interested in knowing about what are twitter users are talking about today? are they talking about nba sports, or are they talking about some international events, etc.? or we are interested in knowing about research topics. for example, one might be interested in knowing what are the current research topics in data mining, and how are they different from those five years ago? now this involves discovery of topics in data mining literatures and also we want to discover topics in today's literature and those in the past. and then we can make a comparison. we might also be also interested in knowing what do people like about some products like the iphone 6, and what do they dislike? and this involves discovering topics in positive opinions about iphone 6 and also negative reviews about it. or perhaps we're interested in knowing what are the major topics debated in 2012 presidential election? and all these have to do with discovering topics in text and analyzing them, and we're going to talk about a lot of techniques for doing this. in general we can view a topic as some knowledge about the world. so from text data we expect to discover a number of topics, and then these topics generally provide a description about the world. and it tells us something about the world. about a product, about a person etc. now when we have some non-text data, then we can have more context for analyzing the topics. for example, we might know the time associated with the text data, or locations where the text data were produced, or the authors of the text, or the sources of the text, etc. all such meta data, or context variables can be associated with the topics that we discover, and then we can use these context variables help us analyze patterns of topics. for example, looking at topics over time, we would be able to discover whether there's a trending topic, or some topics might be fading away. soon you are looking at topics in different locations. we might know some insights about people's opinions in different locations. so that's why mining topics is very important. now, let's look at the tasks of topic mining and analysis. in general, it would involve first discovering a lot of topics, in this case, k topics. and then we also would like to know, which topics are covered in which documents, to what extent. so for example, in document one, we might see that topic 1 is covered a lot, topic 2 and topic k are covered with a small portion. and other topics, perhaps, are not covered. document two, on the other hand, covered topic 2 very well, but it did not cover topic 1 at all, and it also covers topic k to some extent, etc., right? so now you can see there are generally two different tasks, or sub-tasks, the first is to discover k topics from a collection of text laid out. what are these k topics? okay, major topics in the text they are. the second task is to figure out which documents cover which topics to what extent. so more formally, we can define the problem as follows. first, we have, as input, a collection of n text documents. here we can denote the text collection as c, and denote text article as d i. and, we generally also need to have as input the number of topics, k. but there may be techniques that can automatically suggest a number of topics. but in the techniques that we will discuss, which are also the most useful techniques, we often need to specify a number of topics. now the output would then be the k topics that we would like to discover, in order as theta sub one through theta sub k. also we want to generate the coverage of topics in each document of d sub i and this is denoted by pi sub i j. and pi sub ij is the probability of document d sub i covering topic theta sub j. so obviously for each document, we have a set of such values to indicate to what extent the document covers, each topic. and we can assume that these probabilities sum to one. because a document won't be able to cover other topics outside of the topics that we discussed, that we discovered. so now, the question is, how do we define theta sub i, how do we define the topic? now this problem has not been completely defined until we define what is exactly theta. so in the next few lectures, we're going to talk about different ways to define theta. [music",05_2-5-topic-mining-and-analysis-motivation-and-task-definition
89,https://www.coursera.org/learn/text-mining,10_2-10-probabilistic-topic-models-mining-one-topic.en.txt,text-mining/03_week-2/02_week-2-lessons/10_2-10-probabilistic-topic-models-mining-one-topic.en.txt,"[sound] this lecture is a continued discussion of probabilistic topic models. in this lecture, we're going to continue discussing probabilistic models. we're going to talk about a very simple case where we are interested in just mining one topic from one document. so in this simple setup, we are interested in analyzing one document and trying to discover just one topic. so this is the simplest case of topic model. the input now no longer has k, which is the number of topics because we know there is only one topic and the collection has only one document, also. in the output, we also no longer have coverage because we assumed that the document covers this topic 100%. so the main goal is just to discover the world of probabilities for this single topic, as shown here. as always, when we think about using a generating model to solve such a problem, we start with thinking about what kind of data we are going to model or from what perspective we're going to model the data or data representation. and then we're going to design a specific model for the generating of the data, from our perspective. where our perspective just means we want to take a particular angle of looking at the data, so that the model will have the right parameters for discovering the knowledge that we want. and then we'll be thinking about the microfunction or write down the microfunction to capture more formally how likely a data point will be obtained from this model. and the likelihood function will have some parameters in the function. and then we argue our interest in estimating those parameters for example, by maximizing the likelihood which will lead to maximum likelihood estimated. these estimator parameters will then become the output of the mining hours, which means we'll take the estimating parameters as the knowledge that we discover from the text. so let's look at these steps for this very simple case. later we'll look at this procedure for some more complicated cases. so our data, in this case is, just a document which is a sequence of words. each word here is denoted by x sub i. our model is a unigram language model. a word distribution that we hope to denote a topic and that's our goal. so we will have as many parameters as many words in our vocabulary, in this case m. and for convenience we're going to use theta sub i to denote the probability of word w sub i. and obviously these theta sub i's will sum to 1. now what does a likelihood function look like? well, this is just the probability of generating this whole document, that given such a model. because we assume the independence in generating each word so the probability of the document will be just a product of the probability of each word. and since some word might have repeated occurrences. so we can also rewrite this product in a different form. so in this line, we have rewritten the formula into a product over all the unique words in the vocabulary, w sub 1 through w sub m. now this is different from the previous line. well, the product is over different positions of words in the document. now when we do this transformation, we then would need to introduce a counter function here. this denotes the count of word one in document and similarly this is the count of words of n in the document because these words might have repeated occurrences. you can also see if a word did not occur in the document. it will have a zero count, therefore that corresponding term will disappear. so this is a very useful form of writing down the likelihood function that we will often use later. so i want you to pay attention to this, just get familiar with this notation. it's just to change the product over all the different words in the vocabulary. so in the end, of course, we'll use theta sub i to express this likelihood function and it would look like this. next, we're going to find the theta values or probabilities of these words that would maximize this likelihood function. so now lets take a look at the maximum likelihood estimate problem more closely. this line is copied from the previous slide. it's just our likelihood function. so our goal is to maximize this likelihood function. we will find it often easy to maximize the local likelihood instead of the original likelihood. and this is purely for mathematical convenience because after the logarithm transformation our function will becomes a sum instead of product. and we also have constraints over these these probabilities. the sum makes it easier to take derivative, which is often needed for finding the optimal solution of this function. so please take a look at this sum again, here. and this is a form of a function that you will often see later also, the more general topic models. so it's a sum over all the words in the vocabulary. and inside the sum there is a count of a word in the document. and this is macroed by the logarithm of a probability. so let's see how we can solve this problem. now at this point the problem is purely a mathematical problem because we are going to just the find the optimal solution of a constrained maximization problem. the objective function is the likelihood function and the constraint is that all these probabilities must sum to one. so, one way to solve the problem is to use lagrange multiplier approace. now this command is beyond the scope of this course but since lagrange multiplier is a very useful approach, i also would like to just give a brief introduction to this, for those of you who are interested. so in this approach we will construct a lagrange function, here. and this function will combine our objective function with another term that encodes our constraint and we introduce lagrange multiplier here, lambda, so it's an additional parameter. now, the idea of this approach is just to turn the constraint optimization into, in some sense, an unconstrained optimizing problem. now we are just interested in optimizing this lagrange function. as you may recall from calculus, an optimal point would be achieved when the derivative is set to zero. this is a necessary condition. it's not sufficient, though. so if we do that you will see the partial derivative, with respect to theta i here ,is equal to this. and this part comes from the derivative of the logarithm function and this lambda is simply taken from here. and when we set it to zero we can easily see theta sub i is related to lambda in this way. since we know all the theta i's must a sum to one we can plug this into this constraint, here. and this will allow us to solve for lambda. and this is just a net sum of all the counts. and this further allows us to then solve the optimization problem, eventually, to find the optimal setting for theta sub i. and if you look at this formula it turns out that it's actually very intuitive because this is just the normalized count of these words by the document ns, which is also a sum of all the counts of words in the document. so, after all this mess, after all, we have just obtained something that's very intuitive and this will be just our intuition where we want to maximize the data by assigning as much probability mass as possible to all the observed the words here. and you might also notice that this is the general result of maximum likelihood raised estimator. in general, the estimator would be to normalize counts and it's just sometimes the counts have to be done in a particular way, as you will also see later. so this is basically an analytical solution to our optimization problem. in general though, when the likelihood function is very complicated, we're not going to be able to solve the optimization problem by having a closed form formula. instead we have to use some numerical algorithms and we're going to see such cases later, also. so if you imagine what would we get if we use such a maximum likelihood estimator to estimate one topic for a single document d here? let's imagine this document is a text mining paper. now, what you might see is something that looks like this. on the top, you will see the high probability words tend to be those very common words, often functional words in english. and this will be followed by some content words that really characterize the topic well like text, mining, etc. and then in the end, you also see there is more probability of words that are not really related to the topic but they might be extraneously mentioned in the document. as a topic representation, you will see this is not ideal, right? that because the high probability words are functional words, they are not really characterizing the topic. so my question is how can we get rid of such common words? now this is the topic of the next module. we're going to talk about how to use probabilistic models to somehow get rid of these common words. [music",10_2-10-probabilistic-topic-models-mining-one-topic
90,https://www.coursera.org/learn/text-mining,07_2-7-topic-mining-and-analysis-probabilistic-topic-models.en.txt,text-mining/03_week-2/02_week-2-lessons/07_2-7-topic-mining-and-analysis-probabilistic-topic-models.en.txt,"this lecture is about probabilistic topic models for topic mining and analysis. in this lecture, we're going to continue talking about the topic mining and analysis. we're going to introduce probabilistic topic models. so this is a slide that you have seen earlier, where we discussed the problems with using a term as a topic. so, to solve these problems intuitively we need to use more words to describe the topic. and this will address the problem of lack of expressive power. when we have more words that we can use to describe the topic, that we can describe complicated topics. to address the second problem we need to introduce weights on words. this is what allows you to distinguish subtle differences in topics, and to introduce semantically related words in a fuzzy manner. finally, to solve the problem of word ambiguity, we need to split ambiguous word, so that we can disambiguate its topic. it turns out that all these can be done by using a probabilistic topic model. and that's why we're going to spend a lot of lectures to talk about this topic. so the basic idea here is that, improve the replantation of topic as one distribution. so what you see now is the older replantation. where we replanted each topic, it was just one word, or one term, or one phrase. but now we're going to use a word distribution to describe the topic. so here you see that for sports. we're going to use the word distribution over theoretical speaking all the words in our vocabulary. so for example, the high probability words here are sports, game, basketball, football, play, star, etc. these are sports related terms. and of course it would also give a non-zero probability to some other word like trouble which might be related to sports in general, not so much related to topic. in general we can imagine a non zero probability for all the words. and some words that are not read and would have very, very small probabilities. and these probabilities will sum to one. so that it forms a distribution of all the words. now intuitively, this distribution represents a topic in that if we assemble words from the distribution, we tended to see words that are ready to dispose. you can also see, as a very special case, if the probability of the mass is concentrated in entirely on just one word, it's sports. and this basically degenerates to the symbol foundation of a topic was just one word. but as a distribution, this topic of representation can, in general, involve many words to describe a topic and can model several differences in semantics of a topic. similarly we can model travel and science with their respective distributions. in the distribution for travel we see top words like attraction, trip, flight etc. whereas in science we see scientist, spaceship, telescope, or genomics, and, you know, science related terms. now that doesn't mean sports related terms will necessarily have zero probabilities for science. in general we can imagine all of these words we have now zero probabilities. it's just that for a particular topic in some words we have very, very small probabilities. now you can also see there are some words that are shared by these topics. when i say shared it just means even with some probability threshold, you can still see one word occurring much more topics. in this case i mark them in black. so you can see travel, for example, occurred in all the three topics here, but with different probabilities. it has the highest probability for the travel topic, 0.05. but with much smaller probabilities for sports and science, which makes sense. and similarly, you can see a star also occurred in sports and science with reasonably high probabilities. because they might be actually related to the two topics. so with this replantation it addresses the three problems that i mentioned earlier. first, it now uses multiple words to describe a topic. so it allows us to describe a fairly complicated topics. second, it assigns weights to terms. so now we can model several differences of semantics. and you can bring in related words together to model a topic. third, because we have probabilities for the same word in different topics, we can disintegrate the sense of word. in the text to decode it's underlying topic, to address all these three problems with this new way of representing a topic. so now of course our problem definition has been refined just slightly. the slight is very similar to what you've seen before except we have added refinement for what our topic is. now each topic is word distribution, and for each word distribution we know that all the probabilities should sum to one with all the words in the vocabulary. so you see a constraint here. and we still have another constraint on the topic coverage, namely pis. so all the pi sub ij's must sum to one for the same document. so how do we solve this problem? well, let's look at this problem as a computation problem. so we clearly specify it's input and output and illustrate it here on this side. input of course is our text data. c is our collection but we also generally assume we know the number of topics, k. or we hypothesize a number and then try to bind k topics, even though we don't know the exact topics that exist in the collection. and v is the vocabulary that has a set of words that determines what units would be treated as the basic units for analysis. in most cases we'll use words as the basis for analysis. and that means each word is a unique. now the output would consist of as first a set of topics represented by theta i's. each theta i is a word distribution. and we also want to know the coverage of topics in each document. so that's. that the same pi ijs that we have seen before. so given a set of text data we would like compute all these distributions and all these coverages as you have seen on this slide. now of course there may be many different ways of solving this problem. in theory, you can write the [inaudible] program to solve this problem, but here we're going to introduce a general way of solving this problem called a generative model. and this is, in fact, a very general idea and it's a principle way of using statistical modeling to solve text mining problems. and here i dimmed the picture that you have seen before in order to show the generation process. so the idea of this approach is actually to first design a model for our data. so we design a probabilistic model to model how the data are generated. of course, this is based on our assumption. the actual data aren't necessarily generating this way. so that gave us a probability distribution of the data that you are seeing on this slide. given a particular model and parameters that are denoted by lambda. so this template of actually consists of all the parameters that we're interested in. and these parameters in general will control the behavior of the probability risk model. meaning that if you set these parameters with different values and it will give some data points higher probabilities than others. now in this case of course, for our text mining problem or more precisely topic mining problem we have the following plans. first of all we have theta i's which is a word distribution snd then we have a set of pis for each document. and since we have n documents, so we have n sets of pis, and each set the pi up. the pi values will sum to one. so this is to say that we first would pretend we already have these word distributions and the coverage numbers. and then we can see how we can generate data by using such distributions. so how do we model the data in this way? and we assume that the data are actual symbols drawn from such a model that depends on these parameters. now one interesting question here is to think about how many parameters are there in total? now obviously we can already see n multiplied by k parameters. for pi's. we also see k theta i's. but each theta i is actually a set of probability values, right? it's a distribution of words. so i leave this as an exercise for you to figure out exactly how many parameters there are here. now once we set up the model then we can fit the model to our data. meaning that we can estimate the parameters or infer the parameters based on the data. in other words we would like to adjust these parameter values. until we give our data set the maximum probability. i just said, depending on the parameter values, some data points will have higher probabilities than others. what we're interested in, here, is what parameter values will give our data set the highest probability? so i also illustrate the problem with a picture that you see here. on the x axis i just illustrate lambda, the parameters, as a one dimensional variable. it's oversimplification, obviously, but it suffices to show the idea. and the y axis shows the probability of the data, observe. this probability obviously depends on this setting of lambda. so that's why it varies as you change the value of lambda. what we're interested here is to find the lambda star. that would maximize the probability of the observed data. so this would be, then, our estimate of the parameters. and these parameters, note that are precisely what we hoped to discover from text data. so we'd treat these parameters as actually the outcome or the output of the data mining algorithm. so this is the general idea of using a generative model for text mining. first, we design a model with some parameter values to fit the data as well as we can. after we have fit the data, we will recover some parameter value. we will use the specific parameter value and those would be the output of the algorithm. and we'll treat those as actually the discovered knowledge from text data. by varying the model of course we can discover different knowledge. so to summarize, we introduced a new way of representing topic, namely representing as word distribution and this has the advantage of using multiple words to describe a complicated topic.it also allow us to assign weights on words so we have more than several variations of semantics. we talked about the task of topic mining, and answers. when we define a topic as distribution. so the importer is a clashing of text articles and a number of topics and a vocabulary set and the output is a set of topics. each is a word distribution and also the coverage of all the topics in each document. and these are formally represented by theta i's and pi i's. and we have two constraints here for these parameters. the first is the constraints on the worded distributions. in each worded distribution the probability of all the words must sum to 1, all the words in the vocabulary. the second constraint is on the topic coverage in each document. a document is not allowed to recover a topic outside of the set of topics that we are discovering. so, the coverage of each of these k topics would sum to one for a document. we also introduce a general idea of using a generative model for text mining. and the idea here is, first we're design a model to model the generation of data. we simply assume that they are generative in this way. and inside the model we embed some parameters that we're interested in denoted by lambda. and then we can infer the most likely parameter values lambda star, given a particular data set. and we can then take the lambda star as knowledge discovered from the text for our problem. and we can adjust the design of the model and the parameters to discover various kinds of knowledge from text. as you will see later in the other lectures. [music",07_2-7-topic-mining-and-analysis-probabilistic-topic-models
91,https://www.coursera.org/learn/text-mining,08_2-8-probabilistic-topic-models-overview-of-statistical-language-models-part-1.en.txt,text-mining/03_week-2/02_week-2-lessons/08_2-8-probabilistic-topic-models-overview-of-statistical-language-models-part-1.en.txt,"[sound] >> this lecture is about the overview of statistical language models, which cover proper models as special cases. in this lecture we're going to give a overview of statical language models. these models are general models that cover probabilistic topic models as a special cases. so first off, what is a statistical language model? a statistical language model is basically a probability distribution over word sequences. so, for example, we might have a distribution that gives, today is wednesday a probability of .001. it might give today wednesday is, which is a non-grammatical sentence, a very, very small probability as shown here. and similarly another sentence, the eigenvalue is positive might get the probability of .00001. so as you can see such a distribution clearly is context dependent. it depends on the context of discussion. some word sequences might have higher probabilities than others but the same sequence of words might have different probability in different context. and so this suggests that such a distribution can actually categorize topic such a model can also be regarded as probabilistic mechanism for generating text. and that just means we can view text data as data observed from such a model. for this reason, we call such a model as generating model. so, now given a model we can then assemble sequences of words. so, for example, based on the distribution that i have shown here on this slide, when matter it say assemble a sequence like today is wednesday because it has a relative high probability. we might often get such a sequence. we might also get the item value as positive sometimes with a smaller probability and very, very occasionally we might get today is wednesday because it's probability is so small. so in general, in order to categorize such a distribution we must specify probability values for all these different sequences of words. obviously, it's impossible to specify that because it's impossible to enumerate all of the possible sequences of words. so in practice, we will have to simplify the model in some way. so, the simplest language model is called the unigram language model. in such a case, it was simply a the text is generated by generating each word independently. but in general, the words may not be generated independently. but after we make this assumption, we can significantly simplify the language more. basically, now the probability of a sequence of words, w1 through wn, will be just the product of the probability of each word. so for such a model, we have as many parameters as the number of words in our vocabulary. so here we assume we have n words, so we have n probabilities. one for each word. and then some to 1. so, now we assume that our text is a sample drawn according to this word distribution. that just means, we're going to draw a word each time and then eventually we'll get a text. so for example, now again, we can try to assemble words according to a distribution. we might get wednesday often or today often. and some other words like eigenvalue might have a small probability, etcetera. but with this, we actually can also compute the probability of every sequence, even though our model only specify the probabilities of words. and this is because of the independence. so specifically, we can compute the probability of today is wednesday. because it's just a product of the probability of today, the probability of is, and probability of wednesday. for example, i show some fake numbers here and when you multiply these numbers together you get the probability that today's wednesday. so as you can see, with n probabilities, one for each word, we actually can characterize the probability situation over all kinds of sequences of words. and so, this is a very simple model. ignore the word order. so it may not be, in fact, in some problems, such as for speech recognition, where you may care about the order of words. but it turns out to be quite sufficient for many tasks that involve topic analysis. and that's also what we're interested in here. so when we have a model, we generally have two problems that we can think about. one is, given a model, how likely are we to observe a certain kind of data points? that is, we are interested in the sampling process. the other is the estimation process. and that, is to think of the parameters of a model given, some observe the data and we're going to talk about that in a moment. let's first talk about the sampling. so, here i show two examples of water distributions or unigram language models. the first one has higher probabilities for words like a text mining association, it's separate. now this signals a topic about text mining because when we assemble words from such a distribution, we tend to see words that often occur in text mining contest. so in this case, if we ask the question about what is the probability of generating a particular document. then, we likely will see text that looks like a text mining paper. of course, the text that we generate by drawing words. this distribution is unlikely coherent. although, the probability of generating attacks mine [inaudible] publishing in the top conference is non-zero assuming that no word has a zero probability in the distribution. and that just means, we can essentially generate all kinds of text documents including very meaningful text documents. now, the second distribution show, on the bottom, has different than what was high probabilities. so food [inaudible] healthy [inaudible], etcetera. so this clearly indicates a different topic. in this case it's probably about health. so if we sample a word from such a distribution, then the probability of observing a text mining paper would be very, very small. on the other hand, the probability of observing a text that looks like a food nutrition paper would be high, relatively higher. so that just means, given a particular distribution, different than the text. now let's look at the estimation problem now. in this case, we're going to assume that we have observed the data. i will know exactly what the text data looks like. in this case, let's assume we have a text mining paper. in fact, it's abstract of the paper, so the total number of words is 100. and i've shown some counts of individual words here. now, if we ask the question, what is the most likely language model that has been used to generate this text data? assuming that the text is observed from some language model, what's our best guess of this language model? okay, so the problem now is just to estimate the probabilities of these words. as i've shown here. so what do you think? what would be your guess? would you guess text has a very small probability, or a relatively large probability? what about query? well, your guess probably would be dependent on how many times we have observed this word in the text data, right? and if you think about it for a moment. and if you are like many others, you would have guessed that, well, text has a probability of 10 out of 100 because i've observed the text 10 times in the text that has a total of 100 words. and similarly, mining has 5 out of 100. and query has a relatively small probability, just observed for once. so it's 1 out of 100. right, so that, intuitively, is a reasonable guess. but the question is, is this our best guess or best estimate of the parameters? of course, in order to answer this question, we have to define what do we mean by best, in this case, it turns out that our guesses are indeed the best. in some sense and this is called maximum likelihood estimate. and it's the best thing that, it will give the observer data our maximum probability. meaning that, if you change the estimate somehow, even slightly, then the probability of the observed text data will be somewhat smaller. and this is called a maximum likelihood estimate. [music",08_2-8-probabilistic-topic-models-overview-of-statistical-language-models-part-1
92,https://www.coursera.org/learn/text-mining,03_2-3-syntagmatic-relation-discovery-mutual-information-part-1.en.txt,text-mining/03_week-2/02_week-2-lessons/03_2-3-syntagmatic-relation-discovery-mutual-information-part-1.en.txt,"[sound]. this lecture is about the syntagmatic relation discovery and mutual information. in this lecture we are going to continue discussing syntagmatic relation discovery. in particular, we are going to talk about another the concept in the information series, we called it mutual information and how it can be used to discover syntagmatic relations. before we talked about the problem of conditional entropy and that is the conditional entropy computed different pairs of words. it is not really comparable, so that makes it harder with this cover, strong synagmatic relations globally from corpus. so now we are going to introduce mutual information, which is another concept in the information series that allows us to, sometimes, normalize the conditional entropy to make it more comparable across different pairs. in particular, mutual information in order to find i(x:y), matches the entropy reduction of x obtained from knowing y. more specifically the question we are interested in here is how much of an entropy of x can we obtain by knowing y. so mathematically it can be defined as the difference between the original entropy of x, and the condition of y of x given y. and you might see, as you can see here it can also be defined as reduction of entropy of y because of knowing x. now normally the two conditional interface h of x given y and the entropy of y given x are not equal, but interestingly, the reduction of entropy by knowing one of them, is actually equal. so, this quantity is called a mutual information in order to buy i here. and this function has some interesting properties, first it is also non-negative. this is easy to understand because the original entropy is always not going to be lower than the possibility reduced conditional entropy. in other words, the conditional entropy will never exceed the original entropy. knowing some information can always help us potentially, but will not hurt us in predicting x. the signal property is that it is symmetric like additional entropy is not symmetrical, mutual information is, and the third property is that it reaches its minimum, zero, if and only if the two random variables are completely independent. that means knowing one of them does not tell us anything about the other and this last property can be verified by simply looking at the equation above and it reaches 0 if and only the conditional entropy of x [inaudible] y is exactly the same as original entropy of x. so that means knowing why it did not help at all and that is when x and a y are completely independent. now when we fix x to rank different ys using conditional entropy would give the same order as ranking based on mutual information because in the function here, h(x) is fixed because x is fixed. so ranking based on mutual entropy is exactly the same as ranking based on the conditional entropy of x given y, but the mutual information allows us to compare different pairs of x and y. so, that is why mutual information is more general and in general, more useful. so, let us examine the intuition of using mutual information for syntagmatical relation mining. now, the question we ask forcing that relation mining is, whenever ""eats"" occurs, what other words also tend to occur? so this question can be framed as a mutual information question, that is, which words have high mutual information was eats, so computer the missing information between eats and other words. and if we do that, and it is basically a base on the same as conditional we will see that words that are strongly associated with eats, will have a high point. whereas words that are not related will have lower mutual information. for this, i will give some example here. the mutual information between ""eats"" and ""meats"", which is the same as between ""meats"" and ""eats,"" because the information is symmetrical is expected to be higher than the mutual information between eats and the, because knowing the does not really help us as a predictor. it is similar, and knowing eats does not help us predicting, the as well. and you also can easily see that the mutual information between a word and itself is the largest, which is equal to the entropy of this word and so, because in this case the reduction is maximum because knowing one allows us to predict the other completely. so the conditional entropy is zero, therefore the mutual information reaches its maximum. it is going to be larger, then are equal to the machine volume eats in other words. in other words picking any other word and the computer picking between eats and that word. you will not get any information larger the computation from eats and itself. so now let us look at how to compute the mute information. now in order to do that, we often use a different form of mutual information, and we can mathematically rewrite the mutual information into the form shown on this slide. where we essentially see a formula that computes what is called a kl-divergence or divergence. this is another term in information theory. it measures the divergence between two distributions. now, if you look at the formula, it is also sum over many combinations of different values of the two random variables but inside the sum, mainly we are doing a comparison between two joint distributions. the numerator has the joint, actual observed the joint distribution of the two random variables. the bottom part or the denominator can be interpreted as the expected joint distribution of the two random variables, if they were independent because when two random variables are independent, they are joined distribution is equal to the product of the two probabilities. so this comparison will tell us whether the two variables are indeed independent. if they are indeed independent then we would expect that the two are the same, but if the numerator is different from the denominator, that would mean the two variables are not independent and that helps measure the association. the sum is simply to take into consideration of all of the combinations of the values of these two random variables. in our case, each random variable can choose one of the two values, zero or one, so we have four combinations here. if we look at this form of mutual information, it shows that the mutual information matches the divergence of the actual joint distribution from the expected distribution under the independence assumption. the larger this divergence is, the higher the mutual information would be. so now let us further look at what are exactly the probabilities, involved in this formula of mutual information. and here, this is all the probabilities involve, and it is easy for you to verify that. basically, we have first to [inaudible] probabilities corresponding to the presence or absence of each word. so, for w1, we have two probabilities shown here. they should sum to one, because a word can either be present or absent. in the segment, and similarly for the second word, we also have two probabilities representing presence or absences of this word, and there is some to y as well. and finally, we have a lot of joined probabilities that represent the scenarios of co-occurrences of the two words, and they are shown here. and they sum to one because the two words can only have these four possible scenarios. either they both occur, so in that case both variables will have a value of one, or one of them occurs. there are two scenarios. in these two cases one of the random variables will be equal to one and the other will be zero and finally we have the scenario when none of them occurs. this is when the two variables taking a value of zero. so these are the probabilities involved in the calculation of mutual information, over here. once we know how to calculate these probabilities, we can easily calculate the mutual information. it is also interesting to know that there are actually some relations or constraint among these probabilities, and we already saw two of them, right? so in the previous slide, that you have seen that the marginal probabilities of these words sum to one and we also have seen this constraint, that says the two words have these four scenarios of co-occurrency, but we also have some additional constraints listed in the bottom. for example, this one means if we add up the probabilities that we observe the two words occur together and the probabilities when the first word occurs and the second word does not occur. we get exactly the probability that the first word is observed. in other words, when the word is observed. when the first word is observed, and there are only two scenarios, depending on whether the second word is also observed. so, this probability captures the first scenario when the second word actually is also observed, and this captures the second scenario when the second word is not observed. so, we only see the first word, and it is easy to see the other equations also follow the same reasoning. now these equations allow us to compute some probabilities based on other probabilities, and this can simplify the computation. so more specifically, if we know the probability that a word is present, like in this case, so if we know this, and if we know the probability of the presence of the second word, then we can easily compute the absence probability, right? it is very easy to use this equation to do that, and so we take care of the computation of these probabilities of presence and absence of each word. now let's look at the [inaudible] distribution. let us assume that we also have available the probability that they occurred together. now it is easy to see that we can actually compute all the rest of these probabilities based on these. specifically for example using this equation we can compute the probability that the first word occurred and the second word did not, because we know these probabilities in the boxes, and similarly using this equation we can compute the probability that we observe only the second word. word. and then finally, this probability can be calculated by using this equation because now this is known, and this is also known, and this is already known, right. so this can be easier to calculate. so now this can be calculated. so this slide shows that we only need to know how to compute these three probabilities that are shown in the boxes, naming the presence of each word and the co-occurence of both words, in a segment. [music",03_2-3-syntagmatic-relation-discovery-mutual-information-part-1
93,https://www.coursera.org/learn/text-mining,02_2-2-syntagmatic-relation-discovery-conditional-entropy.en.txt,text-mining/03_week-2/02_week-2-lessons/02_2-2-syntagmatic-relation-discovery-conditional-entropy.en.txt,"[sound] this lecture is about the syntagmatic relation discovery and conditional entropy. in this lecture, we're going to continue the discussion of word association mining and analysis. we're going to talk about the conditional entropy, which is useful for discovering syntagmatic relations. earlier, we talked about using entropy to capture how easy it is to predict the presence or absence of a word. now, we'll address a different scenario where we assume that we know something about the text segment. so now the question is, suppose we know that eats occurred in the segment. how would that help us predict the presence or absence of water, like in meat? and in particular, we want to know whether the presence of eats has helped us predict the presence of meat. and if we frame this using entrophy, that would mean we are interested in knowing whether knowing the presence of eats could reduce uncertainty about the meats. or, reduce the entrophy of the random variable corresponding to the presence or absence of meat. we can also ask as a question, what if we know of the absents of eats? would that also help us predict the presence or absence of meat? these questions can be addressed by using another concept called a conditioning entropy. so to explain this concept, let's first look at the scenario we had before, when we know nothing about the segment. so we have these probabilities indicating whether a word like meat occurs, or it doesn't occur in the segment. and we have an entropy function that looks like what you see on the slide. now suppose we know eats is present, so now we know the value of another random variable that denotes eats. now, that would change all these probabilities to conditional probabilities. where we look at the presence or absence of meat, given that we know eats occurred in the context. so as a result, if we replace these probabilities with their corresponding conditional probabilities in the entropy function, we'll get the conditional entropy. so this equation now here would be the conditional entropy. conditional on the presence of eats. so, you can see this is essentially the same entropy function as you have seen before, except that all the probabilities now have a condition. and this then tells us the entropy of meat, after we have known eats occurring in the segment. and of course, we can also define this conditional entropy for the scenario where we don't see eats. so if we know it did not occur in the segment, then this entry condition of entropy would capture the instances of meat in that condition. so now, putting different scenarios together, we have the completed definition of conditional entropy as follows. basically, we're going to consider both scenarios of the value of eats zero, one, and this gives us a probability that eats is equal to zero or one. basically, whether eats is present or absent. and this of course, is the conditional entropy of meat in that particular scenario. so if you expanded this entropy, then you have the following equation. where you see the involvement of those conditional probabilities. now in general, for any discrete random variables x and y, we have the conditional entropy is no larger than the entropy of the variable x. so basically, this is upper bound for the conditional entropy. that means by knowing more information about the segment, we want to be able to increase uncertainty. we can only reduce uncertainty. and that intuitively makes sense because as we know more information, it should always help us make the prediction. and cannot hurt the prediction in any case. now, what's interesting here is also to think about what's the minimum possible value of this conditional entropy? now, we know that the maximum value is the entropy of x. but what about the minimum, so what do you think? i hope you can reach the conclusion that the minimum possible value, would be zero. and it will be interesting to think about under what situation will achieve this. so, let's see how we can use conditional entropy to capture syntagmatic relation. now of course, this conditional entropy gives us directly one way to measure the association of two words. because it tells us to what extent, we can predict the one word given that we know the presence or absence of another word. now before we look at the intuition of conditional entropy in capturing syntagmatic relations, it's useful to think of a very special case, listed here. that is, the conditional entropy of the word given itself. so here, we listed this conditional entropy in the middle. so, it's here. so, what is the value of this? now, this means we know where the meat occurs in the sentence. and we hope to predict whether the meat occurs in the sentence. and of course, this is 0 because there's no incident anymore. once we know whether the word occurs in the segment, we'll already know the answer of the prediction. so this is zero. and that's also when this conditional entropy reaches the minimum. so now, let's look at some other cases. so this is a case of knowing the and trying to predict the meat. and this is a case of knowing eats and trying to predict the meat. which one do you think is smaller? no doubt smaller entropy means easier for prediction. which one do you think is higher? which one is not smaller? well, if you at the uncertainty, then in the first case, the doesn't really tell us much about the meat. so knowing the occurrence of the doesn't really help us reduce entropy that much. so it stays fairly close to the original entropy of meat. whereas in the case of eats, eats is related to meat. so knowing presence of eats or absence of eats, would help us predict whether meat occurs. so it can help us reduce entropy of meat. so we should expect the sigma term, namely this one, to have a smaller entropy. and that means there is a stronger association between meat and eats. so we now also know when this w is the same as this meat, then the conditional entropy would reach its minimum, which is 0. and for what kind of words would either reach its maximum? well, that's when this stuff is not really related to meat. and like the for example, it would be very close to the maximum, which is the entropy of meat itself. so this suggests that when you use conditional entropy for mining syntagmatic relations, the hours would look as follows. for each word w1, we're going to enumerate the overall other words w2. and then, we can compute the conditional entropy of w1 given w2. we thought all the candidate was in ascending order of the conditional entropy because we're out of favor, a world that has a small entropy. meaning that it helps us predict the time of the word w1. and then, we're going to take the top ring of the candidate words as words that have potential syntagmatic relations with w1. note that we need to use a threshold to find these words. the stresser can be the number of top candidates take, or absolute value for the conditional entropy. now, this would allow us to mine the most strongly correlated words with a particular word, w1 here. but, this algorithm does not help us mine the strongest that k syntagmatical relations from an entire collection. because in order to do that, we have to ensure that these conditional entropies are comparable across different words. in this case of discovering the mathematical relations for a targeted word like w1, we only need to compare the conditional entropies for w1, given different words. and in this case, they are comparable. all right. so, the conditional entropy of w1, given w2, and the conditional entropy of w1, given w3 are comparable. they all measure how hard it is to predict the w1. but, if we think about the two pairs, where we share w2 in the same condition, and we try to predict the w1 and w3. then, the conditional entropies are actually not comparable. you can think of about this question. why? so why are they not comfortable? well, that was because they have a different outer bounds. right? so those outer bounds are precisely the entropy of w1 and the entropy of w3. and they have different upper bounds. so we cannot really compare them in this way. so how do we address this problem? well later, we'll discuss, we can use mutual information to solve this problem. [music",02_2-2-syntagmatic-relation-discovery-conditional-entropy
94,https://www.coursera.org/learn/text-mining,09_2-9-probabilistic-topic-models-overview-of-statistical-language-models-part-2.en.txt,text-mining/03_week-2/02_week-2-lessons/09_2-9-probabilistic-topic-models-overview-of-statistical-language-models-part-2.en.txt,"[music] so now let's talk about the problem a little bit more, and specifically let's talk about the two different ways of estimating the parameters. one is called the maximum likelihood estimate that i already just mentioned. the other is bayesian estimation. so in maximum likelihood estimation, we define best as meaning the data likelihood has reached the maximum. so formally it's given by this expression here, where we define the estimate as a arg max of the probability of x given theta. so, arg max here just means its actually a function that will turn. the argument that gives the function maximum value, adds the value. so the value of arg max is not the value of this function. but rather, the argument that has made it the function reaches maximum. so in this case the value of arg max is theta. it's the theta that makes the probability of x, given theta, reach it's maximum. so this estimate that in due it also makes sense and it's often very useful, and it seeks the premise that best explains the data. but it has a problem, when the data is too small because when the data points are too small, there are very few data points. the sample is small, then if we trust data in entirely and try to fit the data and then we'll be biased. so in the case of text data, let's say, all observed 100 words did not contain another word related to text mining. now, our maximum likelihood estimator will give that word a zero probability. because giving the non-zero probability would take away probability mass from some observer word. which obviously is not optimal in terms of maximizing the likelihood of the observer data. but this zero probability for all the unseen words may not be reasonable sometimes. especially, if we want the distribution to characterize the topic of text mining. so one way to address this problem is actually to use bayesian estimation, where we actually would look at the both the data, and our prior knowledge about the parameters. we assume that we have some prior belief about the parameters. now in this case of course, so we are not going to look at just the data, but also look at the prior. so the prior here is defined by p of theta, and this means, we will impose some preference on certain theta's of others. and by using bayes rule, that i have shown here, we can then combine the likelihood function. with the prior to give us this posterior probability of the parameter. now, a full explanation of bayes rule, and some of these things related to bayesian reasoning, would be outside the scope of this course. but i just gave a brief introduction because this is general knowledge that might be useful to you. the bayes rule is basically defined here, and allows us to write down one conditional probability of x given y in terms of the conditional probability of y given x. and you can see the two probabilities are different in the order of the two variables. but often the rule is used for making inferences of the variable, so let's take a look at it again. we can assume that p(x) encodes our prior belief about x. that means before we observe any other data, that's our belief about x, what we believe some x values have higher probability than others. and this probability of x given y is a conditional probability, and this is our posterior belief about x. because this is our belief about x values after we have observed the y. given that we have observed the y, now what do we believe about x? now, do we believe some values have higher probabilities than others? now the two probabilities are related through this one, this can be regarded as the probability of the observed evidence y, given a particular x. so you can think about x as our hypothesis, and we have some prior belief about which hypothesis to choose. and after we have observed y, we will update our belief and this updating formula is based on the combination of our prior. and the likelihood of observing this y if x is indeed true, so much for detour about bayes rule. in our case, what we are interested in is inferring the theta values. so, we have a prior here that includes our prior knowledge about the parameters. and then we have the data likelihood here, that would tell us which parameter value can explain the data well. the posterior probability combines both of them, so it represents a compromise of the the two preferences. and in such a case, we can maximize this posterior probability. to find this theta that would maximize this posterior probability, and this estimator is called a maximum a posteriori, or map estimate. and this estimator is a more general estimator than the maximum likelihood estimator. because if we define our prior as a noninformative prior, meaning that it's uniform over all the theta values. no preference, then we basically would go back to the maximum likelihood estimated. because in such a case, it's mainly going to be determined by this likelihood value, the same as here. but if we have some not informative prior, some bias towards the different values then map estimator can allow us to incorporate that. but the problem here of course, is how to define the prior. there is no free lunch and if you want to solve the problem with more knowledge, we have to have that knowledge. and that knowledge, ideally, should be reliable. otherwise, your estimate may not necessarily be more accurate than that maximum likelihood estimate. so, now let's look at the bayesian estimation in more detail. so, i show the theta values as just a one dimension value and that's a simplification of course. and so, we're interested in which variable of theta is optimal. so now, first we have the prior. the prior tells us that some of the variables are more likely the others would believe. for example, these values are more likely than the values over here, or here, or other places. so this is our prior, and then we have our theta likelihood. and in this case, the theta also tells us which values of theta are more likely. and that just means loose syllables can best expand our theta. and then when we combine the two we get the posterior distribution, and that's just a compromise of the two. it would say that it's somewhere in-between. so, we can now look at some interesting point that is made of. this point represents the mode of prior, that means the most likely parameter value according to our prior, before we observe any data. this point is the maximum likelihood estimator, it represents the theta that gives the theta of maximum probability. now this point is interesting, it's the posterior mode. it's the most likely value of the theta given by the posterior of this. and it represents a good compromise of the prior mode and the maximum likelihood estimate. now in general in bayesian inference, we are interested in the distribution of all these parameter additives as you see here. if there's a distribution over see how values that you can see. here, p of theta given x. so the problem of bayesian inference is to infer this posterior, this regime, and also to infer other interesting quantities that might depend on theta. so, i show f of theta here as an interesting variable that we want to compute. but in order to compute this value, we need to know the value of theta. in bayesian inference, we treat theta as an uncertain variable. so we think about all the possible variables of theta. therefore, we can estimate the value of this function f as extracted value of f, according to the posterior distribution of theta, given the observed evidence x. as a special case, we can assume f of theta is just equal to theta. in this case, we get the expected value of the theta, that's basically the posterior mean. that gives us also one point of theta, and it's sometimes the same as posterior mode, but it's not always the same. so, it gives us another way to estimate the parameter. so, this is a general illustration of bayesian estimation and its an influence. and later, you will see this can be useful for topic mining where we want to inject the sum prior knowledge about the topics. so to summarize, we've used the language model which is basically probability distribution over text. it's also called a generative model for text data. the simplest language model is unigram language model, it's basically a word distribution. we introduced the concept of likelihood function, which is the probability of the a data given some model. and this function is very important, given a particular set of parameter values this function can tell us which x, which data point has a higher likelihood, higher probability. given a data sample x, we can use this function to determine which parameter values would maximize the probability of the observed data, and this is the maximum livelihood estimate. we also talk about the bayesian estimation or inference. in this case we, must define a prior on the parameters p of theta. and then we're interested in computing the posterior distribution of the parameters, which is proportional to the prior and the likelihood. and this distribution would allow us then to infer any derive that is from theta. [music",09_2-9-probabilistic-topic-models-overview-of-statistical-language-models-part-2
95,https://www.coursera.org/learn/text-mining,04_2-4-syntagmatic-relation-discovery-mutual-information-part-2.en.txt,text-mining/03_week-2/02_week-2-lessons/04_2-4-syntagmatic-relation-discovery-mutual-information-part-2.en.txt,"[sound] in general, we can use the empirical count of events in the observed data to estimate the probabilities. and a commonly used technique is called a maximum likelihood estimate, where we simply normalize the observe accounts. so if we do that, we can see, we can compute these probabilities as follows. for estimating the probability that we see a water current in a segment, we simply normalize the count of segments that contain this word. so let's first take a look at the data here. on the right side, you see a list of some, hypothesizes the data. these are segments. and in some segments you see both words occur, they are indicated as ones for both columns. in some other cases only one will occur, so only that column has one and the other column has zero. and in all, of course, in some other cases none of the words occur, so they are both zeros. and for estimating these probabilities, we simply need to collect the three counts. so the three counts are first, the count of w1. and that's the total number of segments that contain word w1. it's just as the ones in the column of w1. we can count how many ones we have seen there. the segment count is for word 2, and we just count the ones in the second column. and these will give us the total number of segments that contain w2. the third count is when both words occur. so this time, we're going to count the sentence where both columns have ones. and then, so this would give us the total number of segments where we have seen both w1 and w2. once we have these counts, we can just normalize these counts by n, which is the total number of segments, and this will give us the probabilities that we need to compute original information. now, there is a small problem, when we have zero counts sometimes. and in this case, we don't want a zero probability because our data may be a small sample and in general, we would believe that it's potentially possible for a [inaudible] to avoid any context. so, to address this problem, we can use a technique called smoothing. and that's basically to add some small constant to these counts, and so that we don't get the zero probability in any case. now, the best way to understand smoothing is imagine that we actually observed more data than we actually have, because we'll pretend we observed some pseudo-segments. i illustrated on the top, on the right side on the slide. and these pseudo-segments would contribute additional counts of these words so that no event will have zero probability. now, in particular we introduce the four pseudo-segments. each is weighted at one quarter. and these represent the four different combinations of occurrences of this word. so now each event, each combination will have at least one count or at least a non-zero count from this pseudo-segment. so, in the actual segments that we'll observe, it's okay if we haven't observed all of the combinations. so more specifically, you can see the 0.5 here after it comes from the two ones in the two pseudo-segments, because each is weighted at one quarter. we add them up, we get 0.5. and similar to this, 0.05 comes from one single pseudo-segment that indicates the two words occur together. and of course in the denominator we add the total number of pseudo-segments that we add, in this case, we added a four pseudo-segments. each is weighed at one quarter so the total of the sum is, after the one. so, that's why in the denominator you'll see a one there. so, this basically concludes the discussion of how to compute a these four syntagmatic relation discoveries. now, so to summarize, syntagmatic relation can generally be discovered by measuring correlations between occurrences of two words. we've introduced the three concepts from information theory. entropy, which measures the uncertainty of a random variable x. conditional entropy, which measures the entropy of x given we know y. and mutual information of x and y, which matches the entropy reduction of x due to knowing y, or entropy reduction of y due to knowing x. they are the same. so these three concepts are actually very useful for other applications as well. that's why we spent some time to explain this in detail. but in particular, they are also very useful for discovering syntagmatic relations. in particular, mutual information is a principal way for discovering such a relation. it allows us to have values computed on different pairs of words that are comparable and so we can rank these pairs and discover the strongest syntagmatic from a collection of documents. now, note that there is some relation between syntagmatic relation discovery and [inaudible] relation discovery. so we already discussed the possibility of using bm25 to achieve waiting for terms in the context to potentially also suggest the candidates that have syntagmatic relations with the candidate word. but here, once we use mutual information to discover syntagmatic relations, we can also represent the context with this mutual information as weights. so this would give us another way to represent the context of a word, like a cat. and if we do the same for all the words, then we can cluster these words or compare the similarity between these words based on their context similarity. so this provides yet another way to do term weighting for paradigmatic relation discovery. and so to summarize this whole part about word association mining. we introduce two basic associations, called a paradigmatic and a syntagmatic relations. these are fairly general, they apply to any items in any language, so the units don't have to be words, they can be phrases or entities. we introduced multiple statistical approaches for discovering them, mainly showing that pure statistical approaches are visible, are variable for discovering both kind of relations. and they can be combined to perform joint analysis, as well. these approaches can be applied to any text with no human effort, mostly because they are based on counting of words, yet they can actually discover interesting relations of words. we can also use different ways with defining context and segment, and this would lead us to some interesting variations of applications. for example, the context can be very narrow like a few words, around a word, or a sentence, or maybe paragraphs, as using differing contexts would allows to discover different flavors of paradigmatical relations. and similarly, counting co-occurrences using let's say, visual information to discover syntagmatical relations. we also have to define the segment, and the segment can be defined as a narrow text window or a longer text article. and this would give us different kinds of associations. these discovery associations can support many other applications, in both information retrieval and text and data mining. so here are some recommended readings, if you want to know more about the topic. the first is a book with a chapter on collocations, which is quite relevant to the topic of these lectures. the second is an article about using various statistical measures to discover lexical atoms. those are phrases that are non-compositional. for example, hot dog is not really a dog that's hot, blue chip is not a chip that's blue. and the paper has a discussion about some techniques for discovering such phrases. the third one is a new paper on a unified way to discover both paradigmatical relations and a syntagmatical relations, using random works on word graphs. [sound",04_2-4-syntagmatic-relation-discovery-mutual-information-part-2
